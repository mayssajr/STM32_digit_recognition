
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000faf0  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000940b4  0800fcc0  0800fcc0  00010cc0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080a3d74  080a3d74  000a5c30  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080a3d74  080a3d74  000a4d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080a3d7c  080a3d7c  000a5c30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080a3d7c  080a3d7c  000a4d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080a3d80  080a3d80  000a4d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000c30  20000000  080a3d84  000a5000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000a5c30  2**0
                  CONTENTS
 10 .bss          0000780c  20000c30  20000c30  000a5c30  2**2
                  ALLOC
 11 ._user_heap_stack 00001004  2000843c  2000843c  000a5c30  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000a5c30  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ab18  00000000  00000000  000a5c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f71  00000000  00000000  000c0778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  000c46f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9a  00000000  00000000  000c5b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ee8c  00000000  00000000  000c6b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b140  00000000  00000000  000f59ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010cbe2  00000000  00000000  00110aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  0021d6d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006830  00000000  00000000  0021d758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00223f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000c30 	.word	0x20000c30
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800fc98 	.word	0x0800fc98

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000c34 	.word	0x20000c34
 80001fc:	0800fc98 	.word	0x0800fc98

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b988 	b.w	8000f00 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	468e      	mov	lr, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	4688      	mov	r8, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d962      	bls.n	8000ce4 <__udivmoddi4+0xdc>
 8000c1e:	fab2 f682 	clz	r6, r2
 8000c22:	b14e      	cbz	r6, 8000c38 <__udivmoddi4+0x30>
 8000c24:	f1c6 0320 	rsb	r3, r6, #32
 8000c28:	fa01 f806 	lsl.w	r8, r1, r6
 8000c2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c30:	40b7      	lsls	r7, r6
 8000c32:	ea43 0808 	orr.w	r8, r3, r8
 8000c36:	40b4      	lsls	r4, r6
 8000c38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c44:	0c23      	lsrs	r3, r4, #16
 8000c46:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c4e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c5c:	f080 80ea 	bcs.w	8000e34 <__udivmoddi4+0x22c>
 8000c60:	429a      	cmp	r2, r3
 8000c62:	f240 80e7 	bls.w	8000e34 <__udivmoddi4+0x22c>
 8000c66:	3902      	subs	r1, #2
 8000c68:	443b      	add	r3, r7
 8000c6a:	1a9a      	subs	r2, r3, r2
 8000c6c:	b2a3      	uxth	r3, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c7a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c7e:	459c      	cmp	ip, r3
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0x8e>
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c88:	f080 80d6 	bcs.w	8000e38 <__udivmoddi4+0x230>
 8000c8c:	459c      	cmp	ip, r3
 8000c8e:	f240 80d3 	bls.w	8000e38 <__udivmoddi4+0x230>
 8000c92:	443b      	add	r3, r7
 8000c94:	3802      	subs	r0, #2
 8000c96:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9a:	eba3 030c 	sub.w	r3, r3, ip
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11d      	cbz	r5, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40f3      	lsrs	r3, r6
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	e9c5 3200 	strd	r3, r2, [r5]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d905      	bls.n	8000cbe <__udivmoddi4+0xb6>
 8000cb2:	b10d      	cbz	r5, 8000cb8 <__udivmoddi4+0xb0>
 8000cb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4608      	mov	r0, r1
 8000cbc:	e7f5      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cbe:	fab3 f183 	clz	r1, r3
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	d146      	bne.n	8000d54 <__udivmoddi4+0x14c>
 8000cc6:	4573      	cmp	r3, lr
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xc8>
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	f200 8105 	bhi.w	8000eda <__udivmoddi4+0x2d2>
 8000cd0:	1a84      	subs	r4, r0, r2
 8000cd2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	4690      	mov	r8, r2
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	d0e5      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000cde:	e9c5 4800 	strd	r4, r8, [r5]
 8000ce2:	e7e2      	b.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f000 8090 	beq.w	8000e0a <__udivmoddi4+0x202>
 8000cea:	fab2 f682 	clz	r6, r2
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	f040 80a4 	bne.w	8000e3c <__udivmoddi4+0x234>
 8000cf4:	1a8a      	subs	r2, r1, r2
 8000cf6:	0c03      	lsrs	r3, r0, #16
 8000cf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfc:	b280      	uxth	r0, r0
 8000cfe:	b2bc      	uxth	r4, r7
 8000d00:	2101      	movs	r1, #1
 8000d02:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d06:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x11e>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x11c>
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	f200 80e0 	bhi.w	8000ee4 <__udivmoddi4+0x2dc>
 8000d24:	46c4      	mov	ip, r8
 8000d26:	1a9b      	subs	r3, r3, r2
 8000d28:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d2c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d30:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d34:	fb02 f404 	mul.w	r4, r2, r4
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x144>
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x142>
 8000d44:	429c      	cmp	r4, r3
 8000d46:	f200 80ca 	bhi.w	8000ede <__udivmoddi4+0x2d6>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	1b1b      	subs	r3, r3, r4
 8000d4e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d52:	e7a5      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d54:	f1c1 0620 	rsb	r6, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5e:	431f      	orrs	r7, r3
 8000d60:	fa0e f401 	lsl.w	r4, lr, r1
 8000d64:	fa20 f306 	lsr.w	r3, r0, r6
 8000d68:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d6c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d70:	4323      	orrs	r3, r4
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	fa1f fc87 	uxth.w	ip, r7
 8000d7a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d7e:	0c1c      	lsrs	r4, r3, #16
 8000d80:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d84:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d88:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x1a0>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d9a:	f080 809c 	bcs.w	8000ed6 <__udivmoddi4+0x2ce>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f240 8099 	bls.w	8000ed6 <__udivmoddi4+0x2ce>
 8000da4:	3802      	subs	r0, #2
 8000da6:	443c      	add	r4, r7
 8000da8:	eba4 040e 	sub.w	r4, r4, lr
 8000dac:	fa1f fe83 	uxth.w	lr, r3
 8000db0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db4:	fb09 4413 	mls	r4, r9, r3, r4
 8000db8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dbc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc0:	45a4      	cmp	ip, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x1ce>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dca:	f080 8082 	bcs.w	8000ed2 <__udivmoddi4+0x2ca>
 8000dce:	45a4      	cmp	ip, r4
 8000dd0:	d97f      	bls.n	8000ed2 <__udivmoddi4+0x2ca>
 8000dd2:	3b02      	subs	r3, #2
 8000dd4:	443c      	add	r4, r7
 8000dd6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	fba0 ec02 	umull	lr, ip, r0, r2
 8000de2:	4564      	cmp	r4, ip
 8000de4:	4673      	mov	r3, lr
 8000de6:	46e1      	mov	r9, ip
 8000de8:	d362      	bcc.n	8000eb0 <__udivmoddi4+0x2a8>
 8000dea:	d05f      	beq.n	8000eac <__udivmoddi4+0x2a4>
 8000dec:	b15d      	cbz	r5, 8000e06 <__udivmoddi4+0x1fe>
 8000dee:	ebb8 0203 	subs.w	r2, r8, r3
 8000df2:	eb64 0409 	sbc.w	r4, r4, r9
 8000df6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfa:	fa22 f301 	lsr.w	r3, r2, r1
 8000dfe:	431e      	orrs	r6, r3
 8000e00:	40cc      	lsrs	r4, r1
 8000e02:	e9c5 6400 	strd	r6, r4, [r5]
 8000e06:	2100      	movs	r1, #0
 8000e08:	e74f      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e0a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e0e:	0c01      	lsrs	r1, r0, #16
 8000e10:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e14:	b280      	uxth	r0, r0
 8000e16:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4638      	mov	r0, r7
 8000e1e:	463c      	mov	r4, r7
 8000e20:	46b8      	mov	r8, r7
 8000e22:	46be      	mov	lr, r7
 8000e24:	2620      	movs	r6, #32
 8000e26:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e2a:	eba2 0208 	sub.w	r2, r2, r8
 8000e2e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e32:	e766      	b.n	8000d02 <__udivmoddi4+0xfa>
 8000e34:	4601      	mov	r1, r0
 8000e36:	e718      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e38:	4610      	mov	r0, r2
 8000e3a:	e72c      	b.n	8000c96 <__udivmoddi4+0x8e>
 8000e3c:	f1c6 0220 	rsb	r2, r6, #32
 8000e40:	fa2e f302 	lsr.w	r3, lr, r2
 8000e44:	40b7      	lsls	r7, r6
 8000e46:	40b1      	lsls	r1, r6
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e50:	430a      	orrs	r2, r1
 8000e52:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e56:	b2bc      	uxth	r4, r7
 8000e58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb08 f904 	mul.w	r9, r8, r4
 8000e66:	40b0      	lsls	r0, r6
 8000e68:	4589      	cmp	r9, r1
 8000e6a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e6e:	b280      	uxth	r0, r0
 8000e70:	d93e      	bls.n	8000ef0 <__udivmoddi4+0x2e8>
 8000e72:	1879      	adds	r1, r7, r1
 8000e74:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e78:	d201      	bcs.n	8000e7e <__udivmoddi4+0x276>
 8000e7a:	4589      	cmp	r9, r1
 8000e7c:	d81f      	bhi.n	8000ebe <__udivmoddi4+0x2b6>
 8000e7e:	eba1 0109 	sub.w	r1, r1, r9
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fb09 f804 	mul.w	r8, r9, r4
 8000e8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	4542      	cmp	r2, r8
 8000e96:	d229      	bcs.n	8000eec <__udivmoddi4+0x2e4>
 8000e98:	18ba      	adds	r2, r7, r2
 8000e9a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e9e:	d2c4      	bcs.n	8000e2a <__udivmoddi4+0x222>
 8000ea0:	4542      	cmp	r2, r8
 8000ea2:	d2c2      	bcs.n	8000e2a <__udivmoddi4+0x222>
 8000ea4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ea8:	443a      	add	r2, r7
 8000eaa:	e7be      	b.n	8000e2a <__udivmoddi4+0x222>
 8000eac:	45f0      	cmp	r8, lr
 8000eae:	d29d      	bcs.n	8000dec <__udivmoddi4+0x1e4>
 8000eb0:	ebbe 0302 	subs.w	r3, lr, r2
 8000eb4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000eb8:	3801      	subs	r0, #1
 8000eba:	46e1      	mov	r9, ip
 8000ebc:	e796      	b.n	8000dec <__udivmoddi4+0x1e4>
 8000ebe:	eba7 0909 	sub.w	r9, r7, r9
 8000ec2:	4449      	add	r1, r9
 8000ec4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ec8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ecc:	fb09 f804 	mul.w	r8, r9, r4
 8000ed0:	e7db      	b.n	8000e8a <__udivmoddi4+0x282>
 8000ed2:	4673      	mov	r3, lr
 8000ed4:	e77f      	b.n	8000dd6 <__udivmoddi4+0x1ce>
 8000ed6:	4650      	mov	r0, sl
 8000ed8:	e766      	b.n	8000da8 <__udivmoddi4+0x1a0>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e6fd      	b.n	8000cda <__udivmoddi4+0xd2>
 8000ede:	443b      	add	r3, r7
 8000ee0:	3a02      	subs	r2, #2
 8000ee2:	e733      	b.n	8000d4c <__udivmoddi4+0x144>
 8000ee4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee8:	443b      	add	r3, r7
 8000eea:	e71c      	b.n	8000d26 <__udivmoddi4+0x11e>
 8000eec:	4649      	mov	r1, r9
 8000eee:	e79c      	b.n	8000e2a <__udivmoddi4+0x222>
 8000ef0:	eba1 0109 	sub.w	r1, r1, r9
 8000ef4:	46c4      	mov	ip, r8
 8000ef6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efa:	fb09 f804 	mul.w	r8, r9, r4
 8000efe:	e7c4      	b.n	8000e8a <__udivmoddi4+0x282>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <network_init>:
static void capture_frame_bbox_to_mnist(uint8_t *out28x28, int x0, int y0, int x1, int y1);
static void draw_ui_init(void);
static void Error_Display(const char *msg);

/* === Initialize network === */
static void network_init(void) {
 8000f04:	b5b0      	push	{r4, r5, r7, lr}
 8000f06:	b092      	sub	sp, #72	@ 0x48
 8000f08:	af00      	add	r7, sp, #0
    ai_error err;

    err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4830      	ldr	r0, [pc, #192]	@ (8000fd0 <network_init+0xcc>)
 8000f0e:	f008 fc17 	bl	8009740 <ai_network_create>
 8000f12:	4603      	mov	r3, r0
 8000f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (err.type != AI_ERROR_NONE) {
 8000f16:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d004      	beq.n	8000f28 <network_init+0x24>
        /* cannot create network: show error and stop */
        Error_Display("AI create error");
 8000f1e:	482d      	ldr	r0, [pc, #180]	@ (8000fd4 <network_init+0xd0>)
 8000f20:	f000 fb02 	bl	8001528 <Error_Display>
        Error_Handler();
 8000f24:	f001 f906 	bl	8002134 <Error_Handler>
    }

    const ai_network_params params = {
        AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8000f28:	f008 fd0a 	bl	8009940 <ai_network_data_weights_get>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f008 fcce 	bl	80098d4 <ai_network_data_weights_buffer_get>
        AI_NETWORK_DATA_ACTIVATIONS(activations)
 8000f38:	f107 0320 	add.w	r3, r7, #32
 8000f3c:	4926      	ldr	r1, [pc, #152]	@ (8000fd8 <network_init+0xd4>)
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f008 fc94 	bl	800986c <ai_network_data_activations_buffer_get>
    };

    if (!ai_network_init(network, &params)) {
 8000f44:	4b22      	ldr	r3, [pc, #136]	@ (8000fd0 <network_init+0xcc>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	1d3a      	adds	r2, r7, #4
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f008 fc41 	bl	80097d4 <ai_network_init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	f083 0301 	eor.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d00b      	beq.n	8000f76 <network_init+0x72>
        /* initialization failed: show error and stop */
        err = ai_network_get_error(network);
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <network_init+0xcc>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f008 fbe0 	bl	8009728 <ai_network_get_error>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        Error_Display("AI init error");
 8000f6c:	481b      	ldr	r0, [pc, #108]	@ (8000fdc <network_init+0xd8>)
 8000f6e:	f000 fadb 	bl	8001528 <Error_Display>
        Error_Handler();
 8000f72:	f001 f8df 	bl	8002134 <Error_Handler>
    }

    /* Retrieve io buffers */
    const ai_buffer *input = ai_network_inputs_get(network, NULL);
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <network_init+0xcc>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f008 fbf5 	bl	800976c <ai_network_inputs_get>
 8000f82:	6478      	str	r0, [r7, #68]	@ 0x44
    const ai_buffer *output = ai_network_outputs_get(network, NULL);
 8000f84:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <network_init+0xcc>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f008 fc08 	bl	80097a0 <ai_network_outputs_get>
 8000f90:	6438      	str	r0, [r7, #64]	@ 0x40

    /* copy descriptors */
    ai_input[0] = input[0];
 8000f92:	4a13      	ldr	r2, [pc, #76]	@ (8000fe0 <network_init+0xdc>)
 8000f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f96:	4614      	mov	r4, r2
 8000f98:	461d      	mov	r5, r3
 8000f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ai_output[0] = output[0];
 8000fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe4 <network_init+0xe0>)
 8000fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000faa:	4614      	mov	r4, r2
 8000fac:	461d      	mov	r5, r3
 8000fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    /* associate memory pointers (we store floats in in_data/out_data) */
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000fba:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <network_init+0xdc>)
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <network_init+0xe4>)
 8000fbe:	605a      	str	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000fc0:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <network_init+0xe0>)
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <network_init+0xe8>)
 8000fc4:	605a      	str	r2, [r3, #4]
}
 8000fc6:	bf00      	nop
 8000fc8:	3748      	adds	r7, #72	@ 0x48
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000c4c 	.word	0x20000c4c
 8000fd4:	0800fcc0 	.word	0x0800fcc0
 8000fd8:	20000c50 	.word	0x20000c50
 8000fdc:	0800fcd0 	.word	0x0800fcd0
 8000fe0:	200070f0 	.word	0x200070f0
 8000fe4:	2000710c 	.word	0x2000710c
 8000fe8:	20007128 	.word	0x20007128
 8000fec:	20007d68 	.word	0x20007d68

08000ff0 <ai_run>:

/* === AI inference: convert uint8 28x28 -> float normalized and run ===
   Returns predicted label 0..9 or -1 on error. Also fills out_data[] with outputs.
   IMPORTANT: If your model was quantized you must apply the proper scale/zero_point here.
*/
static int ai_run(uint8_t *img) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    ai_i32 nbatch;

    /* Normalize into in_data (float32 in range 0..1) */
    for (int i = 0; i < AI_NETWORK_IN_1_SIZE; i++) {
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
 8000ffc:	e014      	b.n	8001028 <ai_run+0x38>
        in_data[i] = ((float)img[i]) / 255.0f;
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	ee07 3a90 	vmov	s15, r3
 800100a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800100e:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80010b0 <ai_run+0xc0>
 8001012:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001016:	4a27      	ldr	r2, [pc, #156]	@ (80010b4 <ai_run+0xc4>)
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < AI_NETWORK_IN_1_SIZE; i++) {
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3301      	adds	r3, #1
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 800102e:	dbe6      	blt.n	8000ffe <ai_run+0xe>
    }

    /* ensure ai_input/ai_output point to buffers (redundant but safe) */
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001030:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <ai_run+0xc8>)
 8001032:	4a20      	ldr	r2, [pc, #128]	@ (80010b4 <ai_run+0xc4>)
 8001034:	605a      	str	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001036:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <ai_run+0xcc>)
 8001038:	4a21      	ldr	r2, [pc, #132]	@ (80010c0 <ai_run+0xd0>)
 800103a:	605a      	str	r2, [r3, #4]

    nbatch = ai_network_run(network, ai_input, ai_output);
 800103c:	4b21      	ldr	r3, [pc, #132]	@ (80010c4 <ai_run+0xd4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a1e      	ldr	r2, [pc, #120]	@ (80010bc <ai_run+0xcc>)
 8001042:	491d      	ldr	r1, [pc, #116]	@ (80010b8 <ai_run+0xc8>)
 8001044:	4618      	mov	r0, r3
 8001046:	f008 fc01 	bl	800984c <ai_network_run>
 800104a:	60f8      	str	r0, [r7, #12]
    if (nbatch != 1) {
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d005      	beq.n	800105e <ai_run+0x6e>
        /* Show error but do not block entire system */
        Error_Display("AI run error");
 8001052:	481d      	ldr	r0, [pc, #116]	@ (80010c8 <ai_run+0xd8>)
 8001054:	f000 fa68 	bl	8001528 <Error_Display>
        return -1;
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	e023      	b.n	80010a6 <ai_run+0xb6>
    }

    /* Find top index */
    int max_idx = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
    float max_val = out_data[0];
 8001062:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <ai_run+0xd0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	617b      	str	r3, [r7, #20]
    for (int i = 1; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8001068:	2301      	movs	r3, #1
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	e017      	b.n	800109e <ai_run+0xae>
        if (out_data[i] > max_val) {
 800106e:	4a14      	ldr	r2, [pc, #80]	@ (80010c0 <ai_run+0xd0>)
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	edd3 7a00 	vldr	s15, [r3]
 800107a:	ed97 7a05 	vldr	s14, [r7, #20]
 800107e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001086:	d507      	bpl.n	8001098 <ai_run+0xa8>
            max_val = out_data[i];
 8001088:	4a0d      	ldr	r2, [pc, #52]	@ (80010c0 <ai_run+0xd0>)
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	617b      	str	r3, [r7, #20]
            max_idx = i;
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	61bb      	str	r3, [r7, #24]
    for (int i = 1; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	3301      	adds	r3, #1
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	2b09      	cmp	r3, #9
 80010a2:	dde4      	ble.n	800106e <ai_run+0x7e>
        }
    }

    return max_idx;
 80010a4:	69bb      	ldr	r3, [r7, #24]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	437f0000 	.word	0x437f0000
 80010b4:	20007128 	.word	0x20007128
 80010b8:	200070f0 	.word	0x200070f0
 80010bc:	2000710c 	.word	0x2000710c
 80010c0:	20007d68 	.word	0x20007d68
 80010c4:	20000c4c 	.word	0x20000c4c
 80010c8:	0800fce0 	.word	0x0800fce0

080010cc <ai_run_with_conf>:

/* Convenience wrapper (same as ai_run but just a named alias if needed) */
static int ai_run_with_conf(uint8_t *img28) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    return ai_run(img28);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff8b 	bl	8000ff0 <ai_run>
 80010da:	4603      	mov	r3, r0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <capture_frame_bbox_to_mnist>:

/* === Capture a bounding-box region of the framebuffer and downscale to 28x28.
   - x0,y0..x1,y1 are inclusive screen coordinates.
   - out28x28[] values 0..255 (uint8_t).
*/
static void capture_frame_bbox_to_mnist(uint8_t *out28x28, int x0, int y0, int x1, int y1) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0a4      	sub	sp, #144	@ 0x90
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6178      	str	r0, [r7, #20]
 80010ec:	6139      	str	r1, [r7, #16]
 80010ee:	60fa      	str	r2, [r7, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
    uint32_t *fb = (uint32_t *)LCD_FB_START_ADDRESS;
 80010f2:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80010f6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (fb == NULL) {
 80010f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d114      	bne.n	8001128 <capture_frame_bbox_to_mnist+0x44>
        for (int i = 0; i < 28*28; i++) out28x28[i] = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001104:	e00a      	b.n	800111c <capture_frame_bbox_to_mnist+0x38>
 8001106:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	4413      	add	r3, r2
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
 8001112:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001116:	3301      	adds	r3, #1
 8001118:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800111c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001120:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 8001124:	dbef      	blt.n	8001106 <capture_frame_bbox_to_mnist+0x22>
        return;
 8001126:	e16f      	b.n	8001408 <capture_frame_bbox_to_mnist+0x324>
    }

    int srcW = x1 - x0 + 1;
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	3301      	adds	r3, #1
 8001130:	653b      	str	r3, [r7, #80]	@ 0x50
    int srcH = y1 - y0 + 1;
 8001132:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	3301      	adds	r3, #1
 800113c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (srcW <= 0 || srcH <= 0) {
 800113e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001140:	2b00      	cmp	r3, #0
 8001142:	dd02      	ble.n	800114a <capture_frame_bbox_to_mnist+0x66>
 8001144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001146:	2b00      	cmp	r3, #0
 8001148:	dc14      	bgt.n	8001174 <capture_frame_bbox_to_mnist+0x90>
        for (int i = 0; i < 28*28; i++) out28x28[i] = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001150:	e00a      	b.n	8001168 <capture_frame_bbox_to_mnist+0x84>
 8001152:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	4413      	add	r3, r2
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001162:	3301      	adds	r3, #1
 8001164:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001168:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800116c:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 8001170:	dbef      	blt.n	8001152 <capture_frame_bbox_to_mnist+0x6e>
        return;
 8001172:	e149      	b.n	8001408 <capture_frame_bbox_to_mnist+0x324>
    }

    const int dstW = 28, dstH = 28;
 8001174:	231c      	movs	r3, #28
 8001176:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001178:	231c      	movs	r3, #28
 800117a:	647b      	str	r3, [r7, #68]	@ 0x44
    float sx = (float)srcW / (float)dstW;
 800117c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001194:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float sy = (float)srcH / (float)dstH;
 8001198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    for (int y = 0; y < dstH; y++) {
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80011ba:	e11f      	b.n	80013fc <capture_frame_bbox_to_mnist+0x318>
        float y0f = y * sy;
 80011bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011c0:	ee07 3a90 	vmov	s15, r3
 80011c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80011cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        float y1f = (y + 1) * sy;
 80011d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011d8:	3301      	adds	r3, #1
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80011e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ea:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        int ys = (int)floorf(y0f);
 80011ee:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 80011f2:	f00e fbfd 	bl	800f9f0 <floorf>
 80011f6:	eef0 7a40 	vmov.f32	s15, s0
 80011fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011fe:	ee17 3a90 	vmov	r3, s15
 8001202:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        int ye = (int)ceilf(y1f);
 8001206:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 800120a:	f00e fbaf 	bl	800f96c <ceilf>
 800120e:	eef0 7a40 	vmov.f32	s15, s0
 8001212:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001216:	ee17 3a90 	vmov	r3, s15
 800121a:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (ye >= srcH) ye = srcH - 1;
 800121c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800121e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001220:	429a      	cmp	r2, r3
 8001222:	db02      	blt.n	800122a <capture_frame_bbox_to_mnist+0x146>
 8001224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001226:	3b01      	subs	r3, #1
 8001228:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (ys < 0) ys = 0;
 800122a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800122e:	2b00      	cmp	r3, #0
 8001230:	da02      	bge.n	8001238 <capture_frame_bbox_to_mnist+0x154>
 8001232:	2300      	movs	r3, #0
 8001234:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        for (int x = 0; x < dstW; x++) {
 8001238:	2300      	movs	r3, #0
 800123a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800123c:	e0d4      	b.n	80013e8 <capture_frame_bbox_to_mnist+0x304>
            float x0f = x * sx;
 800123e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001248:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800124c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001250:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
            float x1f = (x + 1) * sx;
 8001254:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001256:	3301      	adds	r3, #1
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001260:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001268:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            int xs = (int)floorf(x0f);
 800126c:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8001270:	f00e fbbe 	bl	800f9f0 <floorf>
 8001274:	eef0 7a40 	vmov.f32	s15, s0
 8001278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800127c:	ee17 3a90 	vmov	r3, s15
 8001280:	677b      	str	r3, [r7, #116]	@ 0x74
            int xe = (int)ceilf(x1f);
 8001282:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8001286:	f00e fb71 	bl	800f96c <ceilf>
 800128a:	eef0 7a40 	vmov.f32	s15, s0
 800128e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001292:	ee17 3a90 	vmov	r3, s15
 8001296:	673b      	str	r3, [r7, #112]	@ 0x70
            if (xe >= srcW) xe = srcW - 1;
 8001298:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800129a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800129c:	429a      	cmp	r2, r3
 800129e:	db02      	blt.n	80012a6 <capture_frame_bbox_to_mnist+0x1c2>
 80012a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012a2:	3b01      	subs	r3, #1
 80012a4:	673b      	str	r3, [r7, #112]	@ 0x70
            if (xs < 0) xs = 0;
 80012a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	da01      	bge.n	80012b0 <capture_frame_bbox_to_mnist+0x1cc>
 80012ac:	2300      	movs	r3, #0
 80012ae:	677b      	str	r3, [r7, #116]	@ 0x74

            uint32_t rsum=0, gsum=0, bsum=0, count=0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80012b4:	2300      	movs	r3, #0
 80012b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80012b8:	2300      	movs	r3, #0
 80012ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80012bc:	2300      	movs	r3, #0
 80012be:	663b      	str	r3, [r7, #96]	@ 0x60
            for (int yy = ys; yy <= ye; yy++) {
 80012c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80012c6:	e036      	b.n	8001336 <capture_frame_bbox_to_mnist+0x252>
                uint32_t *row = fb + ((y0 + yy) * SRC_WIDTH);
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012cc:	4413      	add	r3, r2
 80012ce:	461a      	mov	r2, r3
 80012d0:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 80012d4:	fb02 f303 	mul.w	r3, r2, r3
 80012d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80012da:	4413      	add	r3, r2
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
                for (int xx = xs; xx <= xe; xx++) {
 80012de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80012e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80012e2:	e021      	b.n	8001328 <capture_frame_bbox_to_mnist+0x244>
                    uint32_t px = row[x0 + xx]; /* ARGB8888 */
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80012e8:	4413      	add	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ee:	4413      	add	r3, r2
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	623b      	str	r3, [r7, #32]
                    uint8_t b = (uint8_t)(px & 0xFF);
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	77fb      	strb	r3, [r7, #31]
                    uint8_t g = (uint8_t)((px >> 8) & 0xFF);
 80012f8:	6a3b      	ldr	r3, [r7, #32]
 80012fa:	0a1b      	lsrs	r3, r3, #8
 80012fc:	77bb      	strb	r3, [r7, #30]
                    uint8_t r = (uint8_t)((px >> 16) & 0xFF);
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	0c1b      	lsrs	r3, r3, #16
 8001302:	777b      	strb	r3, [r7, #29]
                    rsum += r; gsum += g; bsum += b;
 8001304:	7f7b      	ldrb	r3, [r7, #29]
 8001306:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001308:	4413      	add	r3, r2
 800130a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800130c:	7fbb      	ldrb	r3, [r7, #30]
 800130e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001310:	4413      	add	r3, r2
 8001312:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001314:	7ffb      	ldrb	r3, [r7, #31]
 8001316:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001318:	4413      	add	r3, r2
 800131a:	667b      	str	r3, [r7, #100]	@ 0x64
                    count++;
 800131c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800131e:	3301      	adds	r3, #1
 8001320:	663b      	str	r3, [r7, #96]	@ 0x60
                for (int xx = xs; xx <= xe; xx++) {
 8001322:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001324:	3301      	adds	r3, #1
 8001326:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001328:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800132a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800132c:	429a      	cmp	r2, r3
 800132e:	ddd9      	ble.n	80012e4 <capture_frame_bbox_to_mnist+0x200>
            for (int yy = ys; yy <= ye; yy++) {
 8001330:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001332:	3301      	adds	r3, #1
 8001334:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001336:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001338:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800133a:	429a      	cmp	r2, r3
 800133c:	ddc4      	ble.n	80012c8 <capture_frame_bbox_to_mnist+0x1e4>
                }
            }
            if (count == 0) count = 1;
 800133e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <capture_frame_bbox_to_mnist+0x264>
 8001344:	2301      	movs	r3, #1
 8001346:	663b      	str	r3, [r7, #96]	@ 0x60
            uint8_t ravg = (uint8_t)(rsum / count);
 8001348:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800134a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800134c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001350:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            uint8_t gavg = (uint8_t)(gsum / count);
 8001354:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001356:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001358:	fbb2 f3f3 	udiv	r3, r2, r3
 800135c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            uint8_t bavg = (uint8_t)(bsum / count);
 8001360:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001362:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001364:	fbb2 f3f3 	udiv	r3, r2, r3
 8001368:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

            uint8_t gray = (uint8_t)((0.299f * ravg) + (0.587f * gavg) + (0.114f * bavg));
 800136c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001370:	ee07 3a90 	vmov	s15, r3
 8001374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001378:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001410 <capture_frame_bbox_to_mnist+0x32c>
 800137c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001380:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001414 <capture_frame_bbox_to_mnist+0x330>
 8001390:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001394:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001398:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a4:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001418 <capture_frame_bbox_to_mnist+0x334>
 80013a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013b4:	edc7 7a01 	vstr	s15, [r7, #4]
 80013b8:	793b      	ldrb	r3, [r7, #4]
 80013ba:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
#if INVERT_INPUT
            gray = 255 - gray;
 80013be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80013c2:	43db      	mvns	r3, r3
 80013c4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
#endif
            out28x28[y*dstW + x] = gray;
 80013c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80013cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80013ce:	fb03 f202 	mul.w	r2, r3, r2
 80013d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80013d4:	4413      	add	r3, r2
 80013d6:	461a      	mov	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	4413      	add	r3, r2
 80013dc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80013e0:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < dstW; x++) {
 80013e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80013e4:	3301      	adds	r3, #1
 80013e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80013e8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80013ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80013ec:	429a      	cmp	r2, r3
 80013ee:	f6ff af26 	blt.w	800123e <capture_frame_bbox_to_mnist+0x15a>
    for (int y = 0; y < dstH; y++) {
 80013f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80013f6:	3301      	adds	r3, #1
 80013f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80013fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001402:	429a      	cmp	r2, r3
 8001404:	f6ff aeda 	blt.w	80011bc <capture_frame_bbox_to_mnist+0xd8>
        }
    }
}
 8001408:	3790      	adds	r7, #144	@ 0x90
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	3e991687 	.word	0x3e991687
 8001414:	3f1645a2 	.word	0x3f1645a2
 8001418:	3de978d5 	.word	0x3de978d5

0800141c <draw_ui_init>:

/* Small helper to draw the initial UI: top banner, drawing rectangle, result box */
static void draw_ui_init(void) {
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
    /* Clear screen */
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f002 fb22 	bl	8003a6c <BSP_LCD_Clear>

    /* Top banner */
    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001428:	4837      	ldr	r0, [pc, #220]	@ (8001508 <draw_ui_init+0xec>)
 800142a:	f002 faeb 	bl	8003a04 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800142e:	f04f 30ff 	mov.w	r0, #4294967295
 8001432:	f002 facf 	bl	80039d4 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, SRC_WIDTH, 50);
 8001436:	2332      	movs	r3, #50	@ 0x32
 8001438:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800143c:	2100      	movs	r1, #0
 800143e:	2000      	movs	r0, #0
 8001440:	f002 fcfa 	bl	8003e38 <BSP_LCD_FillRect>
    BSP_LCD_DisplayStringAt(0, 15, (uint8_t*)"Digit Recognition", CENTER_MODE);
 8001444:	2301      	movs	r3, #1
 8001446:	4a31      	ldr	r2, [pc, #196]	@ (800150c <draw_ui_init+0xf0>)
 8001448:	210f      	movs	r1, #15
 800144a:	2000      	movs	r0, #0
 800144c:	f002 fb7a 	bl	8003b44 <BSP_LCD_DisplayStringAt>

    /* Drawing box */
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f002 fad6 	bl	8003a04 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001458:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800145c:	f002 faba 	bl	80039d4 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawRect(DRAW_X, DRAW_Y, DRAW_W, DRAW_H);
 8001460:	23fa      	movs	r3, #250	@ 0xfa
 8001462:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8001466:	2150      	movs	r1, #80	@ 0x50
 8001468:	2032      	movs	r0, #50	@ 0x32
 800146a:	f002 fcb3 	bl	8003dd4 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(0, DRAW_Y - 18, (uint8_t*)"Draw here", CENTER_MODE);
 800146e:	2301      	movs	r3, #1
 8001470:	4a27      	ldr	r2, [pc, #156]	@ (8001510 <draw_ui_init+0xf4>)
 8001472:	213e      	movs	r1, #62	@ 0x3e
 8001474:	2000      	movs	r0, #0
 8001476:	f002 fb65 	bl	8003b44 <BSP_LCD_DisplayStringAt>

    /* Clear drawing area (white) */
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800147a:	f04f 30ff 	mov.w	r0, #4294967295
 800147e:	f002 fac1 	bl	8003a04 <BSP_LCD_SetBackColor>
    BSP_LCD_FillRect(DRAW_X+1, DRAW_Y+1, DRAW_W-2, DRAW_H-2);
 8001482:	23f8      	movs	r3, #248	@ 0xf8
 8001484:	f240 22ba 	movw	r2, #698	@ 0x2ba
 8001488:	2151      	movs	r1, #81	@ 0x51
 800148a:	2033      	movs	r0, #51	@ 0x33
 800148c:	f002 fcd4 	bl	8003e38 <BSP_LCD_FillRect>

    /* "Clear" button (visual only: we clear automatically after prediction) */
    BSP_LCD_SetBackColor(LCD_COLOR_LIGHTGRAY);
 8001490:	4820      	ldr	r0, [pc, #128]	@ (8001514 <draw_ui_init+0xf8>)
 8001492:	f002 fab7 	bl	8003a04 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001496:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800149a:	f002 fa9b 	bl	80039d4 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(DRAW_X, DRAW_Y + DRAW_H + 12, 120, 36);
 800149e:	2324      	movs	r3, #36	@ 0x24
 80014a0:	2278      	movs	r2, #120	@ 0x78
 80014a2:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 80014a6:	2032      	movs	r0, #50	@ 0x32
 80014a8:	f002 fcc6 	bl	8003e38 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80014ac:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80014b0:	f002 fa90 	bl	80039d4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(DRAW_X + 10, DRAW_Y + DRAW_H + 22, (uint8_t*)"Clear", LEFT_MODE);
 80014b4:	2303      	movs	r3, #3
 80014b6:	4a18      	ldr	r2, [pc, #96]	@ (8001518 <draw_ui_init+0xfc>)
 80014b8:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 80014bc:	203c      	movs	r0, #60	@ 0x3c
 80014be:	f002 fb41 	bl	8003b44 <BSP_LCD_DisplayStringAt>

    /* Result box */
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80014c2:	f04f 30ff 	mov.w	r0, #4294967295
 80014c6:	f002 fa9d 	bl	8003a04 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80014ca:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80014ce:	f002 fa81 	bl	80039d4 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawRect(RESULT_X, RESULT_Y, RESULT_W, RESULT_H);
 80014d2:	236e      	movs	r3, #110	@ 0x6e
 80014d4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80014d8:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80014dc:	20c8      	movs	r0, #200	@ 0xc8
 80014de:	f002 fc79 	bl	8003dd4 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(0, RESULT_Y - 14, (uint8_t*)"Result", CENTER_MODE);
 80014e2:	2301      	movs	r3, #1
 80014e4:	4a0d      	ldr	r2, [pc, #52]	@ (800151c <draw_ui_init+0x100>)
 80014e6:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80014ea:	2000      	movs	r0, #0
 80014ec:	f002 fb2a 	bl	8003b44 <BSP_LCD_DisplayStringAt>

    /* Initial instruction */
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80014f0:	480b      	ldr	r0, [pc, #44]	@ (8001520 <draw_ui_init+0x104>)
 80014f2:	f002 fa6f 	bl	80039d4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"Draw a digit and release to predict", CENTER_MODE);
 80014f6:	2301      	movs	r3, #1
 80014f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001524 <draw_ui_init+0x108>)
 80014fa:	213c      	movs	r1, #60	@ 0x3c
 80014fc:	2000      	movs	r0, #0
 80014fe:	f002 fb21 	bl	8003b44 <BSP_LCD_DisplayStringAt>
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	ff0000ff 	.word	0xff0000ff
 800150c:	0800fcf0 	.word	0x0800fcf0
 8001510:	0800fd04 	.word	0x0800fd04
 8001514:	ffd3d3d3 	.word	0xffd3d3d3
 8001518:	0800fd10 	.word	0x0800fd10
 800151c:	0800fd18 	.word	0x0800fd18
 8001520:	ffff0000 	.word	0xffff0000
 8001524:	0800fd20 	.word	0x0800fd20

08001528 <Error_Display>:

/* Error display (non-blocking) */
static void Error_Display(const char *msg) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
    /* Draw message in result area in red */
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f002 fa66 	bl	8003a04 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001538:	480a      	ldr	r0, [pc, #40]	@ (8001564 <Error_Display+0x3c>)
 800153a:	f002 fa4b 	bl	80039d4 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(RESULT_X+1, RESULT_Y+1, RESULT_W-2, RESULT_H-2);
 800153e:	236c      	movs	r3, #108	@ 0x6c
 8001540:	f44f 72c7 	mov.w	r2, #398	@ 0x18e
 8001544:	f240 115f 	movw	r1, #351	@ 0x15f
 8001548:	20c9      	movs	r0, #201	@ 0xc9
 800154a:	f002 fc75 	bl	8003e38 <BSP_LCD_FillRect>
    BSP_LCD_DisplayStringAt(0, RESULT_Y + (RESULT_H/2) - 6, (uint8_t*)msg, CENTER_MODE);
 800154e:	2301      	movs	r3, #1
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	f240 118f 	movw	r1, #399	@ 0x18f
 8001556:	2000      	movs	r0, #0
 8001558:	f002 faf4 	bl	8003b44 <BSP_LCD_DisplayStringAt>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	ffff0000 	.word	0xffff0000

08001568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 800156e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001570:	f003 fa18 	bl	80049a4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001574:	f000 facc 	bl	8001b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001578:	f000 fd6e 	bl	8002058 <MX_GPIO_Init>
  MX_CRC_Init();
 800157c:	f000 fb3a 	bl	8001bf4 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001580:	f000 fb4c 	bl	8001c1c <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 8001584:	f000 fb7c 	bl	8001c80 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8001588:	f000 fd16 	bl	8001fb8 <MX_FMC_Init>
  MX_I2C1_Init();
 800158c:	f000 fc66 	bl	8001e5c <MX_I2C1_Init>
  MX_LTDC_Init();
 8001590:	f000 fc92 	bl	8001eb8 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  network_init();
 8001594:	f7ff fcb6 	bl	8000f04 <network_init>


  /* Init SDRAM + LCD + Touch */
      BSP_SDRAM_Init();
 8001598:	f002 feac 	bl	80042f4 <BSP_SDRAM_Init>
      BSP_LCD_Init();
 800159c:	f001 ffbd 	bl	800351a <BSP_LCD_Init>
      BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80015a0:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80015a4:	2000      	movs	r0, #0
 80015a6:	f002 f9a5 	bl	80038f4 <BSP_LCD_LayerDefaultInit>
      BSP_LCD_SelectLayer(0);
 80015aa:	2000      	movs	r0, #0
 80015ac:	f002 fa02 	bl	80039b4 <BSP_LCD_SelectLayer>
      BSP_LCD_DisplayOn();
 80015b0:	f002 fc9c 	bl	8003eec <BSP_LCD_DisplayOn>

      if (BSP_TS_Init(SRC_WIDTH, SRC_HEIGHT) != TS_OK) {
 80015b4:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80015b8:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80015bc:	f003 f87e 	bl	80046bc <BSP_TS_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d004      	beq.n	80015d0 <main+0x68>
          Error_Display("Touchscreen init error");
 80015c6:	48c5      	ldr	r0, [pc, #788]	@ (80018dc <main+0x374>)
 80015c8:	f7ff ffae 	bl	8001528 <Error_Display>
          Error_Handler();
 80015cc:	f000 fdb2 	bl	8002134 <Error_Handler>
      }

      /* draw UI */
      draw_ui_init();
 80015d0:	f7ff ff24 	bl	800141c <draw_ui_init>

      /* Touch bounding box tracking */
      int draw_min_x = SRC_WIDTH, draw_min_y = SRC_HEIGHT, draw_max_x = 0, draw_max_y = 0;
 80015d4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80015d8:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 80015dc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80015e0:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
      int was_touching = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac

      /* Buffers */
      uint8_t mnist_img[28*28];
      int prediction = -1;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  TS_StateTypeDef TS_State;
	          BSP_TS_GetState(&TS_State);
 80015fe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001602:	4618      	mov	r0, r3
 8001604:	f003 f8ba 	bl	800477c <BSP_TS_GetState>

	          if (TS_State.touchDetected > 0) {
 8001608:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 800160c:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 8087 	beq.w	8001726 <main+0x1be>
	              /* User is touching: update bounding box and draw pixels */
	              was_touching = 1;
 8001618:	2301      	movs	r3, #1
 800161a:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
	              for (int i = 0; i < TS_State.touchDetected; i++) {
 800161e:	2300      	movs	r3, #0
 8001620:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
 8001624:	e071      	b.n	800170a <main+0x1a2>
	                  int tx = TS_State.touchX[i];
 8001626:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 800162a:	f5a3 725f 	sub.w	r2, r3, #892	@ 0x37c
 800162e:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4413      	add	r3, r2
 8001636:	885b      	ldrh	r3, [r3, #2]
 8001638:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
	                  int ty = TS_State.touchY[i];
 800163c:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8001640:	f5a3 725f 	sub.w	r2, r3, #892	@ 0x37c
 8001644:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4413      	add	r3, r2
 800164c:	88db      	ldrh	r3, [r3, #6]
 800164e:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0

	                  /* Constrain to drawing box so we don't mark UI */
	                  if (tx < DRAW_X) tx = DRAW_X;
 8001652:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001656:	2b31      	cmp	r3, #49	@ 0x31
 8001658:	dc02      	bgt.n	8001660 <main+0xf8>
 800165a:	2332      	movs	r3, #50	@ 0x32
 800165c:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
	                  if (tx >= DRAW_X + DRAW_W) tx = DRAW_X + DRAW_W - 1;
 8001660:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001664:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8001668:	4293      	cmp	r3, r2
 800166a:	dd03      	ble.n	8001674 <main+0x10c>
 800166c:	f240 23ed 	movw	r3, #749	@ 0x2ed
 8001670:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
	                  if (ty < DRAW_Y) ty = DRAW_Y;
 8001674:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001678:	2b4f      	cmp	r3, #79	@ 0x4f
 800167a:	dc02      	bgt.n	8001682 <main+0x11a>
 800167c:	2350      	movs	r3, #80	@ 0x50
 800167e:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
	                  if (ty >= DRAW_Y + DRAW_H) ty = DRAW_Y + DRAW_H - 1;
 8001682:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001686:	f5b3 7fa5 	cmp.w	r3, #330	@ 0x14a
 800168a:	db03      	blt.n	8001694 <main+0x12c>
 800168c:	f240 1349 	movw	r3, #329	@ 0x149
 8001690:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0

	                  /* update bbox relative to full screen */
	                  if (tx < draw_min_x) draw_min_x = tx;
 8001694:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 8001698:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 800169c:	429a      	cmp	r2, r3
 800169e:	da03      	bge.n	80016a8 <main+0x140>
 80016a0:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80016a4:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
	                  if (ty < draw_min_y) draw_min_y = ty;
 80016a8:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 80016ac:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 80016b0:	429a      	cmp	r2, r3
 80016b2:	da03      	bge.n	80016bc <main+0x154>
 80016b4:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 80016b8:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8
	                  if (tx > draw_max_x) draw_max_x = tx;
 80016bc:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 80016c0:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dd03      	ble.n	80016d0 <main+0x168>
 80016c8:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80016cc:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
	                  if (ty > draw_max_y) draw_max_y = ty;
 80016d0:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 80016d4:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 80016d8:	429a      	cmp	r2, r3
 80016da:	dd03      	ble.n	80016e4 <main+0x17c>
 80016dc:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 80016e0:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0

	                  /* draw thicker point for nicer drawing */
	                  BSP_LCD_FillRect(tx-1, ty-1, 3, 3);
 80016e4:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	3b01      	subs	r3, #1
 80016ec:	b298      	uxth	r0, r3
 80016ee:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3b01      	subs	r3, #1
 80016f6:	b299      	uxth	r1, r3
 80016f8:	2303      	movs	r3, #3
 80016fa:	2203      	movs	r2, #3
 80016fc:	f002 fb9c 	bl	8003e38 <BSP_LCD_FillRect>
	              for (int i = 0; i < TS_State.touchDetected; i++) {
 8001700:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8001704:	3301      	adds	r3, #1
 8001706:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
 800170a:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 800170e:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 800171a:	4293      	cmp	r3, r2
 800171c:	db83      	blt.n	8001626 <main+0xbe>
	              }

	              HAL_Delay(20);
 800171e:	2014      	movs	r0, #20
 8001720:	f003 f9b2 	bl	8004a88 <HAL_Delay>
 8001724:	e76b      	b.n	80015fe <main+0x96>
	              continue;
	          } else {
	              /* No touch now */
	              if (was_touching) {
 8001726:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 81df 	beq.w	8001aee <main+0x586>
	                  /* user just released -> perform capture + inference */

	                  /* small settle delay to avoid transient frames */
	                  HAL_Delay(150);
 8001730:	2096      	movs	r0, #150	@ 0x96
 8001732:	f003 f9a9 	bl	8004a88 <HAL_Delay>

	                  /* Bound bbox and add padding, ensure inside screen */
	                  if (draw_max_x == 0 && draw_max_y == 0) {
 8001736:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 800173a:	2b00      	cmp	r3, #0
 800173c:	d107      	bne.n	800174e <main+0x1e6>
 800173e:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d103      	bne.n	800174e <main+0x1e6>
	                      /* nothing drawn -> show message */
	                      Error_Display("No stroke detected");
 8001746:	4866      	ldr	r0, [pc, #408]	@ (80018e0 <main+0x378>)
 8001748:	f7ff feee 	bl	8001528 <Error_Display>
 800174c:	e1b3      	b.n	8001ab6 <main+0x54e>
	                  } else {
	                      int bx0 = draw_min_x - BBOX_PAD; if (bx0 < 0) bx0 = 0;
 800174e:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 8001752:	3b08      	subs	r3, #8
 8001754:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 8001758:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 800175c:	2b00      	cmp	r3, #0
 800175e:	da02      	bge.n	8001766 <main+0x1fe>
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
	                      int by0 = draw_min_y - BBOX_PAD; if (by0 < 0) by0 = 0;
 8001766:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 800176a:	3b08      	subs	r3, #8
 800176c:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 8001770:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8001774:	2b00      	cmp	r3, #0
 8001776:	da02      	bge.n	800177e <main+0x216>
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
	                      int bx1 = draw_max_x + BBOX_PAD; if (bx1 >= SRC_WIDTH) bx1 = SRC_WIDTH - 1;
 800177e:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8001782:	3308      	adds	r3, #8
 8001784:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8001788:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 800178c:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001790:	db03      	blt.n	800179a <main+0x232>
 8001792:	f240 331f 	movw	r3, #799	@ 0x31f
 8001796:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
	                      int by1 = draw_max_y + BBOX_PAD; if (by1 >= SRC_HEIGHT) by1 = SRC_HEIGHT - 1;
 800179a:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 800179e:	3308      	adds	r3, #8
 80017a0:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
 80017a4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80017a8:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80017ac:	db03      	blt.n	80017b6 <main+0x24e>
 80017ae:	f240 13df 	movw	r3, #479	@ 0x1df
 80017b2:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390

	                      /* capture and resize into mnist_img */
	                      capture_frame_bbox_to_mnist(mnist_img, bx0, by0, bx1, by1);
 80017b6:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80017ba:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80017c4:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 80017c8:	f8d7 139c 	ldr.w	r1, [r7, #924]	@ 0x39c
 80017cc:	f7ff fc8a 	bl	80010e4 <capture_frame_bbox_to_mnist>

	                      /* Zero buffers (safety) */
	                      for (int i = 0; i < AI_NETWORK_IN_1_SIZE; i++) in_data[i] = 0.0f;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 80017d6:	e00c      	b.n	80017f2 <main+0x28a>
 80017d8:	4a42      	ldr	r2, [pc, #264]	@ (80018e4 <main+0x37c>)
 80017da:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 80017ec:	3301      	adds	r3, #1
 80017ee:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 80017f2:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 80017f6:	f5b3 7f44 	cmp.w	r3, #784	@ 0x310
 80017fa:	dbed      	blt.n	80017d8 <main+0x270>
	                      for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) out_data[i] = 0.0f;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 8001802:	e00c      	b.n	800181e <main+0x2b6>
 8001804:	4a38      	ldr	r2, [pc, #224]	@ (80018e8 <main+0x380>)
 8001806:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8001818:	3301      	adds	r3, #1
 800181a:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 800181e:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8001822:	2b09      	cmp	r3, #9
 8001824:	ddee      	ble.n	8001804 <main+0x29c>

	                      prediction = ai_run_with_conf(mnist_img);
 8001826:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fc4e 	bl	80010cc <ai_run_with_conf>
 8001830:	f8c7 0374 	str.w	r0, [r7, #884]	@ 0x374
	                      if (prediction < 0) {
 8001834:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8001838:	2b00      	cmp	r3, #0
 800183a:	f2c0 813c 	blt.w	8001ab6 <main+0x54e>
	                          /* ai run error already displayed by ai_run */
	                      } else {
	                          /* Display predicted digit and confidence */
	                          /* Find top1 confidence */
	                          float top_val = out_data[0];
 800183e:	4b2a      	ldr	r3, [pc, #168]	@ (80018e8 <main+0x380>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
	                          for (int i = 1; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8001846:	2301      	movs	r3, #1
 8001848:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 800184c:	e01a      	b.n	8001884 <main+0x31c>
	                              if (out_data[i] > top_val) top_val = out_data[i];
 800184e:	4a26      	ldr	r2, [pc, #152]	@ (80018e8 <main+0x380>)
 8001850:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	ed97 7ae1 	vldr	s14, [r7, #900]	@ 0x384
 8001860:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001868:	d507      	bpl.n	800187a <main+0x312>
 800186a:	4a1f      	ldr	r2, [pc, #124]	@ (80018e8 <main+0x380>)
 800186c:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
	                          for (int i = 1; i < AI_NETWORK_OUT_1_SIZE; i++) {
 800187a:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 800187e:	3301      	adds	r3, #1
 8001880:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 8001884:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8001888:	2b09      	cmp	r3, #9
 800188a:	dde0      	ble.n	800184e <main+0x2e6>
	                          }

	                          /* Clear result area */
	                          BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	f002 f8b8 	bl	8003a04 <BSP_LCD_SetBackColor>
	                          BSP_LCD_FillRect(RESULT_X+1, RESULT_Y+1, RESULT_W-2, RESULT_H-2);
 8001894:	236c      	movs	r3, #108	@ 0x6c
 8001896:	f44f 72c7 	mov.w	r2, #398	@ 0x18e
 800189a:	f240 115f 	movw	r1, #351	@ 0x15f
 800189e:	20c9      	movs	r0, #201	@ 0xc9
 80018a0:	f002 faca 	bl	8003e38 <BSP_LCD_FillRect>

	                          /* Choose color by confidence */
	                          if (top_val > 0.8f) BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80018a4:	edd7 7ae1 	vldr	s15, [r7, #900]	@ 0x384
 80018a8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80018ec <main+0x384>
 80018ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b4:	dd04      	ble.n	80018c0 <main+0x358>
 80018b6:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80018ba:	f002 f88b 	bl	80039d4 <BSP_LCD_SetTextColor>
 80018be:	e01c      	b.n	80018fa <main+0x392>
	                          else if (top_val > 0.5f) BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 80018c0:	edd7 7ae1 	vldr	s15, [r7, #900]	@ 0x384
 80018c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80018c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	dd10      	ble.n	80018f4 <main+0x38c>
 80018d2:	4807      	ldr	r0, [pc, #28]	@ (80018f0 <main+0x388>)
 80018d4:	f002 f87e 	bl	80039d4 <BSP_LCD_SetTextColor>
 80018d8:	e00f      	b.n	80018fa <main+0x392>
 80018da:	bf00      	nop
 80018dc:	0800fd44 	.word	0x0800fd44
 80018e0:	0800fd5c 	.word	0x0800fd5c
 80018e4:	20007128 	.word	0x20007128
 80018e8:	20007d68 	.word	0x20007d68
 80018ec:	3f4ccccd 	.word	0x3f4ccccd
 80018f0:	ffffa500 	.word	0xffffa500
	                          else BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80018f4:	4880      	ldr	r0, [pc, #512]	@ (8001af8 <main+0x590>)
 80018f6:	f002 f86d 	bl	80039d4 <BSP_LCD_SetTextColor>

	                          char resbuf[64];
	                          sprintf(resbuf, "Predicted: %d (%.1f%%)", prediction, top_val * 100.0f);
 80018fa:	edd7 7ae1 	vldr	s15, [r7, #900]	@ 0x384
 80018fe:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8001afc <main+0x594>
 8001902:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001906:	ee17 0a90 	vmov	r0, s15
 800190a:	f7fe fe35 	bl	8000578 <__aeabi_f2d>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4638      	mov	r0, r7
 8001914:	e9cd 2300 	strd	r2, r3, [sp]
 8001918:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 800191c:	4978      	ldr	r1, [pc, #480]	@ (8001b00 <main+0x598>)
 800191e:	f00b ff6d 	bl	800d7fc <siprintf>
	                          BSP_LCD_DisplayStringAt(0, RESULT_Y + 12, (uint8_t*)resbuf, CENTER_MODE);
 8001922:	463a      	mov	r2, r7
 8001924:	2301      	movs	r3, #1
 8001926:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 800192a:	2000      	movs	r0, #0
 800192c:	f002 f90a 	bl	8003b44 <BSP_LCD_DisplayStringAt>

	                          /* Draw a mini histogram of the 10 probs */
	                          int bar_x = RESULT_X + 8;
 8001930:	23d0      	movs	r3, #208	@ 0xd0
 8001932:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
	                          int bar_y = RESULT_Y + 40;
 8001936:	f44f 73c3 	mov.w	r3, #390	@ 0x186
 800193a:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
	                          int bar_w = (RESULT_W - 16) / 10;
 800193e:	2326      	movs	r3, #38	@ 0x26
 8001940:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
	                          int bar_max_h = RESULT_H - 60;
 8001944:	2332      	movs	r3, #50	@ 0x32
 8001946:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
	                          BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800194a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800194e:	f002 f841 	bl	80039d4 <BSP_LCD_SetTextColor>
	                          for (int i = 0; i < 10; i++) {
 8001952:	2300      	movs	r3, #0
 8001954:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 8001958:	e0a8      	b.n	8001aac <main+0x544>
	                              float v = out_data[i];
 800195a:	4a6a      	ldr	r2, [pc, #424]	@ (8001b04 <main+0x59c>)
 800195c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
	                              if (v < 0.0f) v = 0.0f;
 800196a:	edd7 7ade 	vldr	s15, [r7, #888]	@ 0x378
 800196e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001976:	d503      	bpl.n	8001980 <main+0x418>
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
	                              if (v > 1.0f) v = 1.0f;
 8001980:	edd7 7ade 	vldr	s15, [r7, #888]	@ 0x378
 8001984:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001990:	dd03      	ble.n	800199a <main+0x432>
 8001992:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001996:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
	                              int h = (int)(v * bar_max_h + 0.5f);
 800199a:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a6:	edd7 7ade 	vldr	s15, [r7, #888]	@ 0x378
 80019aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80019b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ba:	ee17 3a90 	vmov	r3, s15
 80019be:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
	                              /* Draw background bar */
	                              BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80019c2:	f04f 30ff 	mov.w	r0, #4294967295
 80019c6:	f002 f81d 	bl	8003a04 <BSP_LCD_SetBackColor>
	                              BSP_LCD_FillRect(bar_x + i*bar_w, bar_y, bar_w - 2, bar_max_h);
 80019ca:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	fb12 f303 	smulbb	r3, r2, r3
 80019da:	b29a      	uxth	r2, r3
 80019dc:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	b298      	uxth	r0, r3
 80019e6:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80019ea:	b299      	uxth	r1, r3
 80019ec:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3b02      	subs	r3, #2
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	f002 fa1c 	bl	8003e38 <BSP_LCD_FillRect>
	                              /* Draw filled bar */
	                              BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8001a00:	4841      	ldr	r0, [pc, #260]	@ (8001b08 <main+0x5a0>)
 8001a02:	f001 ffff 	bl	8003a04 <BSP_LCD_SetBackColor>
	                              BSP_LCD_FillRect(bar_x + i*bar_w, bar_y + (bar_max_h - h), bar_w - 2, h);
 8001a06:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	fb12 f303 	smulbb	r3, r2, r3
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	b298      	uxth	r0, r3
 8001a22:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	b299      	uxth	r1, r3
 8001a3c:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3b02      	subs	r3, #2
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	f002 f9f4 	bl	8003e38 <BSP_LCD_FillRect>
	                              /* Label below */
	                              char t[3]; sprintf(t, "%d", i);
 8001a50:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a54:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8001a58:	492c      	ldr	r1, [pc, #176]	@ (8001b0c <main+0x5a4>)
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f00b fece 	bl	800d7fc <siprintf>
	                              BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001a60:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001a64:	f001 ffb6 	bl	80039d4 <BSP_LCD_SetTextColor>
	                              BSP_LCD_DisplayStringAt(bar_x + i*bar_w, bar_y + bar_max_h + 2, (uint8_t*)t, LEFT_MODE);
 8001a68:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	fb12 f303 	smulbb	r3, r2, r3
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	b298      	uxth	r0, r3
 8001a84:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4413      	add	r3, r2
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	3302      	adds	r3, #2
 8001a96:	b299      	uxth	r1, r3
 8001a98:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	f002 f851 	bl	8003b44 <BSP_LCD_DisplayStringAt>
	                          for (int i = 0; i < 10; i++) {
 8001aa2:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 8001aac:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8001ab0:	2b09      	cmp	r3, #9
 8001ab2:	f77f af52 	ble.w	800195a <main+0x3f2>
	                          }
	                      }
	                  }

	                  /* Clear drawing area so next digit starts fresh */
	                  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8001aba:	f001 ffa3 	bl	8003a04 <BSP_LCD_SetBackColor>
	                  BSP_LCD_FillRect(DRAW_X + 1, DRAW_Y + 1, DRAW_W - 2, DRAW_H - 2);
 8001abe:	23f8      	movs	r3, #248	@ 0xf8
 8001ac0:	f240 22ba 	movw	r2, #698	@ 0x2ba
 8001ac4:	2151      	movs	r1, #81	@ 0x51
 8001ac6:	2033      	movs	r0, #51	@ 0x33
 8001ac8:	f002 f9b6 	bl	8003e38 <BSP_LCD_FillRect>

	                  /* Reset bbox and state */
	                  draw_min_x = SRC_WIDTH; draw_min_y = SRC_HEIGHT;
 8001acc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001ad0:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8001ad4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001ad8:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8
	                  draw_max_x = 0; draw_max_y = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
	                  was_touching = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
	              }
	          }

	          HAL_Delay(20);
 8001aee:	2014      	movs	r0, #20
 8001af0:	f002 ffca 	bl	8004a88 <HAL_Delay>
  {
 8001af4:	e583      	b.n	80015fe <main+0x96>
 8001af6:	bf00      	nop
 8001af8:	ffff0000 	.word	0xffff0000
 8001afc:	42c80000 	.word	0x42c80000
 8001b00:	0800fd70 	.word	0x0800fd70
 8001b04:	20007d68 	.word	0x20007d68
 8001b08:	ff0000ff 	.word	0xff0000ff
 8001b0c:	0800fd88 	.word	0x0800fd88

08001b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b094      	sub	sp, #80	@ 0x50
 8001b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	2234      	movs	r2, #52	@ 0x34
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f00b ff66 	bl	800d9f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b24:	f107 0308 	add.w	r3, r7, #8
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	4b2c      	ldr	r3, [pc, #176]	@ (8001bec <SystemClock_Config+0xdc>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3c:	4a2b      	ldr	r2, [pc, #172]	@ (8001bec <SystemClock_Config+0xdc>)
 8001b3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b42:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b44:	4b29      	ldr	r3, [pc, #164]	@ (8001bec <SystemClock_Config+0xdc>)
 8001b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b50:	2300      	movs	r3, #0
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	4b26      	ldr	r3, [pc, #152]	@ (8001bf0 <SystemClock_Config+0xe0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a25      	ldr	r2, [pc, #148]	@ (8001bf0 <SystemClock_Config+0xe0>)
 8001b5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b23      	ldr	r3, [pc, #140]	@ (8001bf0 <SystemClock_Config+0xe0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b74:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b76:	2302      	movs	r3, #2
 8001b78:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b7a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b80:	2304      	movs	r3, #4
 8001b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001b84:	23b4      	movs	r3, #180	@ 0xb4
 8001b86:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001b8c:	2306      	movs	r3, #6
 8001b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 8001b90:	2306      	movs	r3, #6
 8001b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f007 f821 	bl	8008be0 <HAL_RCC_OscConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ba4:	f000 fac6 	bl	8002134 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ba8:	f006 fb80 	bl	80082ac <HAL_PWREx_EnableOverDrive>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001bb2:	f000 fabf 	bl	8002134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb6:	230f      	movs	r3, #15
 8001bb8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bc2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001bc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bcc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	2105      	movs	r1, #5
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f006 fbb9 	bl	800834c <HAL_RCC_ClockConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001be0:	f000 faa8 	bl	8002134 <Error_Handler>
  }
}
 8001be4:	bf00      	nop
 8001be6:	3750      	adds	r7, #80	@ 0x50
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40007000 	.word	0x40007000

08001bf4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <MX_CRC_Init+0x20>)
 8001bfa:	4a07      	ldr	r2, [pc, #28]	@ (8001c18 <MX_CRC_Init+0x24>)
 8001bfc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	@ (8001c14 <MX_CRC_Init+0x20>)
 8001c00:	f003 f877 	bl	8004cf2 <HAL_CRC_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001c0a:	f000 fa93 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20007d90 	.word	0x20007d90
 8001c18:	40023000 	.word	0x40023000

08001c1c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001c20:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <MX_DMA2D_Init+0x5c>)
 8001c22:	4a16      	ldr	r2, [pc, #88]	@ (8001c7c <MX_DMA2D_Init+0x60>)
 8001c24:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001c26:	4b14      	ldr	r3, [pc, #80]	@ (8001c78 <MX_DMA2D_Init+0x5c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001c2c:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <MX_DMA2D_Init+0x5c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001c32:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <MX_DMA2D_Init+0x5c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	@ (8001c78 <MX_DMA2D_Init+0x5c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c78 <MX_DMA2D_Init+0x5c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001c44:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <MX_DMA2D_Init+0x5c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <MX_DMA2D_Init+0x5c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001c50:	4809      	ldr	r0, [pc, #36]	@ (8001c78 <MX_DMA2D_Init+0x5c>)
 8001c52:	f003 fa29 	bl	80050a8 <HAL_DMA2D_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001c5c:	f000 fa6a 	bl	8002134 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001c60:	2101      	movs	r1, #1
 8001c62:	4805      	ldr	r0, [pc, #20]	@ (8001c78 <MX_DMA2D_Init+0x5c>)
 8001c64:	f003 fb7e 	bl	8005364 <HAL_DMA2D_ConfigLayer>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001c6e:	f000 fa61 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20007d98 	.word	0x20007d98
 8001c7c:	4002b000 	.word	0x4002b000

08001c80 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b0ae      	sub	sp, #184	@ 0xb8
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8001c86:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8001c92:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001c96:	2224      	movs	r2, #36	@ 0x24
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f00b fea8 	bl	800d9f0 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8001ca0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
 8001cb0:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	226c      	movs	r2, #108	@ 0x6c
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f00b fe99 	bl	800d9f0 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8001cbe:	4b65      	ldr	r3, [pc, #404]	@ (8001e54 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001cc0:	4a65      	ldr	r2, [pc, #404]	@ (8001e58 <MX_DSIHOST_DSI_Init+0x1d8>)
 8001cc2:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8001cc4:	4b63      	ldr	r3, [pc, #396]	@ (8001e54 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8001cca:	4b62      	ldr	r3, [pc, #392]	@ (8001e54 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001ccc:	2204      	movs	r2, #4
 8001cce:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001cd0:	4b60      	ldr	r3, [pc, #384]	@ (8001e54 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8001cd6:	237d      	movs	r3, #125	@ 0x7d
 8001cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8001ce8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001cec:	4619      	mov	r1, r3
 8001cee:	4859      	ldr	r0, [pc, #356]	@ (8001e54 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001cf0:	f003 fcae 	bl	8005650 <HAL_DSI_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_DSIHOST_DSI_Init+0x7e>
  {
    Error_Handler();
 8001cfa:	f000 fa1b 	bl	8002134 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  HostTimeouts.BTATimeout = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8001d34:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4846      	ldr	r0, [pc, #280]	@ (8001e54 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001d3c:	f004 f9fb 	bl	8006136 <HAL_DSI_ConfigHostTimeouts>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_DSIHOST_DSI_Init+0xca>
  {
    Error_Handler();
 8001d46:	f000 f9f5 	bl	8002134 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8001d4a:	231c      	movs	r3, #28
 8001d4c:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.ClockLaneLP2HSTime = 33;
 8001d4e:	2321      	movs	r3, #33	@ 0x21
 8001d50:	677b      	str	r3, [r7, #116]	@ 0x74
  PhyTimings.DataLaneHS2LPTime = 15;
 8001d52:	230f      	movs	r3, #15
 8001d54:	67bb      	str	r3, [r7, #120]	@ 0x78
  PhyTimings.DataLaneLP2HSTime = 25;
 8001d56:	2319      	movs	r3, #25
 8001d58:	67fb      	str	r3, [r7, #124]	@ 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PhyTimings.StopWaitTime = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8001d66:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4839      	ldr	r0, [pc, #228]	@ (8001e54 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001d6e:	f004 f978 	bl	8006062 <HAL_DSI_ConfigPhyTimer>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_DSIHOST_DSI_Init+0xfc>
  {
    Error_Handler();
 8001d78:	f000 f9dc 	bl	8002134 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8001d7c:	2104      	movs	r1, #4
 8001d7e:	4835      	ldr	r0, [pc, #212]	@ (8001e54 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001d80:	f004 f947 	bl	8006012 <HAL_DSI_ConfigFlowControl>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_DSIHOST_DSI_Init+0x10e>
  {
    Error_Handler();
 8001d8a:	f000 f9d3 	bl	8002134 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8001d8e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001d92:	4830      	ldr	r0, [pc, #192]	@ (8001e54 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001d94:	f004 fc8b 	bl	80066ae <HAL_DSI_SetLowPowerRXFilter>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_DSIHOST_DSI_Init+0x122>
  {
    Error_Handler();
 8001d9e:	f000 f9c9 	bl	8002134 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8001da2:	2100      	movs	r1, #0
 8001da4:	482b      	ldr	r0, [pc, #172]	@ (8001e54 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001da6:	f003 fe47 	bl	8005a38 <HAL_DSI_ConfigErrorMonitor>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_DSIHOST_DSI_Init+0x134>
  {
    Error_Handler();
 8001db0:	f000 f9c0 	bl	8002134 <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB888;
 8001db8:	2305      	movs	r3, #5
 8001dba:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_PULSES;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 1;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 800;
 8001dc8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001dcc:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
  VidCfg.HorizontalSyncActive = 14;
 8001dde:	230e      	movs	r3, #14
 8001de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  VidCfg.HorizontalBackPorch = 12;
 8001de2:	230c      	movs	r3, #12
 8001de4:	633b      	str	r3, [r7, #48]	@ 0x30
  VidCfg.HorizontalLine = 1425;
 8001de6:	f240 5391 	movw	r3, #1425	@ 0x591
 8001dea:	637b      	str	r3, [r7, #52]	@ 0x34
  VidCfg.VerticalSyncActive = 4;
 8001dec:	2304      	movs	r3, #4
 8001dee:	63bb      	str	r3, [r7, #56]	@ 0x38
  VidCfg.VerticalBackPorch = 2;
 8001df0:	2302      	movs	r3, #2
 8001df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  VidCfg.VerticalFrontPorch = 2;
 8001df4:	2302      	movs	r3, #2
 8001df6:	643b      	str	r3, [r7, #64]	@ 0x40
  VidCfg.VerticalActive = 480;
 8001df8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001dfc:	647b      	str	r3, [r7, #68]	@ 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	64bb      	str	r3, [r7, #72]	@ 0x48
  VidCfg.LPLargestPacketSize = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  VidCfg.LPVACTLargestPacketSize = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	653b      	str	r3, [r7, #80]	@ 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	657b      	str	r3, [r7, #84]	@ 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	65bb      	str	r3, [r7, #88]	@ 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	663b      	str	r3, [r7, #96]	@ 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	667b      	str	r3, [r7, #100]	@ 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	66bb      	str	r3, [r7, #104]	@ 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	4619      	mov	r1, r3
 8001e2a:	480a      	ldr	r0, [pc, #40]	@ (8001e54 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001e2c:	f003 fee9 	bl	8005c02 <HAL_DSI_ConfigVideoMode>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_DSIHOST_DSI_Init+0x1ba>
  {
    Error_Handler();
 8001e36:	f000 f97d 	bl	8002134 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4805      	ldr	r0, [pc, #20]	@ (8001e54 <MX_DSIHOST_DSI_Init+0x1d4>)
 8001e3e:	f003 feb8 	bl	8005bb2 <HAL_DSI_SetGenericVCID>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_DSIHOST_DSI_Init+0x1cc>
  {
    Error_Handler();
 8001e48:	f000 f974 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8001e4c:	bf00      	nop
 8001e4e:	37b8      	adds	r7, #184	@ 0xb8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20007dd8 	.word	0x20007dd8
 8001e58:	40016c00 	.word	0x40016c00

08001e5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e60:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <MX_I2C1_Init+0x50>)
 8001e62:	4a13      	ldr	r2, [pc, #76]	@ (8001eb0 <MX_I2C1_Init+0x54>)
 8001e64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e66:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <MX_I2C1_Init+0x50>)
 8001e68:	4a12      	ldr	r2, [pc, #72]	@ (8001eb4 <MX_I2C1_Init+0x58>)
 8001e6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <MX_I2C1_Init+0x50>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <MX_I2C1_Init+0x50>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e78:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <MX_I2C1_Init+0x50>)
 8001e7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <MX_I2C1_Init+0x50>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e86:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <MX_I2C1_Init+0x50>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e8c:	4b07      	ldr	r3, [pc, #28]	@ (8001eac <MX_I2C1_Init+0x50>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e92:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <MX_I2C1_Init+0x50>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e98:	4804      	ldr	r0, [pc, #16]	@ (8001eac <MX_I2C1_Init+0x50>)
 8001e9a:	f004 ff07 	bl	8006cac <HAL_I2C_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ea4:	f000 f946 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20007df4 	.word	0x20007df4
 8001eb0:	40005400 	.word	0x40005400
 8001eb4:	000186a0 	.word	0x000186a0

08001eb8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08e      	sub	sp, #56	@ 0x38
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	2234      	movs	r2, #52	@ 0x34
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f00b fd93 	bl	800d9f0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001eca:	4b39      	ldr	r3, [pc, #228]	@ (8001fb0 <MX_LTDC_Init+0xf8>)
 8001ecc:	4a39      	ldr	r2, [pc, #228]	@ (8001fb4 <MX_LTDC_Init+0xfc>)
 8001ece:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001ed0:	4b37      	ldr	r3, [pc, #220]	@ (8001fb0 <MX_LTDC_Init+0xf8>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001ed6:	4b36      	ldr	r3, [pc, #216]	@ (8001fb0 <MX_LTDC_Init+0xf8>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001edc:	4b34      	ldr	r3, [pc, #208]	@ (8001fb0 <MX_LTDC_Init+0xf8>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001ee2:	4b33      	ldr	r3, [pc, #204]	@ (8001fb0 <MX_LTDC_Init+0xf8>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001ee8:	4b31      	ldr	r3, [pc, #196]	@ (8001fb0 <MX_LTDC_Init+0xf8>)
 8001eea:	2207      	movs	r2, #7
 8001eec:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001eee:	4b30      	ldr	r3, [pc, #192]	@ (8001fb0 <MX_LTDC_Init+0xf8>)
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb0 <MX_LTDC_Init+0xf8>)
 8001ef6:	220e      	movs	r2, #14
 8001ef8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001efa:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb0 <MX_LTDC_Init+0xf8>)
 8001efc:	2205      	movs	r2, #5
 8001efe:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 814;
 8001f00:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb0 <MX_LTDC_Init+0xf8>)
 8001f02:	f240 322e 	movw	r2, #814	@ 0x32e
 8001f06:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001f08:	4b29      	ldr	r3, [pc, #164]	@ (8001fb0 <MX_LTDC_Init+0xf8>)
 8001f0a:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001f0e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 820;
 8001f10:	4b27      	ldr	r3, [pc, #156]	@ (8001fb0 <MX_LTDC_Init+0xf8>)
 8001f12:	f44f 724d 	mov.w	r2, #820	@ 0x334
 8001f16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001f18:	4b25      	ldr	r3, [pc, #148]	@ (8001fb0 <MX_LTDC_Init+0xf8>)
 8001f1a:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001f1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001f20:	4b23      	ldr	r3, [pc, #140]	@ (8001fb0 <MX_LTDC_Init+0xf8>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001f28:	4b21      	ldr	r3, [pc, #132]	@ (8001fb0 <MX_LTDC_Init+0xf8>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001f30:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb0 <MX_LTDC_Init+0xf8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001f38:	481d      	ldr	r0, [pc, #116]	@ (8001fb0 <MX_LTDC_Init+0xf8>)
 8001f3a:	f005 ff19 	bl	8007d70 <HAL_LTDC_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001f44:	f000 f8f6 	bl	8002134 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8001f4c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001f50:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001f56:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001f5a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001f68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f6c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001f6e:	2305      	movs	r3, #5
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001f72:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001f76:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	2200      	movs	r2, #0
 8001f96:	4619      	mov	r1, r3
 8001f98:	4805      	ldr	r0, [pc, #20]	@ (8001fb0 <MX_LTDC_Init+0xf8>)
 8001f9a:	f005 ff86 	bl	8007eaa <HAL_LTDC_ConfigLayer>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001fa4:	f000 f8c6 	bl	8002134 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001fa8:	bf00      	nop
 8001faa:	3738      	adds	r7, #56	@ 0x38
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20007e48 	.word	0x20007e48
 8001fb4:	40016800 	.word	0x40016800

08001fb8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
 8001fcc:	615a      	str	r2, [r3, #20]
 8001fce:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001fd0:	4b1f      	ldr	r3, [pc, #124]	@ (8002050 <MX_FMC_Init+0x98>)
 8001fd2:	4a20      	ldr	r2, [pc, #128]	@ (8002054 <MX_FMC_Init+0x9c>)
 8001fd4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002050 <MX_FMC_Init+0x98>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8002050 <MX_FMC_Init+0x98>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8002050 <MX_FMC_Init+0x98>)
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001fe8:	4b19      	ldr	r3, [pc, #100]	@ (8002050 <MX_FMC_Init+0x98>)
 8001fea:	2220      	movs	r2, #32
 8001fec:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001fee:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <MX_FMC_Init+0x98>)
 8001ff0:	2240      	movs	r2, #64	@ 0x40
 8001ff2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001ff4:	4b16      	ldr	r3, [pc, #88]	@ (8002050 <MX_FMC_Init+0x98>)
 8001ff6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001ffa:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001ffc:	4b14      	ldr	r3, [pc, #80]	@ (8002050 <MX_FMC_Init+0x98>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8002002:	4b13      	ldr	r3, [pc, #76]	@ (8002050 <MX_FMC_Init+0x98>)
 8002004:	2200      	movs	r2, #0
 8002006:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8002008:	4b11      	ldr	r3, [pc, #68]	@ (8002050 <MX_FMC_Init+0x98>)
 800200a:	2200      	movs	r2, #0
 800200c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 800200e:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <MX_FMC_Init+0x98>)
 8002010:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002014:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002016:	2302      	movs	r3, #2
 8002018:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800201a:	2307      	movs	r3, #7
 800201c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800201e:	2304      	movs	r3, #4
 8002020:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002022:	2307      	movs	r3, #7
 8002024:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002026:	2303      	movs	r3, #3
 8002028:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800202a:	2302      	movs	r3, #2
 800202c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800202e:	2302      	movs	r3, #2
 8002030:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	4619      	mov	r1, r3
 8002036:	4806      	ldr	r0, [pc, #24]	@ (8002050 <MX_FMC_Init+0x98>)
 8002038:	f007 f856 	bl	80090e8 <HAL_SDRAM_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 8002042:	f000 f877 	bl	8002134 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002046:	bf00      	nop
 8002048:	3720      	adds	r7, #32
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20007ef0 	.word	0x20007ef0
 8002054:	a0000140 	.word	0xa0000140

08002058 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	@ 0x24
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
 8002062:	4b33      	ldr	r3, [pc, #204]	@ (8002130 <MX_GPIO_Init+0xd8>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002066:	4a32      	ldr	r2, [pc, #200]	@ (8002130 <MX_GPIO_Init+0xd8>)
 8002068:	f043 0310 	orr.w	r3, r3, #16
 800206c:	6313      	str	r3, [r2, #48]	@ 0x30
 800206e:	4b30      	ldr	r3, [pc, #192]	@ (8002130 <MX_GPIO_Init+0xd8>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	4b2c      	ldr	r3, [pc, #176]	@ (8002130 <MX_GPIO_Init+0xd8>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	4a2b      	ldr	r2, [pc, #172]	@ (8002130 <MX_GPIO_Init+0xd8>)
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	6313      	str	r3, [r2, #48]	@ 0x30
 800208a:	4b29      	ldr	r3, [pc, #164]	@ (8002130 <MX_GPIO_Init+0xd8>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	61bb      	str	r3, [r7, #24]
 8002094:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	4b25      	ldr	r3, [pc, #148]	@ (8002130 <MX_GPIO_Init+0xd8>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	4a24      	ldr	r2, [pc, #144]	@ (8002130 <MX_GPIO_Init+0xd8>)
 80020a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a6:	4b22      	ldr	r3, [pc, #136]	@ (8002130 <MX_GPIO_Init+0xd8>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002130 <MX_GPIO_Init+0xd8>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002130 <MX_GPIO_Init+0xd8>)
 80020bc:	f043 0308 	orr.w	r3, r3, #8
 80020c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002130 <MX_GPIO_Init+0xd8>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b17      	ldr	r3, [pc, #92]	@ (8002130 <MX_GPIO_Init+0xd8>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	4a16      	ldr	r2, [pc, #88]	@ (8002130 <MX_GPIO_Init+0xd8>)
 80020d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020de:	4b14      	ldr	r3, [pc, #80]	@ (8002130 <MX_GPIO_Init+0xd8>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	4b10      	ldr	r3, [pc, #64]	@ (8002130 <MX_GPIO_Init+0xd8>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002130 <MX_GPIO_Init+0xd8>)
 80020f4:	f043 0320 	orr.w	r3, r3, #32
 80020f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002130 <MX_GPIO_Init+0xd8>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	f003 0320 	and.w	r3, r3, #32
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
 800210a:	4b09      	ldr	r3, [pc, #36]	@ (8002130 <MX_GPIO_Init+0xd8>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	4a08      	ldr	r2, [pc, #32]	@ (8002130 <MX_GPIO_Init+0xd8>)
 8002110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002114:	6313      	str	r3, [r2, #48]	@ 0x30
 8002116:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <MX_GPIO_Init+0xd8>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002122:	bf00      	nop
 8002124:	3724      	adds	r7, #36	@ 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800

08002134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002138:	b672      	cpsid	i
}
 800213a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800213c:	4806      	ldr	r0, [pc, #24]	@ (8002158 <Error_Handler+0x24>)
 800213e:	f001 fc61 	bl	8003a04 <BSP_LCD_SetBackColor>
      BSP_LCD_Clear(LCD_COLOR_RED);
 8002142:	4805      	ldr	r0, [pc, #20]	@ (8002158 <Error_Handler+0x24>)
 8002144:	f001 fc92 	bl	8003a6c <BSP_LCD_Clear>
      BSP_LCD_DisplayStringAt(0, 120, (uint8_t *)"ERROR", CENTER_MODE);
 8002148:	2301      	movs	r3, #1
 800214a:	4a04      	ldr	r2, [pc, #16]	@ (800215c <Error_Handler+0x28>)
 800214c:	2178      	movs	r1, #120	@ 0x78
 800214e:	2000      	movs	r0, #0
 8002150:	f001 fcf8 	bl	8003b44 <BSP_LCD_DisplayStringAt>
  while (1)
 8002154:	bf00      	nop
 8002156:	e7fd      	b.n	8002154 <Error_Handler+0x20>
 8002158:	ffff0000 	.word	0xffff0000
 800215c:	0800fd8c 	.word	0x0800fd8c

08002160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
 800216a:	4b10      	ldr	r3, [pc, #64]	@ (80021ac <HAL_MspInit+0x4c>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216e:	4a0f      	ldr	r2, [pc, #60]	@ (80021ac <HAL_MspInit+0x4c>)
 8002170:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002174:	6453      	str	r3, [r2, #68]	@ 0x44
 8002176:	4b0d      	ldr	r3, [pc, #52]	@ (80021ac <HAL_MspInit+0x4c>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	603b      	str	r3, [r7, #0]
 8002186:	4b09      	ldr	r3, [pc, #36]	@ (80021ac <HAL_MspInit+0x4c>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	4a08      	ldr	r2, [pc, #32]	@ (80021ac <HAL_MspInit+0x4c>)
 800218c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002190:	6413      	str	r3, [r2, #64]	@ 0x40
 8002192:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <HAL_MspInit+0x4c>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800

080021b0 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0b      	ldr	r2, [pc, #44]	@ (80021ec <HAL_CRC_MspInit+0x3c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d10d      	bne.n	80021de <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <HAL_CRC_MspInit+0x40>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	4a09      	ldr	r2, [pc, #36]	@ (80021f0 <HAL_CRC_MspInit+0x40>)
 80021cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d2:	4b07      	ldr	r3, [pc, #28]	@ (80021f0 <HAL_CRC_MspInit+0x40>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80021de:	bf00      	nop
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40023000 	.word	0x40023000
 80021f0:	40023800 	.word	0x40023800

080021f4 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0b      	ldr	r2, [pc, #44]	@ (8002230 <HAL_DMA2D_MspInit+0x3c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d10d      	bne.n	8002222 <HAL_DMA2D_MspInit+0x2e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <HAL_DMA2D_MspInit+0x40>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	4a09      	ldr	r2, [pc, #36]	@ (8002234 <HAL_DMA2D_MspInit+0x40>)
 8002210:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002214:	6313      	str	r3, [r2, #48]	@ 0x30
 8002216:	4b07      	ldr	r3, [pc, #28]	@ (8002234 <HAL_DMA2D_MspInit+0x40>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	4002b000 	.word	0x4002b000
 8002234:	40023800 	.word	0x40023800

08002238 <HAL_DSI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdsi: DSI handle pointer
  * @retval None
  */
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0b      	ldr	r2, [pc, #44]	@ (8002274 <HAL_DSI_MspInit+0x3c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d10d      	bne.n	8002266 <HAL_DSI_MspInit+0x2e>
  {
    /* USER CODE BEGIN DSI_MspInit 0 */

    /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <HAL_DSI_MspInit+0x40>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002252:	4a09      	ldr	r2, [pc, #36]	@ (8002278 <HAL_DSI_MspInit+0x40>)
 8002254:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002258:	6453      	str	r3, [r2, #68]	@ 0x44
 800225a:	4b07      	ldr	r3, [pc, #28]	@ (8002278 <HAL_DSI_MspInit+0x40>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END DSI_MspInit 1 */

  }

}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40016c00 	.word	0x40016c00
 8002278:	40023800 	.word	0x40023800

0800227c <HAL_DSI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hdsi: DSI handle pointer
  * @retval None
  */
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a07      	ldr	r2, [pc, #28]	@ (80022a8 <HAL_DSI_MspDeInit+0x2c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d105      	bne.n	800229a <HAL_DSI_MspDeInit+0x1e>
  {
    /* USER CODE BEGIN DSI_MspDeInit 0 */

    /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 800228e:	4b07      	ldr	r3, [pc, #28]	@ (80022ac <HAL_DSI_MspDeInit+0x30>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002292:	4a06      	ldr	r2, [pc, #24]	@ (80022ac <HAL_DSI_MspDeInit+0x30>)
 8002294:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8002298:	6453      	str	r3, [r2, #68]	@ 0x44
    /* USER CODE BEGIN DSI_MspDeInit 1 */

    /* USER CODE END DSI_MspDeInit 1 */
  }

}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40016c00 	.word	0x40016c00
 80022ac:	40023800 	.word	0x40023800

080022b0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	@ 0x28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a19      	ldr	r2, [pc, #100]	@ (8002334 <HAL_I2C_MspInit+0x84>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d12c      	bne.n	800232c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	4b18      	ldr	r3, [pc, #96]	@ (8002338 <HAL_I2C_MspInit+0x88>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	4a17      	ldr	r2, [pc, #92]	@ (8002338 <HAL_I2C_MspInit+0x88>)
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e2:	4b15      	ldr	r3, [pc, #84]	@ (8002338 <HAL_I2C_MspInit+0x88>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f4:	2312      	movs	r3, #18
 80022f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fc:	2303      	movs	r3, #3
 80022fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002300:	2304      	movs	r3, #4
 8002302:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002304:	f107 0314 	add.w	r3, r7, #20
 8002308:	4619      	mov	r1, r3
 800230a:	480c      	ldr	r0, [pc, #48]	@ (800233c <HAL_I2C_MspInit+0x8c>)
 800230c:	f004 f9fc 	bl	8006708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	4b08      	ldr	r3, [pc, #32]	@ (8002338 <HAL_I2C_MspInit+0x88>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	4a07      	ldr	r2, [pc, #28]	@ (8002338 <HAL_I2C_MspInit+0x88>)
 800231a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800231e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002320:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <HAL_I2C_MspInit+0x88>)
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800232c:	bf00      	nop
 800232e:	3728      	adds	r7, #40	@ 0x28
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40005400 	.word	0x40005400
 8002338:	40023800 	.word	0x40023800
 800233c:	40020400 	.word	0x40020400

08002340 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0b      	ldr	r2, [pc, #44]	@ (800237c <HAL_I2C_MspDeInit+0x3c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d10f      	bne.n	8002372 <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002352:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <HAL_I2C_MspDeInit+0x40>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	4a0a      	ldr	r2, [pc, #40]	@ (8002380 <HAL_I2C_MspDeInit+0x40>)
 8002358:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800235c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800235e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002362:	4808      	ldr	r0, [pc, #32]	@ (8002384 <HAL_I2C_MspDeInit+0x44>)
 8002364:	f004 fb7c 	bl	8006a60 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002368:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800236c:	4805      	ldr	r0, [pc, #20]	@ (8002384 <HAL_I2C_MspDeInit+0x44>)
 800236e:	f004 fb77 	bl	8006a60 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40005400 	.word	0x40005400
 8002380:	40023800 	.word	0x40023800
 8002384:	40020400 	.word	0x40020400

08002388 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b092      	sub	sp, #72	@ 0x48
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002390:	f107 030c 	add.w	r3, r7, #12
 8002394:	223c      	movs	r2, #60	@ 0x3c
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f00b fb29 	bl	800d9f0 <memset>
  if(hltdc->Instance==LTDC)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a14      	ldr	r2, [pc, #80]	@ (80023f4 <HAL_LTDC_MspInit+0x6c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d120      	bne.n	80023ea <HAL_LTDC_MspInit+0x62>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80023a8:	2308      	movs	r3, #8
 80023aa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 80023ac:	2390      	movs	r3, #144	@ 0x90
 80023ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80023b0:	2302      	movs	r3, #2
 80023b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80023b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023b8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	4618      	mov	r0, r3
 80023c0:	f006 f9d0 	bl	8008764 <HAL_RCCEx_PeriphCLKConfig>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 80023ca:	f7ff feb3 	bl	8002134 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <HAL_LTDC_MspInit+0x70>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	4a08      	ldr	r2, [pc, #32]	@ (80023f8 <HAL_LTDC_MspInit+0x70>)
 80023d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023de:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <HAL_LTDC_MspInit+0x70>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 80023ea:	bf00      	nop
 80023ec:	3748      	adds	r7, #72	@ 0x48
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40016800 	.word	0x40016800
 80023f8:	40023800 	.word	0x40023800

080023fc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002410:	4b3c      	ldr	r3, [pc, #240]	@ (8002504 <HAL_FMC_MspInit+0x108>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d171      	bne.n	80024fc <HAL_FMC_MspInit+0x100>
    return;
  }
  FMC_Initialized = 1;
 8002418:	4b3a      	ldr	r3, [pc, #232]	@ (8002504 <HAL_FMC_MspInit+0x108>)
 800241a:	2201      	movs	r2, #1
 800241c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	4b39      	ldr	r3, [pc, #228]	@ (8002508 <HAL_FMC_MspInit+0x10c>)
 8002424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002426:	4a38      	ldr	r2, [pc, #224]	@ (8002508 <HAL_FMC_MspInit+0x10c>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6393      	str	r3, [r2, #56]	@ 0x38
 800242e:	4b36      	ldr	r3, [pc, #216]	@ (8002508 <HAL_FMC_MspInit+0x10c>)
 8002430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 800243a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800243e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002448:	2303      	movs	r3, #3
 800244a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800244c:	230c      	movs	r3, #12
 800244e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	4619      	mov	r1, r3
 8002454:	482d      	ldr	r0, [pc, #180]	@ (800250c <HAL_FMC_MspInit+0x110>)
 8002456:	f004 f957 	bl	8006708 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 800245a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800245e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002468:	2303      	movs	r3, #3
 800246a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800246c:	230c      	movs	r3, #12
 800246e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	4619      	mov	r1, r3
 8002474:	4826      	ldr	r0, [pc, #152]	@ (8002510 <HAL_FMC_MspInit+0x114>)
 8002476:	f004 f947 	bl	8006708 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800247a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800247e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002488:	2303      	movs	r3, #3
 800248a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800248c:	230c      	movs	r3, #12
 800248e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	4619      	mov	r1, r3
 8002494:	481f      	ldr	r0, [pc, #124]	@ (8002514 <HAL_FMC_MspInit+0x118>)
 8002496:	f004 f937 	bl	8006708 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 800249a:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 800249e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_9|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	2302      	movs	r3, #2
 80024a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024ac:	230c      	movs	r3, #12
 80024ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	4619      	mov	r1, r3
 80024b4:	4818      	ldr	r0, [pc, #96]	@ (8002518 <HAL_FMC_MspInit+0x11c>)
 80024b6:	f004 f927 	bl	8006708 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80024ba:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80024be:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c0:	2302      	movs	r3, #2
 80024c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c8:	2303      	movs	r3, #3
 80024ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024cc:	230c      	movs	r3, #12
 80024ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	4619      	mov	r1, r3
 80024d4:	4811      	ldr	r0, [pc, #68]	@ (800251c <HAL_FMC_MspInit+0x120>)
 80024d6:	f004 f917 	bl	8006708 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
 80024da:	f64f 732c 	movw	r3, #65324	@ 0xff2c
 80024de:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e8:	2303      	movs	r3, #3
 80024ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024ec:	230c      	movs	r3, #12
 80024ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	4619      	mov	r1, r3
 80024f4:	480a      	ldr	r0, [pc, #40]	@ (8002520 <HAL_FMC_MspInit+0x124>)
 80024f6:	f004 f907 	bl	8006708 <HAL_GPIO_Init>
 80024fa:	e000      	b.n	80024fe <HAL_FMC_MspInit+0x102>
    return;
 80024fc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20007f24 	.word	0x20007f24
 8002508:	40023800 	.word	0x40023800
 800250c:	40021000 	.word	0x40021000
 8002510:	40021800 	.word	0x40021800
 8002514:	40020c00 	.word	0x40020c00
 8002518:	40022000 	.word	0x40022000
 800251c:	40021400 	.word	0x40021400
 8002520:	40021c00 	.word	0x40021c00

08002524 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800252c:	f7ff ff66 	bl	80023fc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <NMI_Handler+0x4>

08002540 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <HardFault_Handler+0x4>

08002548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <MemManage_Handler+0x4>

08002550 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002554:	bf00      	nop
 8002556:	e7fd      	b.n	8002554 <BusFault_Handler+0x4>

08002558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800255c:	bf00      	nop
 800255e:	e7fd      	b.n	800255c <UsageFault_Handler+0x4>

08002560 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800258e:	f002 fa5b 	bl	8004a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a0:	4a14      	ldr	r2, [pc, #80]	@ (80025f4 <_sbrk+0x5c>)
 80025a2:	4b15      	ldr	r3, [pc, #84]	@ (80025f8 <_sbrk+0x60>)
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025ac:	4b13      	ldr	r3, [pc, #76]	@ (80025fc <_sbrk+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d102      	bne.n	80025ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b4:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <_sbrk+0x64>)
 80025b6:	4a12      	ldr	r2, [pc, #72]	@ (8002600 <_sbrk+0x68>)
 80025b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ba:	4b10      	ldr	r3, [pc, #64]	@ (80025fc <_sbrk+0x64>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d207      	bcs.n	80025d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c8:	f00b fa74 	bl	800dab4 <__errno>
 80025cc:	4603      	mov	r3, r0
 80025ce:	220c      	movs	r2, #12
 80025d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	e009      	b.n	80025ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d8:	4b08      	ldr	r3, [pc, #32]	@ (80025fc <_sbrk+0x64>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025de:	4b07      	ldr	r3, [pc, #28]	@ (80025fc <_sbrk+0x64>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	4a05      	ldr	r2, [pc, #20]	@ (80025fc <_sbrk+0x64>)
 80025e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ea:	68fb      	ldr	r3, [r7, #12]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20050000 	.word	0x20050000
 80025f8:	00000800 	.word	0x00000800
 80025fc:	20007f28 	.word	0x20007f28
 8002600:	20008440 	.word	0x20008440

08002604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002608:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <SystemInit+0x20>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260e:	4a05      	ldr	r2, [pc, #20]	@ (8002624 <SystemInit+0x20>)
 8002610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002628:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002660 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800262c:	f7ff ffea 	bl	8002604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002630:	480c      	ldr	r0, [pc, #48]	@ (8002664 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002632:	490d      	ldr	r1, [pc, #52]	@ (8002668 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002634:	4a0d      	ldr	r2, [pc, #52]	@ (800266c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002638:	e002      	b.n	8002640 <LoopCopyDataInit>

0800263a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800263a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800263c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800263e:	3304      	adds	r3, #4

08002640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002644:	d3f9      	bcc.n	800263a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002646:	4a0a      	ldr	r2, [pc, #40]	@ (8002670 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002648:	4c0a      	ldr	r4, [pc, #40]	@ (8002674 <LoopFillZerobss+0x22>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800264c:	e001      	b.n	8002652 <LoopFillZerobss>

0800264e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800264e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002650:	3204      	adds	r2, #4

08002652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002654:	d3fb      	bcc.n	800264e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002656:	f00b fa33 	bl	800dac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800265a:	f7fe ff85 	bl	8001568 <main>
  bx  lr    
 800265e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002660:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002668:	20000c30 	.word	0x20000c30
  ldr r2, =_sidata
 800266c:	080a3d84 	.word	0x080a3d84
  ldr r2, =_sbss
 8002670:	20000c30 	.word	0x20000c30
  ldr r4, =_ebss
 8002674:	2000843c 	.word	0x2000843c

08002678 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002678:	e7fe      	b.n	8002678 <ADC_IRQHandler>
	...

0800267c <ft6x06_Init>:
  *         from MCU to FT6xx6 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8002686:	88fb      	ldrh	r3, [r7, #6]
 8002688:	4618      	mov	r0, r3
 800268a:	f000 f90d 	bl	80028a8 <ft6x06_GetInstance>
 800268e:	4603      	mov	r3, r0
 8002690:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	2bff      	cmp	r3, #255	@ 0xff
 8002696:	d10e      	bne.n	80026b6 <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8002698:	2000      	movs	r0, #0
 800269a:	f000 f905 	bl	80028a8 <ft6x06_GetInstance>
 800269e:	4603      	mov	r3, r0
 80026a0:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 80026a2:	7bbb      	ldrb	r3, [r7, #14]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d806      	bhi.n	80026b6 <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 80026a8:	7bbb      	ldrb	r3, [r7, #14]
 80026aa:	88fa      	ldrh	r2, [r7, #6]
 80026ac:	b2d1      	uxtb	r1, r2
 80026ae:	4a04      	ldr	r2, [pc, #16]	@ (80026c0 <ft6x06_Init+0x44>)
 80026b0:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 80026b2:	f000 fed7 	bl	8003464 <TS_IO_Init>
    }
  }
}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20007f2c 	.word	0x20007f2c

080026c4 <ft6x06_Reset>:
  *         @note : Not applicable to FT6xx6.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6xx6 IC */
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <ft6x06_ReadID>:
  *         able to read the FT6xx6 device ID, and verify this is a FT6xx6.
  * @param  DeviceAddr: I2C FT6xx6 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 80026e4:	f000 febe 	bl	8003464 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 80026e8:	88fb      	ldrh	r3, [r7, #6]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	21a8      	movs	r1, #168	@ 0xa8
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 fed1 	bl	8003496 <TS_IO_Read>
 80026f4:	4603      	mov	r3, r0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6xx6 */
  ft6x06_TS_Configure(DeviceAddr);
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f8bd 	bl	800288a <ft6x06_TS_Configure>

  /* By default set FT6xx6 IC in Polling mode : no INT generation on FT6xx6 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8002710:	88fb      	ldrh	r3, [r7, #6]
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f88e 	bl	8002834 <ft6x06_TS_DisableIT>
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2102      	movs	r1, #2
 8002734:	4618      	mov	r0, r3
 8002736:	f000 feae 	bl	8003496 <TS_IO_Read>
 800273a:	4603      	mov	r3, r0
 800273c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	b2db      	uxtb	r3, r3
 8002748:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6xx6 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4b05      	ldr	r3, [pc, #20]	@ (8002770 <ft6x06_TS_DetectTouch+0x50>)
 800275c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 800275e:	4b04      	ldr	r3, [pc, #16]	@ (8002770 <ft6x06_TS_DetectTouch+0x50>)
 8002760:	2200      	movs	r2, #0
 8002762:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	b2db      	uxtb	r3, r3
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20007f30 	.word	0x20007f30

08002774 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8002786:	4b20      	ldr	r3, [pc, #128]	@ (8002808 <ft6x06_TS_GetXY+0x94>)
 8002788:	789a      	ldrb	r2, [r3, #2]
 800278a:	4b1f      	ldr	r3, [pc, #124]	@ (8002808 <ft6x06_TS_GetXY+0x94>)
 800278c:	785b      	ldrb	r3, [r3, #1]
 800278e:	429a      	cmp	r2, r3
 8002790:	d236      	bcs.n	8002800 <ft6x06_TS_GetXY+0x8c>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8002792:	4b1d      	ldr	r3, [pc, #116]	@ (8002808 <ft6x06_TS_GetXY+0x94>)
 8002794:	789b      	ldrb	r3, [r3, #2]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <ft6x06_TS_GetXY+0x2c>
 800279a:	2b01      	cmp	r3, #1
 800279c:	d003      	beq.n	80027a6 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 800279e:	e005      	b.n	80027ac <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 80027a0:	2303      	movs	r3, #3
 80027a2:	75fb      	strb	r3, [r7, #23]
      break;
 80027a4:	e002      	b.n	80027ac <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 80027a6:	2309      	movs	r3, #9
 80027a8:	75fb      	strb	r3, [r7, #23]
      break;
 80027aa:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 80027ac:	89fb      	ldrh	r3, [r7, #14]
 80027ae:	b2d8      	uxtb	r0, r3
 80027b0:	f107 0210 	add.w	r2, r7, #16
 80027b4:	7df9      	ldrb	r1, [r7, #23]
 80027b6:	2304      	movs	r3, #4
 80027b8:	f000 fe80 	bl	80034bc <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80027bc:	7c3b      	ldrb	r3, [r7, #16]
 80027be:	b21b      	sxth	r3, r3
 80027c0:	021b      	lsls	r3, r3, #8
 80027c2:	b21b      	sxth	r3, r3
 80027c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80027c8:	b21a      	sxth	r2, r3
 80027ca:	7c7b      	ldrb	r3, [r7, #17]
 80027cc:	b21b      	sxth	r3, r3
 80027ce:	4313      	orrs	r3, r2
 80027d0:	b21b      	sxth	r3, r3
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 80027d8:	7cbb      	ldrb	r3, [r7, #18]
 80027da:	b21b      	sxth	r3, r3
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	b21b      	sxth	r3, r3
 80027e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80027e4:	b21a      	sxth	r2, r3
 80027e6:	7cfb      	ldrb	r3, [r7, #19]
 80027e8:	b21b      	sxth	r3, r3
 80027ea:	4313      	orrs	r3, r2
 80027ec:	b21b      	sxth	r3, r3
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 80027f4:	4b04      	ldr	r3, [pc, #16]	@ (8002808 <ft6x06_TS_GetXY+0x94>)
 80027f6:	789b      	ldrb	r3, [r3, #2]
 80027f8:	3301      	adds	r3, #1
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	4b02      	ldr	r3, [pc, #8]	@ (8002808 <ft6x06_TS_GetXY+0x94>)
 80027fe:	709a      	strb	r2, [r3, #2]
  }
}
 8002800:	bf00      	nop
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20007f30 	.word	0x20007f30

0800280c <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6xx6).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800281a:	2301      	movs	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	7bfa      	ldrb	r2, [r7, #15]
 8002824:	21a4      	movs	r1, #164	@ 0xa4
 8002826:	4618      	mov	r0, r3
 8002828:	f000 fe22 	bl	8003470 <TS_IO_Write>
}
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6xx6).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8002842:	2300      	movs	r3, #0
 8002844:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8002846:	88fb      	ldrh	r3, [r7, #6]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	7bfa      	ldrb	r2, [r7, #15]
 800284c:	21a4      	movs	r1, #164	@ 0xa4
 800284e:	4618      	mov	r0, r3
 8002850:	f000 fe0e 	bl	8003470 <TS_IO_Write>
}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6xx6.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6xx6 */
  return 0;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6xx6.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6xx6 */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6xx6 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 800288a:	b480      	push	{r7}
 800288c:	b085      	sub	sp, #20
 800288e:	af00      	add	r7, sp, #0
 8002890:	4603      	mov	r3, r0
 8002892:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6xx6 */

  return(status);
 8002898:	68fb      	ldr	r3, [r7, #12]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80028b6:	2300      	movs	r3, #0
 80028b8:	73fb      	strb	r3, [r7, #15]
 80028ba:	e00b      	b.n	80028d4 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	4a0a      	ldr	r2, [pc, #40]	@ (80028e8 <ft6x06_GetInstance+0x40>)
 80028c0:	5cd3      	ldrb	r3, [r2, r3]
 80028c2:	461a      	mov	r2, r3
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d101      	bne.n	80028ce <ft6x06_GetInstance+0x26>
    {
      return idx; 
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	e006      	b.n	80028dc <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	3301      	adds	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d9f0      	bls.n	80028bc <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80028da:	23ff      	movs	r3, #255	@ 0xff
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	20007f2c 	.word	0x20007f2c

080028ec <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b0b2      	sub	sp, #200	@ 0xc8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  NT35510_IO_Delay(120);
 80028f6:	2078      	movs	r0, #120	@ 0x78
 80028f8:	f000 fe04 	bl	8003504 <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 80028fc:	4ac8      	ldr	r2, [pc, #800]	@ (8002c20 <NT35510_Init+0x334>)
 80028fe:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002902:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002906:	6018      	str	r0, [r3, #0]
 8002908:	3304      	adds	r3, #4
 800290a:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 800290c:	4bc5      	ldr	r3, [pc, #788]	@ (8002c24 <NT35510_Init+0x338>)
 800290e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 8002912:	4bc5      	ldr	r3, [pc, #788]	@ (8002c28 <NT35510_Init+0x33c>)
 8002914:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 8002918:	4bc4      	ldr	r3, [pc, #784]	@ (8002c2c <NT35510_Init+0x340>)
 800291a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 800291e:	4bc4      	ldr	r3, [pc, #784]	@ (8002c30 <NT35510_Init+0x344>)
 8002920:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 8002924:	4bc3      	ldr	r3, [pc, #780]	@ (8002c34 <NT35510_Init+0x348>)
 8002926:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 800292a:	4bc3      	ldr	r3, [pc, #780]	@ (8002c38 <NT35510_Init+0x34c>)
 800292c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 8002930:	f240 13bf 	movw	r3, #447	@ 0x1bf
 8002934:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 8002938:	4bc0      	ldr	r3, [pc, #768]	@ (8002c3c <NT35510_Init+0x350>)
 800293a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 800293e:	4bc0      	ldr	r3, [pc, #768]	@ (8002c40 <NT35510_Init+0x354>)
 8002940:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 8002944:	4bbf      	ldr	r3, [pc, #764]	@ (8002c44 <NT35510_Init+0x358>)
 8002946:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 800294a:	4bbf      	ldr	r3, [pc, #764]	@ (8002c48 <NT35510_Init+0x35c>)
 800294c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 8002950:	4bbe      	ldr	r3, [pc, #760]	@ (8002c4c <NT35510_Init+0x360>)
 8002952:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 8002956:	4bbe      	ldr	r3, [pc, #760]	@ (8002c50 <NT35510_Init+0x364>)
 8002958:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 800295c:	4abd      	ldr	r2, [pc, #756]	@ (8002c54 <NT35510_Init+0x368>)
 800295e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	4611      	mov	r1, r2
 8002966:	8019      	strh	r1, [r3, #0]
 8002968:	3302      	adds	r3, #2
 800296a:	0c12      	lsrs	r2, r2, #16
 800296c:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 800296e:	4aba      	ldr	r2, [pc, #744]	@ (8002c58 <NT35510_Init+0x36c>)
 8002970:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002974:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002978:	6018      	str	r0, [r3, #0]
 800297a:	3304      	adds	r3, #4
 800297c:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 800297e:	4ab7      	ldr	r2, [pc, #732]	@ (8002c5c <NT35510_Init+0x370>)
 8002980:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	4611      	mov	r1, r2
 8002988:	8019      	strh	r1, [r3, #0]
 800298a:	3302      	adds	r3, #2
 800298c:	0c12      	lsrs	r2, r2, #16
 800298e:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8002990:	f240 33b6 	movw	r3, #950	@ 0x3b6
 8002994:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  const uint8_t nt35510_reg19[] = {0xB5, 0x50};
 8002998:	f245 03b5 	movw	r3, #20661	@ 0x50b5
 800299c:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 80029a0:	4aaf      	ldr	r2, [pc, #700]	@ (8002c60 <NT35510_Init+0x374>)
 80029a2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	4611      	mov	r1, r2
 80029aa:	8019      	strh	r1, [r3, #0]
 80029ac:	3302      	adds	r3, #2
 80029ae:	0c12      	lsrs	r2, r2, #16
 80029b0:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 80029b2:	4aac      	ldr	r2, [pc, #688]	@ (8002c64 <NT35510_Init+0x378>)
 80029b4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80029b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029bc:	6018      	str	r0, [r3, #0]
 80029be:	3304      	adds	r3, #4
 80029c0:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 80029c2:	f04f 433c 	mov.w	r3, #3154116608	@ 0xbc000000
 80029c6:	667b      	str	r3, [r7, #100]	@ 0x64
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 80029c8:	4ba7      	ldr	r3, [pc, #668]	@ (8002c68 <NT35510_Init+0x37c>)
 80029ca:	663b      	str	r3, [r7, #96]	@ 0x60
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 80029cc:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 80029d0:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 80029d4:	2336      	movs	r3, #54	@ 0x36
 80029d6:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 80029da:	4aa4      	ldr	r2, [pc, #656]	@ (8002c6c <NT35510_Init+0x380>)
 80029dc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80029e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029e4:	6018      	str	r0, [r3, #0]
 80029e6:	3304      	adds	r3, #4
 80029e8:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 80029ea:	4aa1      	ldr	r2, [pc, #644]	@ (8002c70 <NT35510_Init+0x384>)
 80029ec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80029f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029f4:	6018      	str	r0, [r3, #0]
 80029f6:	3304      	adds	r3, #4
 80029f8:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 80029fa:	f246 0336 	movw	r3, #24630	@ 0x6036
 80029fe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 8002a02:	4a9c      	ldr	r2, [pc, #624]	@ (8002c74 <NT35510_Init+0x388>)
 8002a04:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002a08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a0c:	6018      	str	r0, [r3, #0]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 8002a12:	4a99      	ldr	r2, [pc, #612]	@ (8002c78 <NT35510_Init+0x38c>)
 8002a14:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a1c:	6018      	str	r0, [r3, #0]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 8002a22:	2335      	movs	r3, #53	@ 0x35
 8002a24:	863b      	strh	r3, [r7, #48]	@ 0x30
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 8002a26:	2311      	movs	r3, #17
 8002a28:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 8002a2a:	2329      	movs	r3, #41	@ 0x29
 8002a2c:	853b      	strh	r3, [r7, #40]	@ 0x28

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 8002a2e:	f647 7351 	movw	r3, #32593	@ 0x7f51
 8002a32:	84bb      	strh	r3, [r7, #36]	@ 0x24
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 8002a34:	f642 4353 	movw	r3, #11347	@ 0x2c53
 8002a38:	843b      	strh	r3, [r7, #32]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 8002a3a:	f240 2355 	movw	r3, #597	@ 0x255
 8002a3e:	83bb      	strh	r3, [r7, #28]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 8002a40:	f64f 735e 	movw	r3, #65374	@ 0xff5e
 8002a44:	833b      	strh	r3, [r7, #24]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 8002a46:	232c      	movs	r3, #44	@ 0x2c
 8002a48:	82bb      	strh	r3, [r7, #20]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 8002a4a:	f245 533a 	movw	r3, #21818	@ 0x553a
 8002a4e:	823b      	strh	r3, [r7, #16]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 8002a50:	f247 733a 	movw	r3, #30522	@ 0x773a
 8002a54:	81bb      	strh	r3, [r7, #12]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 8002a56:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	2005      	movs	r0, #5
 8002a5e:	f001 fa59 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 8002a62:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002a66:	4619      	mov	r1, r3
 8002a68:	2003      	movs	r0, #3
 8002a6a:	f001 fa53 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 8002a6e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8002a72:	4619      	mov	r1, r3
 8002a74:	2003      	movs	r0, #3
 8002a76:	f001 fa4d 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 8002a7a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002a7e:	4619      	mov	r1, r3
 8002a80:	2003      	movs	r0, #3
 8002a82:	f001 fa47 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 8002a86:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	2003      	movs	r0, #3
 8002a8e:	f001 fa41 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 8002a92:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002a96:	4619      	mov	r1, r3
 8002a98:	2003      	movs	r0, #3
 8002a9a:	f001 fa3b 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 8002a9e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	2003      	movs	r0, #3
 8002aa6:	f001 fa35 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 8002aaa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002aae:	4619      	mov	r1, r3
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	f001 fa2f 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 8002ab6:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002aba:	4619      	mov	r1, r3
 8002abc:	2003      	movs	r0, #3
 8002abe:	f001 fa29 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 8002ac2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	2003      	movs	r0, #3
 8002aca:	f001 fa23 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 8002ace:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	2003      	movs	r0, #3
 8002ad6:	f001 fa1d 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 8002ada:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002ade:	4619      	mov	r1, r3
 8002ae0:	2003      	movs	r0, #3
 8002ae2:	f001 fa17 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 8002ae6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002aea:	4619      	mov	r1, r3
 8002aec:	2003      	movs	r0, #3
 8002aee:	f001 fa11 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 8002af2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002af6:	4619      	mov	r1, r3
 8002af8:	2003      	movs	r0, #3
 8002afa:	f001 fa0b 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 8002afe:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002b02:	4619      	mov	r1, r3
 8002b04:	2002      	movs	r0, #2
 8002b06:	f001 fa05 	bl	8003f14 <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 8002b0a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002b0e:	4619      	mov	r1, r3
 8002b10:	2005      	movs	r0, #5
 8002b12:	f001 f9ff 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 8002b16:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	2002      	movs	r0, #2
 8002b1e:	f001 f9f9 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 8002b22:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002b26:	4619      	mov	r1, r3
 8002b28:	2001      	movs	r0, #1
 8002b2a:	f001 f9f3 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 8002b2e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002b32:	4619      	mov	r1, r3
 8002b34:	2001      	movs	r0, #1
 8002b36:	f001 f9ed 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 8002b3a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002b3e:	4619      	mov	r1, r3
 8002b40:	2002      	movs	r0, #2
 8002b42:	f001 f9e7 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 8002b46:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	2004      	movs	r0, #4
 8002b4e:	f001 f9e1 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 8002b52:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002b56:	4619      	mov	r1, r3
 8002b58:	2003      	movs	r0, #3
 8002b5a:	f001 f9db 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 8002b5e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002b62:	4619      	mov	r1, r3
 8002b64:	2003      	movs	r0, #3
 8002b66:	f001 f9d5 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 8002b6a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002b6e:	4619      	mov	r1, r3
 8002b70:	2001      	movs	r0, #1
 8002b72:	f001 f9cf 	bl	8003f14 <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 8002b76:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f001 f9c9 	bl	8003f14 <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 8002b82:	f107 030c 	add.w	r3, r7, #12
 8002b86:	4619      	mov	r1, r3
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f001 f9c3 	bl	8003f14 <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 8002b8e:	20c8      	movs	r0, #200	@ 0xc8
 8002b90:	f000 fcb8 	bl	8003504 <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d112      	bne.n	8002bc0 <NT35510_Init+0x2d4>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 8002b9a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	f001 f9b7 	bl	8003f14 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 8002ba6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002baa:	4619      	mov	r1, r3
 8002bac:	2004      	movs	r0, #4
 8002bae:	f001 f9b1 	bl	8003f14 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 8002bb2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	2004      	movs	r0, #4
 8002bba:	f001 f9ab 	bl	8003f14 <DSI_IO_WriteCmd>
 8002bbe:	e011      	b.n	8002be4 <NT35510_Init+0x2f8>
  }
  else
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 8002bc0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	f001 f9a4 	bl	8003f14 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 8002bcc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	2004      	movs	r0, #4
 8002bd4:	f001 f99e 	bl	8003f14 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 8002bd8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002bdc:	4619      	mov	r1, r3
 8002bde:	2004      	movs	r0, #4
 8002be0:	f001 f998 	bl	8003f14 <DSI_IO_WriteCmd>
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 8002be4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002be8:	4619      	mov	r1, r3
 8002bea:	2000      	movs	r0, #0
 8002bec:	f001 f992 	bl	8003f14 <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 8002bf0:	2078      	movs	r0, #120	@ 0x78
 8002bf2:	f000 fc87 	bl	8003504 <NT35510_IO_Delay>

  switch(ColorCoding)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d009      	beq.n	8002c10 <NT35510_Init+0x324>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d13c      	bne.n	8002c7c <NT35510_Init+0x390>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 8002c02:	f107 0310 	add.w	r3, r7, #16
 8002c06:	4619      	mov	r1, r3
 8002c08:	2001      	movs	r0, #1
 8002c0a:	f001 f983 	bl	8003f14 <DSI_IO_WriteCmd>
      break;
 8002c0e:	e03c      	b.n	8002c8a <NT35510_Init+0x39e>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8002c10:	f107 030c 	add.w	r3, r7, #12
 8002c14:	4619      	mov	r1, r3
 8002c16:	2001      	movs	r0, #1
 8002c18:	f001 f97c 	bl	8003f14 <DSI_IO_WriteCmd>
      break;
 8002c1c:	e035      	b.n	8002c8a <NT35510_Init+0x39e>
 8002c1e:	bf00      	nop
 8002c20:	0800fd94 	.word	0x0800fd94
 8002c24:	b0030303 	.word	0xb0030303
 8002c28:	b6464646 	.word	0xb6464646
 8002c2c:	b1030303 	.word	0xb1030303
 8002c30:	b7363636 	.word	0xb7363636
 8002c34:	b2020000 	.word	0xb2020000
 8002c38:	b8262626 	.word	0xb8262626
 8002c3c:	b3090909 	.word	0xb3090909
 8002c40:	b9363636 	.word	0xb9363636
 8002c44:	b5080808 	.word	0xb5080808
 8002c48:	ba262626 	.word	0xba262626
 8002c4c:	bc008000 	.word	0xbc008000
 8002c50:	bd008000 	.word	0xbd008000
 8002c54:	0800fd9c 	.word	0x0800fd9c
 8002c58:	0800fda0 	.word	0x0800fda0
 8002c5c:	0800fda8 	.word	0x0800fda8
 8002c60:	0800fdac 	.word	0x0800fdac
 8002c64:	0800fdb0 	.word	0x0800fdb0
 8002c68:	cc000003 	.word	0xcc000003
 8002c6c:	0800fdb8 	.word	0x0800fdb8
 8002c70:	0800fdc0 	.word	0x0800fdc0
 8002c74:	0800fdc8 	.word	0x0800fdc8
 8002c78:	0800fdd0 	.word	0x0800fdd0
    default :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8002c7c:	f107 030c 	add.w	r3, r7, #12
 8002c80:	4619      	mov	r1, r3
 8002c82:	2001      	movs	r0, #1
 8002c84:	f001 f946 	bl	8003f14 <DSI_IO_WriteCmd>
      break;
 8002c88:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 8002c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c8e:	4619      	mov	r1, r3
 8002c90:	2001      	movs	r0, #1
 8002c92:	f001 f93f 	bl	8003f14 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 8002c96:	f107 0320 	add.w	r3, r7, #32
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	f001 f939 	bl	8003f14 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 8002ca2:	f107 031c 	add.w	r3, r7, #28
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	2001      	movs	r0, #1
 8002caa:	f001 f933 	bl	8003f14 <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 8002cae:	f107 0318 	add.w	r3, r7, #24
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	f001 f92d 	bl	8003f14 <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 8002cba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f001 f927 	bl	8003f14 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 8002cc6:	f107 0314 	add.w	r3, r7, #20
 8002cca:	4619      	mov	r1, r3
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f001 f921 	bl	8003f14 <DSI_IO_WriteCmd>

  return 0;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	37c8      	adds	r7, #200	@ 0xc8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <NT35510_ReadID>:
/**
  * @brief  Read the component ID.
  * @retval Component ID
  */
uint16_t NT35510_ReadID(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
  uint8_t pData=0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	71fb      	strb	r3, [r7, #7]
  DSI_IO_ReadCmd(NT35510_CMD_RDID2, &pData, 1);
 8002ce6:	1dfb      	adds	r3, r7, #7
 8002ce8:	2201      	movs	r2, #1
 8002cea:	4619      	mov	r1, r3
 8002cec:	20db      	movs	r0, #219	@ 0xdb
 8002cee:	f001 f93b 	bl	8003f68 <DSI_IO_ReadCmd>
  return pData;
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002d06:	49c1      	ldr	r1, [pc, #772]	@ (800300c <OTM8009A_Init+0x310>)
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f001 f903 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8002d0e:	49c0      	ldr	r1, [pc, #768]	@ (8003010 <OTM8009A_Init+0x314>)
 8002d10:	2003      	movs	r0, #3
 8002d12:	f001 f8ff 	bl	8003f14 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8002d16:	49bf      	ldr	r1, [pc, #764]	@ (8003014 <OTM8009A_Init+0x318>)
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f001 f8fb 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8002d1e:	49be      	ldr	r1, [pc, #760]	@ (8003018 <OTM8009A_Init+0x31c>)
 8002d20:	2002      	movs	r0, #2
 8002d22:	f001 f8f7 	bl	8003f14 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002d26:	49bb      	ldr	r1, [pc, #748]	@ (8003014 <OTM8009A_Init+0x318>)
 8002d28:	2000      	movs	r0, #0
 8002d2a:	f001 f8f3 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8002d2e:	49bb      	ldr	r1, [pc, #748]	@ (800301c <OTM8009A_Init+0x320>)
 8002d30:	2000      	movs	r0, #0
 8002d32:	f001 f8ef 	bl	8003f14 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8002d36:	200a      	movs	r0, #10
 8002d38:	f000 fbd9 	bl	80034ee <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8002d3c:	49b8      	ldr	r1, [pc, #736]	@ (8003020 <OTM8009A_Init+0x324>)
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f001 f8e8 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8002d44:	49b7      	ldr	r1, [pc, #732]	@ (8003024 <OTM8009A_Init+0x328>)
 8002d46:	2000      	movs	r0, #0
 8002d48:	f001 f8e4 	bl	8003f14 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8002d4c:	200a      	movs	r0, #10
 8002d4e:	f000 fbce 	bl	80034ee <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8002d52:	49b5      	ldr	r1, [pc, #724]	@ (8003028 <OTM8009A_Init+0x32c>)
 8002d54:	2000      	movs	r0, #0
 8002d56:	f001 f8dd 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8002d5a:	49b4      	ldr	r1, [pc, #720]	@ (800302c <OTM8009A_Init+0x330>)
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f001 f8d9 	bl	8003f14 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8002d62:	49b3      	ldr	r1, [pc, #716]	@ (8003030 <OTM8009A_Init+0x334>)
 8002d64:	2000      	movs	r0, #0
 8002d66:	f001 f8d5 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8002d6a:	49b2      	ldr	r1, [pc, #712]	@ (8003034 <OTM8009A_Init+0x338>)
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f001 f8d1 	bl	8003f14 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8002d72:	49b1      	ldr	r1, [pc, #708]	@ (8003038 <OTM8009A_Init+0x33c>)
 8002d74:	2000      	movs	r0, #0
 8002d76:	f001 f8cd 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8002d7a:	49b0      	ldr	r1, [pc, #704]	@ (800303c <OTM8009A_Init+0x340>)
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f001 f8c9 	bl	8003f14 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002d82:	49a2      	ldr	r1, [pc, #648]	@ (800300c <OTM8009A_Init+0x310>)
 8002d84:	2000      	movs	r0, #0
 8002d86:	f001 f8c5 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8002d8a:	49ad      	ldr	r1, [pc, #692]	@ (8003040 <OTM8009A_Init+0x344>)
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f001 f8c1 	bl	8003f14 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002d92:	49ac      	ldr	r1, [pc, #688]	@ (8003044 <OTM8009A_Init+0x348>)
 8002d94:	2000      	movs	r0, #0
 8002d96:	f001 f8bd 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8002d9a:	49ab      	ldr	r1, [pc, #684]	@ (8003048 <OTM8009A_Init+0x34c>)
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f001 f8b9 	bl	8003f14 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8002da2:	49aa      	ldr	r1, [pc, #680]	@ (800304c <OTM8009A_Init+0x350>)
 8002da4:	2000      	movs	r0, #0
 8002da6:	f001 f8b5 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8002daa:	49a9      	ldr	r1, [pc, #676]	@ (8003050 <OTM8009A_Init+0x354>)
 8002dac:	2000      	movs	r0, #0
 8002dae:	f001 f8b1 	bl	8003f14 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8002db2:	49a8      	ldr	r1, [pc, #672]	@ (8003054 <OTM8009A_Init+0x358>)
 8002db4:	2000      	movs	r0, #0
 8002db6:	f001 f8ad 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8002dba:	49a7      	ldr	r1, [pc, #668]	@ (8003058 <OTM8009A_Init+0x35c>)
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f001 f8a9 	bl	8003f14 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8002dc2:	49a6      	ldr	r1, [pc, #664]	@ (800305c <OTM8009A_Init+0x360>)
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f001 f8a5 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8002dca:	499a      	ldr	r1, [pc, #616]	@ (8003034 <OTM8009A_Init+0x338>)
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f001 f8a1 	bl	8003f14 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002dd2:	498e      	ldr	r1, [pc, #568]	@ (800300c <OTM8009A_Init+0x310>)
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	f001 f89d 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8002dda:	49a1      	ldr	r1, [pc, #644]	@ (8003060 <OTM8009A_Init+0x364>)
 8002ddc:	2002      	movs	r0, #2
 8002dde:	f001 f899 	bl	8003f14 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8002de2:	49a0      	ldr	r1, [pc, #640]	@ (8003064 <OTM8009A_Init+0x368>)
 8002de4:	2000      	movs	r0, #0
 8002de6:	f001 f895 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8002dea:	499f      	ldr	r1, [pc, #636]	@ (8003068 <OTM8009A_Init+0x36c>)
 8002dec:	2000      	movs	r0, #0
 8002dee:	f001 f891 	bl	8003f14 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8002df2:	499e      	ldr	r1, [pc, #632]	@ (800306c <OTM8009A_Init+0x370>)
 8002df4:	2000      	movs	r0, #0
 8002df6:	f001 f88d 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8002dfa:	499d      	ldr	r1, [pc, #628]	@ (8003070 <OTM8009A_Init+0x374>)
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f001 f889 	bl	8003f14 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8002e02:	499c      	ldr	r1, [pc, #624]	@ (8003074 <OTM8009A_Init+0x378>)
 8002e04:	2000      	movs	r0, #0
 8002e06:	f001 f885 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8002e0a:	499b      	ldr	r1, [pc, #620]	@ (8003078 <OTM8009A_Init+0x37c>)
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f001 f881 	bl	8003f14 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002e12:	498c      	ldr	r1, [pc, #560]	@ (8003044 <OTM8009A_Init+0x348>)
 8002e14:	2000      	movs	r0, #0
 8002e16:	f001 f87d 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8002e1a:	4998      	ldr	r1, [pc, #608]	@ (800307c <OTM8009A_Init+0x380>)
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f001 f879 	bl	8003f14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8002e22:	498a      	ldr	r1, [pc, #552]	@ (800304c <OTM8009A_Init+0x350>)
 8002e24:	2000      	movs	r0, #0
 8002e26:	f001 f875 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8002e2a:	4995      	ldr	r1, [pc, #596]	@ (8003080 <OTM8009A_Init+0x384>)
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f001 f871 	bl	8003f14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8002e32:	4994      	ldr	r1, [pc, #592]	@ (8003084 <OTM8009A_Init+0x388>)
 8002e34:	2000      	movs	r0, #0
 8002e36:	f001 f86d 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8002e3a:	4993      	ldr	r1, [pc, #588]	@ (8003088 <OTM8009A_Init+0x38c>)
 8002e3c:	2002      	movs	r0, #2
 8002e3e:	f001 f869 	bl	8003f14 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002e42:	4974      	ldr	r1, [pc, #464]	@ (8003014 <OTM8009A_Init+0x318>)
 8002e44:	2000      	movs	r0, #0
 8002e46:	f001 f865 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8002e4a:	4990      	ldr	r1, [pc, #576]	@ (800308c <OTM8009A_Init+0x390>)
 8002e4c:	2006      	movs	r0, #6
 8002e4e:	f001 f861 	bl	8003f14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8002e52:	498f      	ldr	r1, [pc, #572]	@ (8003090 <OTM8009A_Init+0x394>)
 8002e54:	2000      	movs	r0, #0
 8002e56:	f001 f85d 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8002e5a:	498e      	ldr	r1, [pc, #568]	@ (8003094 <OTM8009A_Init+0x398>)
 8002e5c:	200e      	movs	r0, #14
 8002e5e:	f001 f859 	bl	8003f14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002e62:	498d      	ldr	r1, [pc, #564]	@ (8003098 <OTM8009A_Init+0x39c>)
 8002e64:	2000      	movs	r0, #0
 8002e66:	f001 f855 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8002e6a:	498c      	ldr	r1, [pc, #560]	@ (800309c <OTM8009A_Init+0x3a0>)
 8002e6c:	200e      	movs	r0, #14
 8002e6e:	f001 f851 	bl	8003f14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002e72:	498b      	ldr	r1, [pc, #556]	@ (80030a0 <OTM8009A_Init+0x3a4>)
 8002e74:	2000      	movs	r0, #0
 8002e76:	f001 f84d 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8002e7a:	498a      	ldr	r1, [pc, #552]	@ (80030a4 <OTM8009A_Init+0x3a8>)
 8002e7c:	200a      	movs	r0, #10
 8002e7e:	f001 f849 	bl	8003f14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002e82:	4989      	ldr	r1, [pc, #548]	@ (80030a8 <OTM8009A_Init+0x3ac>)
 8002e84:	2000      	movs	r0, #0
 8002e86:	f001 f845 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8002e8a:	4988      	ldr	r1, [pc, #544]	@ (80030ac <OTM8009A_Init+0x3b0>)
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f001 f841 	bl	8003f14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002e92:	4960      	ldr	r1, [pc, #384]	@ (8003014 <OTM8009A_Init+0x318>)
 8002e94:	2000      	movs	r0, #0
 8002e96:	f001 f83d 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8002e9a:	4985      	ldr	r1, [pc, #532]	@ (80030b0 <OTM8009A_Init+0x3b4>)
 8002e9c:	200a      	movs	r0, #10
 8002e9e:	f001 f839 	bl	8003f14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8002ea2:	4984      	ldr	r1, [pc, #528]	@ (80030b4 <OTM8009A_Init+0x3b8>)
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f001 f835 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8002eaa:	4983      	ldr	r1, [pc, #524]	@ (80030b8 <OTM8009A_Init+0x3bc>)
 8002eac:	200f      	movs	r0, #15
 8002eae:	f001 f831 	bl	8003f14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8002eb2:	4977      	ldr	r1, [pc, #476]	@ (8003090 <OTM8009A_Init+0x394>)
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f001 f82d 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8002eba:	4980      	ldr	r1, [pc, #512]	@ (80030bc <OTM8009A_Init+0x3c0>)
 8002ebc:	200f      	movs	r0, #15
 8002ebe:	f001 f829 	bl	8003f14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002ec2:	4975      	ldr	r1, [pc, #468]	@ (8003098 <OTM8009A_Init+0x39c>)
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f001 f825 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8002eca:	497d      	ldr	r1, [pc, #500]	@ (80030c0 <OTM8009A_Init+0x3c4>)
 8002ecc:	200a      	movs	r0, #10
 8002ece:	f001 f821 	bl	8003f14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002ed2:	4973      	ldr	r1, [pc, #460]	@ (80030a0 <OTM8009A_Init+0x3a4>)
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f001 f81d 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8002eda:	497a      	ldr	r1, [pc, #488]	@ (80030c4 <OTM8009A_Init+0x3c8>)
 8002edc:	200f      	movs	r0, #15
 8002ede:	f001 f819 	bl	8003f14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002ee2:	4971      	ldr	r1, [pc, #452]	@ (80030a8 <OTM8009A_Init+0x3ac>)
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	f001 f815 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8002eea:	4977      	ldr	r1, [pc, #476]	@ (80030c8 <OTM8009A_Init+0x3cc>)
 8002eec:	200f      	movs	r0, #15
 8002eee:	f001 f811 	bl	8003f14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8002ef2:	4976      	ldr	r1, [pc, #472]	@ (80030cc <OTM8009A_Init+0x3d0>)
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f001 f80d 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8002efa:	4975      	ldr	r1, [pc, #468]	@ (80030d0 <OTM8009A_Init+0x3d4>)
 8002efc:	200a      	movs	r0, #10
 8002efe:	f001 f809 	bl	8003f14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8002f02:	4974      	ldr	r1, [pc, #464]	@ (80030d4 <OTM8009A_Init+0x3d8>)
 8002f04:	2000      	movs	r0, #0
 8002f06:	f001 f805 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8002f0a:	4973      	ldr	r1, [pc, #460]	@ (80030d8 <OTM8009A_Init+0x3dc>)
 8002f0c:	200a      	movs	r0, #10
 8002f0e:	f001 f801 	bl	8003f14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002f12:	4940      	ldr	r1, [pc, #256]	@ (8003014 <OTM8009A_Init+0x318>)
 8002f14:	2000      	movs	r0, #0
 8002f16:	f000 fffd 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8002f1a:	4970      	ldr	r1, [pc, #448]	@ (80030dc <OTM8009A_Init+0x3e0>)
 8002f1c:	200a      	movs	r0, #10
 8002f1e:	f000 fff9 	bl	8003f14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8002f22:	4964      	ldr	r1, [pc, #400]	@ (80030b4 <OTM8009A_Init+0x3b8>)
 8002f24:	2000      	movs	r0, #0
 8002f26:	f000 fff5 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8002f2a:	496d      	ldr	r1, [pc, #436]	@ (80030e0 <OTM8009A_Init+0x3e4>)
 8002f2c:	200f      	movs	r0, #15
 8002f2e:	f000 fff1 	bl	8003f14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8002f32:	4957      	ldr	r1, [pc, #348]	@ (8003090 <OTM8009A_Init+0x394>)
 8002f34:	2000      	movs	r0, #0
 8002f36:	f000 ffed 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8002f3a:	496a      	ldr	r1, [pc, #424]	@ (80030e4 <OTM8009A_Init+0x3e8>)
 8002f3c:	200f      	movs	r0, #15
 8002f3e:	f000 ffe9 	bl	8003f14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002f42:	4955      	ldr	r1, [pc, #340]	@ (8003098 <OTM8009A_Init+0x39c>)
 8002f44:	2000      	movs	r0, #0
 8002f46:	f000 ffe5 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8002f4a:	4967      	ldr	r1, [pc, #412]	@ (80030e8 <OTM8009A_Init+0x3ec>)
 8002f4c:	200a      	movs	r0, #10
 8002f4e:	f000 ffe1 	bl	8003f14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002f52:	4953      	ldr	r1, [pc, #332]	@ (80030a0 <OTM8009A_Init+0x3a4>)
 8002f54:	2000      	movs	r0, #0
 8002f56:	f000 ffdd 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8002f5a:	4964      	ldr	r1, [pc, #400]	@ (80030ec <OTM8009A_Init+0x3f0>)
 8002f5c:	200f      	movs	r0, #15
 8002f5e:	f000 ffd9 	bl	8003f14 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002f62:	4951      	ldr	r1, [pc, #324]	@ (80030a8 <OTM8009A_Init+0x3ac>)
 8002f64:	2000      	movs	r0, #0
 8002f66:	f000 ffd5 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8002f6a:	4961      	ldr	r1, [pc, #388]	@ (80030f0 <OTM8009A_Init+0x3f4>)
 8002f6c:	200f      	movs	r0, #15
 8002f6e:	f000 ffd1 	bl	8003f14 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002f72:	4934      	ldr	r1, [pc, #208]	@ (8003044 <OTM8009A_Init+0x348>)
 8002f74:	2000      	movs	r0, #0
 8002f76:	f000 ffcd 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8002f7a:	495e      	ldr	r1, [pc, #376]	@ (80030f4 <OTM8009A_Init+0x3f8>)
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f000 ffc9 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8002f82:	495d      	ldr	r1, [pc, #372]	@ (80030f8 <OTM8009A_Init+0x3fc>)
 8002f84:	2000      	movs	r0, #0
 8002f86:	f000 ffc5 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8002f8a:	495c      	ldr	r1, [pc, #368]	@ (80030fc <OTM8009A_Init+0x400>)
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f000 ffc1 	bl	8003f14 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 22,7kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8002f92:	495b      	ldr	r1, [pc, #364]	@ (8003100 <OTM8009A_Init+0x404>)
 8002f94:	2000      	movs	r0, #0
 8002f96:	f000 ffbd 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8002f9a:	495a      	ldr	r1, [pc, #360]	@ (8003104 <OTM8009A_Init+0x408>)
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f000 ffb9 	bl	8003f14 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002fa2:	491a      	ldr	r1, [pc, #104]	@ (800300c <OTM8009A_Init+0x310>)
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f000 ffb5 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8002faa:	4957      	ldr	r1, [pc, #348]	@ (8003108 <OTM8009A_Init+0x40c>)
 8002fac:	2003      	movs	r0, #3
 8002fae:	f000 ffb1 	bl	8003f14 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002fb2:	4916      	ldr	r1, [pc, #88]	@ (800300c <OTM8009A_Init+0x310>)
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	f000 ffad 	bl	8003f14 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002fba:	4914      	ldr	r1, [pc, #80]	@ (800300c <OTM8009A_Init+0x310>)
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f000 ffa9 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8002fc2:	4952      	ldr	r1, [pc, #328]	@ (800310c <OTM8009A_Init+0x410>)
 8002fc4:	2010      	movs	r0, #16
 8002fc6:	f000 ffa5 	bl	8003f14 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002fca:	4910      	ldr	r1, [pc, #64]	@ (800300c <OTM8009A_Init+0x310>)
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f000 ffa1 	bl	8003f14 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8002fd2:	494f      	ldr	r1, [pc, #316]	@ (8003110 <OTM8009A_Init+0x414>)
 8002fd4:	2010      	movs	r0, #16
 8002fd6:	f000 ff9d 	bl	8003f14 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8002fda:	494e      	ldr	r1, [pc, #312]	@ (8003114 <OTM8009A_Init+0x418>)
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f000 ff99 	bl	8003f14 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8002fe2:	2078      	movs	r0, #120	@ 0x78
 8002fe4:	f000 fa83 	bl	80034ee <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <OTM8009A_Init+0x304>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	f040 8095 	bne.w	8003120 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8002ff6:	4948      	ldr	r1, [pc, #288]	@ (8003118 <OTM8009A_Init+0x41c>)
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f000 ff8b 	bl	8003f14 <DSI_IO_WriteCmd>
    break;
 8002ffe:	e090      	b.n	8003122 <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8003000:	4946      	ldr	r1, [pc, #280]	@ (800311c <OTM8009A_Init+0x420>)
 8003002:	2000      	movs	r0, #0
 8003004:	f000 ff86 	bl	8003f14 <DSI_IO_WriteCmd>
    break;
 8003008:	e08b      	b.n	8003122 <OTM8009A_Init+0x426>
 800300a:	bf00      	nop
 800300c:	0800ff68 	.word	0x0800ff68
 8003010:	0800fe20 	.word	0x0800fe20
 8003014:	0800ff6c 	.word	0x0800ff6c
 8003018:	0800fe24 	.word	0x0800fe24
 800301c:	0800ff70 	.word	0x0800ff70
 8003020:	0800ff74 	.word	0x0800ff74
 8003024:	0800ff78 	.word	0x0800ff78
 8003028:	0800ff7c 	.word	0x0800ff7c
 800302c:	0800ff80 	.word	0x0800ff80
 8003030:	0800ff84 	.word	0x0800ff84
 8003034:	0800ff88 	.word	0x0800ff88
 8003038:	0800ff8c 	.word	0x0800ff8c
 800303c:	0800ff90 	.word	0x0800ff90
 8003040:	0800ff94 	.word	0x0800ff94
 8003044:	0800ff98 	.word	0x0800ff98
 8003048:	0800ff9c 	.word	0x0800ff9c
 800304c:	0800ffa0 	.word	0x0800ffa0
 8003050:	0800ffa4 	.word	0x0800ffa4
 8003054:	0800ffa8 	.word	0x0800ffa8
 8003058:	0800ffac 	.word	0x0800ffac
 800305c:	0800ffb0 	.word	0x0800ffb0
 8003060:	0800fe50 	.word	0x0800fe50
 8003064:	0800ffb4 	.word	0x0800ffb4
 8003068:	0800ffb8 	.word	0x0800ffb8
 800306c:	0800ffbc 	.word	0x0800ffbc
 8003070:	0800ffc0 	.word	0x0800ffc0
 8003074:	0800ffc4 	.word	0x0800ffc4
 8003078:	0800ffc8 	.word	0x0800ffc8
 800307c:	0800ffcc 	.word	0x0800ffcc
 8003080:	0800ffd0 	.word	0x0800ffd0
 8003084:	0800ffd4 	.word	0x0800ffd4
 8003088:	0800fe54 	.word	0x0800fe54
 800308c:	0800fe58 	.word	0x0800fe58
 8003090:	0800ffd8 	.word	0x0800ffd8
 8003094:	0800fe60 	.word	0x0800fe60
 8003098:	0800ffdc 	.word	0x0800ffdc
 800309c:	0800fe70 	.word	0x0800fe70
 80030a0:	0800ffe0 	.word	0x0800ffe0
 80030a4:	0800fe80 	.word	0x0800fe80
 80030a8:	0800ffe4 	.word	0x0800ffe4
 80030ac:	0801001c 	.word	0x0801001c
 80030b0:	0800fe8c 	.word	0x0800fe8c
 80030b4:	0800ffe8 	.word	0x0800ffe8
 80030b8:	0800fe98 	.word	0x0800fe98
 80030bc:	0800fea8 	.word	0x0800fea8
 80030c0:	0800feb8 	.word	0x0800feb8
 80030c4:	0800fec4 	.word	0x0800fec4
 80030c8:	0800fed4 	.word	0x0800fed4
 80030cc:	0800ffec 	.word	0x0800ffec
 80030d0:	0800fee4 	.word	0x0800fee4
 80030d4:	0800fff0 	.word	0x0800fff0
 80030d8:	0800fef0 	.word	0x0800fef0
 80030dc:	0800fefc 	.word	0x0800fefc
 80030e0:	0800ff08 	.word	0x0800ff08
 80030e4:	0800ff18 	.word	0x0800ff18
 80030e8:	0800ff28 	.word	0x0800ff28
 80030ec:	0800ff34 	.word	0x0800ff34
 80030f0:	0800ff44 	.word	0x0800ff44
 80030f4:	08010020 	.word	0x08010020
 80030f8:	08010024 	.word	0x08010024
 80030fc:	08010028 	.word	0x08010028
 8003100:	0801002c 	.word	0x0801002c
 8003104:	08010030 	.word	0x08010030
 8003108:	0800ff54 	.word	0x0800ff54
 800310c:	0800fe28 	.word	0x0800fe28
 8003110:	0800fe3c 	.word	0x0800fe3c
 8003114:	0800fff4 	.word	0x0800fff4
 8003118:	0800fff8 	.word	0x0800fff8
 800311c:	0800fffc 	.word	0x0800fffc
  default :
    break;
 8003120:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d10b      	bne.n	8003140 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8003128:	4916      	ldr	r1, [pc, #88]	@ (8003184 <OTM8009A_Init+0x488>)
 800312a:	2000      	movs	r0, #0
 800312c:	f000 fef2 	bl	8003f14 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8003130:	4915      	ldr	r1, [pc, #84]	@ (8003188 <OTM8009A_Init+0x48c>)
 8003132:	2004      	movs	r0, #4
 8003134:	f000 feee 	bl	8003f14 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8003138:	4914      	ldr	r1, [pc, #80]	@ (800318c <OTM8009A_Init+0x490>)
 800313a:	2004      	movs	r0, #4
 800313c:	f000 feea 	bl	8003f14 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8003140:	4913      	ldr	r1, [pc, #76]	@ (8003190 <OTM8009A_Init+0x494>)
 8003142:	2000      	movs	r0, #0
 8003144:	f000 fee6 	bl	8003f14 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8003148:	4912      	ldr	r1, [pc, #72]	@ (8003194 <OTM8009A_Init+0x498>)
 800314a:	2000      	movs	r0, #0
 800314c:	f000 fee2 	bl	8003f14 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8003150:	4911      	ldr	r1, [pc, #68]	@ (8003198 <OTM8009A_Init+0x49c>)
 8003152:	2000      	movs	r0, #0
 8003154:	f000 fede 	bl	8003f14 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8003158:	4910      	ldr	r1, [pc, #64]	@ (800319c <OTM8009A_Init+0x4a0>)
 800315a:	2000      	movs	r0, #0
 800315c:	f000 feda 	bl	8003f14 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8003160:	490f      	ldr	r1, [pc, #60]	@ (80031a0 <OTM8009A_Init+0x4a4>)
 8003162:	2000      	movs	r0, #0
 8003164:	f000 fed6 	bl	8003f14 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8003168:	490e      	ldr	r1, [pc, #56]	@ (80031a4 <OTM8009A_Init+0x4a8>)
 800316a:	2000      	movs	r0, #0
 800316c:	f000 fed2 	bl	8003f14 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8003170:	490d      	ldr	r1, [pc, #52]	@ (80031a8 <OTM8009A_Init+0x4ac>)
 8003172:	2000      	movs	r0, #0
 8003174:	f000 fece 	bl	8003f14 <DSI_IO_WriteCmd>

  return 0;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	08010000 	.word	0x08010000
 8003188:	0800ff58 	.word	0x0800ff58
 800318c:	0800ff60 	.word	0x0800ff60
 8003190:	08010004 	.word	0x08010004
 8003194:	08010008 	.word	0x08010008
 8003198:	0801000c 	.word	0x0801000c
 800319c:	08010010 	.word	0x08010010
 80031a0:	08010014 	.word	0x08010014
 80031a4:	0800ff68 	.word	0x0800ff68
 80031a8:	08010018 	.word	0x08010018

080031ac <OTM8009A_ReadID>:
/**
  * @brief  Read the component ID.
  * @retval Component ID
  */
uint16_t OTM8009A_ReadID(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
  uint8_t pData=0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	71fb      	strb	r3, [r7, #7]
  DSI_IO_ReadCmd(OTM8009A_CMD_ID1, &pData, 1);
 80031b6:	1dfb      	adds	r3, r7, #7
 80031b8:	2201      	movs	r2, #1
 80031ba:	4619      	mov	r1, r3
 80031bc:	20da      	movs	r0, #218	@ 0xda
 80031be:	f000 fed3 	bl	8003f68 <DSI_IO_ReadCmd>
  return pData;
 80031c2:	79fb      	ldrb	r3, [r7, #7]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <I2C1_MspInit>:
/******************************* I2C Routines *********************************/
/**
  * @brief  Initializes I2C MSP.
  */
static void I2C1_MspInit(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	607b      	str	r3, [r7, #4]
 80031d6:	4b40      	ldr	r3, [pc, #256]	@ (80032d8 <I2C1_MspInit+0x10c>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	4a3f      	ldr	r2, [pc, #252]	@ (80032d8 <I2C1_MspInit+0x10c>)
 80031dc:	f043 0302 	orr.w	r3, r3, #2
 80031e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031e2:	4b3d      	ldr	r3, [pc, #244]	@ (80032d8 <I2C1_MspInit+0x10c>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	607b      	str	r3, [r7, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]

#if defined(USE_STM32469I_DISCO_REVC)
  /* Perform 10 pulses on SCL to unlock I2C devices if previous I2C transaction aborted.*/
  /* This configuration is needed with STM32F469I Disco RevC when using touch screen controller FT6336U */
  gpio_init_structure.Pin = DISCO_I2C1_SCL_PIN;
 80031ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031f2:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_OD;
 80031f4:	2311      	movs	r3, #17
 80031f6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80031fc:	2302      	movs	r3, #2
 80031fe:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init( DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure );
 8003204:	f107 0308 	add.w	r3, r7, #8
 8003208:	4619      	mov	r1, r3
 800320a:	4834      	ldr	r0, [pc, #208]	@ (80032dc <I2C1_MspInit+0x110>)
 800320c:	f003 fa7c 	bl	8006708 <HAL_GPIO_Init>
  for(uint8_t count = 10; count > 0; count-- )
 8003210:	230a      	movs	r3, #10
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e014      	b.n	8003240 <I2C1_MspInit+0x74>
  {
    HAL_GPIO_WritePin( DISCO_I2C1_SCL_SDA_GPIO_PORT, DISCO_I2C1_SCL_PIN, GPIO_PIN_SET );
 8003216:	2201      	movs	r2, #1
 8003218:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800321c:	482f      	ldr	r0, [pc, #188]	@ (80032dc <I2C1_MspInit+0x110>)
 800321e:	f003 fd2b 	bl	8006c78 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8003222:	2001      	movs	r0, #1
 8003224:	f001 fc30 	bl	8004a88 <HAL_Delay>
    HAL_GPIO_WritePin( DISCO_I2C1_SCL_SDA_GPIO_PORT, DISCO_I2C1_SCL_PIN, GPIO_PIN_RESET );
 8003228:	2200      	movs	r2, #0
 800322a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800322e:	482b      	ldr	r0, [pc, #172]	@ (80032dc <I2C1_MspInit+0x110>)
 8003230:	f003 fd22 	bl	8006c78 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8003234:	2001      	movs	r0, #1
 8003236:	f001 fc27 	bl	8004a88 <HAL_Delay>
  for(uint8_t count = 10; count > 0; count-- )
 800323a:	7ffb      	ldrb	r3, [r7, #31]
 800323c:	3b01      	subs	r3, #1
 800323e:	77fb      	strb	r3, [r7, #31]
 8003240:	7ffb      	ldrb	r3, [r7, #31]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1e7      	bne.n	8003216 <I2C1_MspInit+0x4a>
  }
#endif /* USE_STM32469I_DISCO_REVC */

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCO_I2C1_SCL_PIN;
 8003246:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800324a:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800324c:	2312      	movs	r3, #18
 800324e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003250:	2300      	movs	r3, #0
 8003252:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003254:	2302      	movs	r3, #2
 8003256:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = DISCO_I2C1_SCL_SDA_AF;
 8003258:	2304      	movs	r3, #4
 800325a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800325c:	f107 0308 	add.w	r3, r7, #8
 8003260:	4619      	mov	r1, r3
 8003262:	481e      	ldr	r0, [pc, #120]	@ (80032dc <I2C1_MspInit+0x110>)
 8003264:	f003 fa50 	bl	8006708 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCO_I2C1_SDA_PIN;
 8003268:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800326c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800326e:	f107 0308 	add.w	r3, r7, #8
 8003272:	4619      	mov	r1, r3
 8003274:	4819      	ldr	r0, [pc, #100]	@ (80032dc <I2C1_MspInit+0x110>)
 8003276:	f003 fa47 	bl	8006708 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCO_I2C1_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	603b      	str	r3, [r7, #0]
 800327e:	4b16      	ldr	r3, [pc, #88]	@ (80032d8 <I2C1_MspInit+0x10c>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	4a15      	ldr	r2, [pc, #84]	@ (80032d8 <I2C1_MspInit+0x10c>)
 8003284:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003288:	6413      	str	r3, [r2, #64]	@ 0x40
 800328a:	4b13      	ldr	r3, [pc, #76]	@ (80032d8 <I2C1_MspInit+0x10c>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	683b      	ldr	r3, [r7, #0]

  /* Force the I2C peripheral clock reset */
  DISCO_I2C1_FORCE_RESET();
 8003296:	4b10      	ldr	r3, [pc, #64]	@ (80032d8 <I2C1_MspInit+0x10c>)
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	4a0f      	ldr	r2, [pc, #60]	@ (80032d8 <I2C1_MspInit+0x10c>)
 800329c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80032a0:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCO_I2C1_RELEASE_RESET();
 80032a2:	4b0d      	ldr	r3, [pc, #52]	@ (80032d8 <I2C1_MspInit+0x10c>)
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	4a0c      	ldr	r2, [pc, #48]	@ (80032d8 <I2C1_MspInit+0x10c>)
 80032a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80032ac:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCO_I2C1_EV_IRQn, 0x05, 0);
 80032ae:	2200      	movs	r2, #0
 80032b0:	2105      	movs	r1, #5
 80032b2:	201f      	movs	r0, #31
 80032b4:	f001 fce7 	bl	8004c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_EV_IRQn);
 80032b8:	201f      	movs	r0, #31
 80032ba:	f001 fd00 	bl	8004cbe <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCO_I2C1_ER_IRQn, 0x05, 0);
 80032be:	2200      	movs	r2, #0
 80032c0:	2105      	movs	r1, #5
 80032c2:	2020      	movs	r0, #32
 80032c4:	f001 fcdf 	bl	8004c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_ER_IRQn);
 80032c8:	2020      	movs	r0, #32
 80032ca:	f001 fcf8 	bl	8004cbe <HAL_NVIC_EnableIRQ>
}
 80032ce:	bf00      	nop
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40020400 	.word	0x40020400

080032e0 <I2C1_Init>:

/**
  * @brief  Initializes I2C HAL.
  */
static void I2C1_Init(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&heval_I2c1) == HAL_I2C_STATE_RESET)
 80032e4:	4814      	ldr	r0, [pc, #80]	@ (8003338 <I2C1_Init+0x58>)
 80032e6:	f004 f981 	bl	80075ec <HAL_I2C_GetState>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d120      	bne.n	8003332 <I2C1_Init+0x52>
  {
    heval_I2c1.Instance = I2C1;
 80032f0:	4b11      	ldr	r3, [pc, #68]	@ (8003338 <I2C1_Init+0x58>)
 80032f2:	4a12      	ldr	r2, [pc, #72]	@ (800333c <I2C1_Init+0x5c>)
 80032f4:	601a      	str	r2, [r3, #0]
    heval_I2c1.Init.ClockSpeed      = I2C1_SCL_FREQ_KHZ;
 80032f6:	4b10      	ldr	r3, [pc, #64]	@ (8003338 <I2C1_Init+0x58>)
 80032f8:	4a11      	ldr	r2, [pc, #68]	@ (8003340 <I2C1_Init+0x60>)
 80032fa:	605a      	str	r2, [r3, #4]
    heval_I2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 80032fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003338 <I2C1_Init+0x58>)
 80032fe:	2200      	movs	r2, #0
 8003300:	609a      	str	r2, [r3, #8]
    heval_I2c1.Init.OwnAddress1     = 0;
 8003302:	4b0d      	ldr	r3, [pc, #52]	@ (8003338 <I2C1_Init+0x58>)
 8003304:	2200      	movs	r2, #0
 8003306:	60da      	str	r2, [r3, #12]
    heval_I2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8003308:	4b0b      	ldr	r3, [pc, #44]	@ (8003338 <I2C1_Init+0x58>)
 800330a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800330e:	611a      	str	r2, [r3, #16]
    heval_I2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003310:	4b09      	ldr	r3, [pc, #36]	@ (8003338 <I2C1_Init+0x58>)
 8003312:	2200      	movs	r2, #0
 8003314:	615a      	str	r2, [r3, #20]
    heval_I2c1.Init.OwnAddress2     = 0;
 8003316:	4b08      	ldr	r3, [pc, #32]	@ (8003338 <I2C1_Init+0x58>)
 8003318:	2200      	movs	r2, #0
 800331a:	619a      	str	r2, [r3, #24]
    heval_I2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800331c:	4b06      	ldr	r3, [pc, #24]	@ (8003338 <I2C1_Init+0x58>)
 800331e:	2200      	movs	r2, #0
 8003320:	61da      	str	r2, [r3, #28]
    heval_I2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8003322:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <I2C1_Init+0x58>)
 8003324:	2200      	movs	r2, #0
 8003326:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C1_MspInit();
 8003328:	f7ff ff50 	bl	80031cc <I2C1_MspInit>
    HAL_I2C_Init(&heval_I2c1);
 800332c:	4802      	ldr	r0, [pc, #8]	@ (8003338 <I2C1_Init+0x58>)
 800332e:	f003 fcbd 	bl	8006cac <HAL_I2C_Init>
  }
}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20007f34 	.word	0x20007f34
 800333c:	40005400 	.word	0x40005400
 8003340:	00061a80 	.word	0x00061a80

08003344 <I2C1_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
static void I2C1_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af04      	add	r7, sp, #16
 800334a:	4603      	mov	r3, r0
 800334c:	71fb      	strb	r3, [r7, #7]
 800334e:	460b      	mov	r3, r1
 8003350:	71bb      	strb	r3, [r7, #6]
 8003352:	4613      	mov	r3, r2
 8003354:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&heval_I2c1,
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	b299      	uxth	r1, r3
 800335e:	79bb      	ldrb	r3, [r7, #6]
 8003360:	b29a      	uxth	r2, r3
 8003362:	2364      	movs	r3, #100	@ 0x64
 8003364:	9302      	str	r3, [sp, #8]
 8003366:	2301      	movs	r3, #1
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	1d7b      	adds	r3, r7, #5
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	2301      	movs	r3, #1
 8003370:	4807      	ldr	r0, [pc, #28]	@ (8003390 <I2C1_Write+0x4c>)
 8003372:	f003 fe0f 	bl	8006f94 <HAL_I2C_Mem_Write>
 8003376:	4603      	mov	r3, r0
 8003378:	73fb      	strb	r3, [r7, #15]
                         &Value,
                         1,
                         100);

  /* Check the communication status */
  if(status != HAL_OK)
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <I2C1_Write+0x44>
  {
    /* Execute user timeout callback */
    I2C1_Error(Addr);
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f85e 	bl	8003444 <I2C1_Error>
  }
}
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20007f34 	.word	0x20007f34

08003394 <I2C1_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
static uint8_t I2C1_Read(uint8_t Addr, uint8_t Reg)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af04      	add	r7, sp, #16
 800339a:	4603      	mov	r3, r0
 800339c:	460a      	mov	r2, r1
 800339e:	71fb      	strb	r3, [r7, #7]
 80033a0:	4613      	mov	r3, r2
 80033a2:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	73fb      	strb	r3, [r7, #15]
  uint8_t Value = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&heval_I2c1,
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	b299      	uxth	r1, r3
 80033b0:	79bb      	ldrb	r3, [r7, #6]
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033b8:	9302      	str	r3, [sp, #8]
 80033ba:	2301      	movs	r3, #1
 80033bc:	9301      	str	r3, [sp, #4]
 80033be:	f107 030e 	add.w	r3, r7, #14
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	2301      	movs	r3, #1
 80033c6:	4808      	ldr	r0, [pc, #32]	@ (80033e8 <I2C1_Read+0x54>)
 80033c8:	f003 fede 	bl	8007188 <HAL_I2C_Mem_Read>
 80033cc:	4603      	mov	r3, r0
 80033ce:	73fb      	strb	r3, [r7, #15]
                        &Value,
                        1,
                        1000);

  /* Check the communication status */
  if(status != HAL_OK)
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <I2C1_Read+0x4a>
  {
    /* Execute user timeout callback */
    I2C1_Error(Addr);
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 f833 	bl	8003444 <I2C1_Error>
  }
  return Value;
 80033de:	7bbb      	ldrb	r3, [r7, #14]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20007f34 	.word	0x20007f34

080033ec <I2C1_ReadMultiple>:
static HAL_StatusTypeDef I2C1_ReadMultiple(uint8_t Addr,
                                       uint16_t Reg,
                                       uint16_t MemAddress,
                                       uint8_t *Buffer,
                                       uint16_t Length)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	@ 0x28
 80033f0:	af04      	add	r7, sp, #16
 80033f2:	607b      	str	r3, [r7, #4]
 80033f4:	4603      	mov	r3, r0
 80033f6:	73fb      	strb	r3, [r7, #15]
 80033f8:	460b      	mov	r3, r1
 80033fa:	81bb      	strh	r3, [r7, #12]
 80033fc:	4613      	mov	r3, r2
 80033fe:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(&heval_I2c1,
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	b299      	uxth	r1, r3
 8003408:	8978      	ldrh	r0, [r7, #10]
 800340a:	89ba      	ldrh	r2, [r7, #12]
 800340c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003410:	9302      	str	r3, [sp, #8]
 8003412:	8c3b      	ldrh	r3, [r7, #32]
 8003414:	9301      	str	r3, [sp, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	4603      	mov	r3, r0
 800341c:	4808      	ldr	r0, [pc, #32]	@ (8003440 <I2C1_ReadMultiple+0x54>)
 800341e:	f003 feb3 	bl	8007188 <HAL_I2C_Mem_Read>
 8003422:	4603      	mov	r3, r0
 8003424:	75fb      	strb	r3, [r7, #23]
                        Buffer,
                        Length,
                        1000);

  /* Check the communication status */
  if(status != HAL_OK)
 8003426:	7dfb      	ldrb	r3, [r7, #23]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <I2C1_ReadMultiple+0x48>
  {
    /* I2C error occurred */
    I2C1_Error(Addr);
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	4618      	mov	r0, r3
 8003430:	f000 f808 	bl	8003444 <I2C1_Error>
  }
  return status;
 8003434:	7dfb      	ldrb	r3, [r7, #23]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20007f34 	.word	0x20007f34

08003444 <I2C1_Error>:
/**
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address
  */
static void I2C1_Error(uint8_t Addr)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	71fb      	strb	r3, [r7, #7]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(&heval_I2c1);
 800344e:	4804      	ldr	r0, [pc, #16]	@ (8003460 <I2C1_Error+0x1c>)
 8003450:	f003 fd70 	bl	8006f34 <HAL_I2C_DeInit>

  /* Re-Initiaize the I2C communication bus */
  I2C1_Init();
 8003454:	f7ff ff44 	bl	80032e0 <I2C1_Init>
}
 8003458:	bf00      	nop
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	20007f34 	.word	0x20007f34

08003464 <TS_IO_Init>:
/**
  * @brief  Initialize I2C communication
  *         channel from MCU to TouchScreen (TS).
  */
void TS_IO_Init(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  I2C1_Init();
 8003468:	f7ff ff3a 	bl	80032e0 <I2C1_Init>
}
 800346c:	bf00      	nop
 800346e:	bd80      	pop	{r7, pc}

08003470 <TS_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	71fb      	strb	r3, [r7, #7]
 800347a:	460b      	mov	r3, r1
 800347c:	71bb      	strb	r3, [r7, #6]
 800347e:	4613      	mov	r3, r2
 8003480:	717b      	strb	r3, [r7, #5]
  I2C1_Write(Addr, Reg, Value);
 8003482:	797a      	ldrb	r2, [r7, #5]
 8003484:	79b9      	ldrb	r1, [r7, #6]
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff5b 	bl	8003344 <I2C1_Write>
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	4603      	mov	r3, r0
 800349e:	460a      	mov	r2, r1
 80034a0:	71fb      	strb	r3, [r7, #7]
 80034a2:	4613      	mov	r3, r2
 80034a4:	71bb      	strb	r3, [r7, #6]
  return I2C1_Read(Addr, Reg);
 80034a6:	79ba      	ldrb	r2, [r7, #6]
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	4611      	mov	r1, r2
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff71 	bl	8003394 <I2C1_Read>
 80034b2:	4603      	mov	r3, r0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af02      	add	r7, sp, #8
 80034c2:	603a      	str	r2, [r7, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	4603      	mov	r3, r0
 80034c8:	71fb      	strb	r3, [r7, #7]
 80034ca:	460b      	mov	r3, r1
 80034cc:	71bb      	strb	r3, [r7, #6]
 80034ce:	4613      	mov	r3, r2
 80034d0:	80bb      	strh	r3, [r7, #4]
 return I2C1_ReadMultiple(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80034d2:	79bb      	ldrb	r3, [r7, #6]
 80034d4:	b299      	uxth	r1, r3
 80034d6:	79f8      	ldrb	r0, [r7, #7]
 80034d8:	88bb      	ldrh	r3, [r7, #4]
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2201      	movs	r2, #1
 80034e0:	f7ff ff84 	bl	80033ec <I2C1_ReadMultiple>
 80034e4:	4603      	mov	r3, r0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f001 fac6 	bl	8004a88 <HAL_Delay>
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay: Delay in ms
  */
void NT35510_IO_Delay(uint32_t Delay)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f001 fabb 	bl	8004a88 <HAL_Delay>
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 800351e:	2001      	movs	r0, #1
 8003520:	f000 f804 	bl	800352c <BSP_LCD_InitEx>
 8003524:	4603      	mov	r3, r0
}
 8003526:	4618      	mov	r0, r3
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <BSP_LCD_InitEx>:
  *     - LTDC ititialization
  *     - OTM8009A LCD Display IC Driver ititialization
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b096      	sub	sp, #88	@ 0x58
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  DSI_PHY_TimerTypeDef  PhyTimings;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8003536:	f646 3325 	movw	r3, #27429	@ 0x6b25
 800353a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  uint32_t laneByteClk_kHz = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */
  
  
  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8003540:	f000 f980 	bl	8003844 <BSP_LCD_Reset>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8003544:	f000 fd30 	bl	8003fa8 <BSP_LCD_MspInit>
  
/*************************DSI Initialization***********************************/  
  
  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_eval.Instance = DSI;
 8003548:	4b2f      	ldr	r3, [pc, #188]	@ (8003608 <BSP_LCD_InitEx+0xdc>)
 800354a:	4a30      	ldr	r2, [pc, #192]	@ (800360c <BSP_LCD_InitEx+0xe0>)
 800354c:	601a      	str	r2, [r3, #0]
  
  HAL_DSI_DeInit(&(hdsi_eval));
 800354e:	482e      	ldr	r0, [pc, #184]	@ (8003608 <BSP_LCD_InitEx+0xdc>)
 8003550:	f002 f9fe 	bl	8005950 <HAL_DSI_DeInit>
  
#if !defined(USE_STM32469I_DISCO_REVA)
  dsiPllInit.PLLNDIV  = 125;
 8003554:	237d      	movs	r3, #125	@ 0x7d
 8003556:	627b      	str	r3, [r7, #36]	@ 0x24
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV2;
 8003558:	2302      	movs	r3, #2
 800355a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
 800355c:	2300      	movs	r3, #0
 800355e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#else  
  dsiPllInit.PLLNDIV  = 100;
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
#endif
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8003560:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003564:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  /* Set number of Lanes */
  hdsi_eval.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8003566:	4b28      	ldr	r3, [pc, #160]	@ (8003608 <BSP_LCD_InitEx+0xdc>)
 8003568:	2201      	movs	r2, #1
 800356a:	60da      	str	r2, [r3, #12]
  
  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_eval.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 800356c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	4a27      	ldr	r2, [pc, #156]	@ (8003610 <BSP_LCD_InitEx+0xe4>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	0a9b      	lsrs	r3, r3, #10
 8003578:	4a23      	ldr	r2, [pc, #140]	@ (8003608 <BSP_LCD_InitEx+0xdc>)
 800357a:	6093      	str	r3, [r2, #8]
  
  HAL_DSI_Init(&(hdsi_eval), &(dsiPllInit));
 800357c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003580:	4619      	mov	r1, r3
 8003582:	4821      	ldr	r0, [pc, #132]	@ (8003608 <BSP_LCD_InitEx+0xdc>)
 8003584:	f002 f864 	bl	8005650 <HAL_DSI_Init>

  /* Start DSI */
  HAL_DSI_Start(&hdsi_eval);
 8003588:	481f      	ldr	r0, [pc, #124]	@ (8003608 <BSP_LCD_InitEx+0xdc>)
 800358a:	f002 fe9a 	bl	80062c2 <HAL_DSI_Start>
  /* Enable the DSI BTW for read operations */
  HAL_DSI_ConfigFlowControl(&hdsi_eval, DSI_FLOW_CONTROL_BTA);
 800358e:	2104      	movs	r1, #4
 8003590:	481d      	ldr	r0, [pc, #116]	@ (8003608 <BSP_LCD_InitEx+0xdc>)
 8003592:	f002 fd3e 	bl	8006012 <HAL_DSI_ConfigFlowControl>
  Lcd_Driver_Type = LCD_ReadType(Lcd_Driver_Type);
 8003596:	4b1f      	ldr	r3, [pc, #124]	@ (8003614 <BSP_LCD_InitEx+0xe8>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fe8a 	bl	80042b4 <LCD_ReadType>
 80035a0:	4603      	mov	r3, r0
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003614 <BSP_LCD_InitEx+0xe8>)
 80035a6:	701a      	strb	r2, [r3, #0]

  BSP_LCD_Reset();
 80035a8:	f000 f94c 	bl	8003844 <BSP_LCD_Reset>
  HAL_DSI_Stop(&hdsi_eval);
 80035ac:	4816      	ldr	r0, [pc, #88]	@ (8003608 <BSP_LCD_InitEx+0xdc>)
 80035ae:	f002 fec4 	bl	800633a <HAL_DSI_Stop>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d108      	bne.n	80035ca <BSP_LCD_InitEx+0x9e>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 80035b8:	4b17      	ldr	r3, [pc, #92]	@ (8003618 <BSP_LCD_InitEx+0xec>)
 80035ba:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80035be:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 80035c0:	4b16      	ldr	r3, [pc, #88]	@ (800361c <BSP_LCD_InitEx+0xf0>)
 80035c2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e007      	b.n	80035da <BSP_LCD_InitEx+0xae>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 80035ca:	4b13      	ldr	r3, [pc, #76]	@ (8003618 <BSP_LCD_InitEx+0xec>)
 80035cc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80035d0:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 80035d2:	4b12      	ldr	r3, [pc, #72]	@ (800361c <BSP_LCD_InitEx+0xf0>)
 80035d4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80035d8:	601a      	str	r2, [r3, #0]
  }
  
  HACT = lcd_x_size;
 80035da:	4b0f      	ldr	r3, [pc, #60]	@ (8003618 <BSP_LCD_InitEx+0xec>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	637b      	str	r3, [r7, #52]	@ 0x34
  VACT = lcd_y_size;
 80035e0:	4b0e      	ldr	r3, [pc, #56]	@ (800361c <BSP_LCD_InitEx+0xf0>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	633b      	str	r3, [r7, #48]	@ 0x30
  
  /* The following values are same for portrait and landscape orientations */
  if (Lcd_Driver_Type == LCD_CTRL_NT35510)
 80035e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003614 <BSP_LCD_InitEx+0xe8>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d118      	bne.n	8003620 <BSP_LCD_InitEx+0xf4>
  {
    VSA  = NT35510_480X800_VSYNC;
 80035ee:	2378      	movs	r3, #120	@ 0x78
 80035f0:	657b      	str	r3, [r7, #84]	@ 0x54
    VBP  = NT35510_480X800_VBP;
 80035f2:	2396      	movs	r3, #150	@ 0x96
 80035f4:	653b      	str	r3, [r7, #80]	@ 0x50
    VFP  = NT35510_480X800_VFP;
 80035f6:	2396      	movs	r3, #150	@ 0x96
 80035f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HSA  = NT35510_480X800_HSYNC;
 80035fa:	2302      	movs	r3, #2
 80035fc:	64bb      	str	r3, [r7, #72]	@ 0x48
    HBP  = NT35510_480X800_HBP;
 80035fe:	2322      	movs	r3, #34	@ 0x22
 8003600:	647b      	str	r3, [r7, #68]	@ 0x44
    HFP  = NT35510_480X800_HFP;
 8003602:	2322      	movs	r3, #34	@ 0x22
 8003604:	643b      	str	r3, [r7, #64]	@ 0x40
 8003606:	e017      	b.n	8003638 <BSP_LCD_InitEx+0x10c>
 8003608:	200080dc 	.word	0x200080dc
 800360c:	40016c00 	.word	0x40016c00
 8003610:	43215e57 	.word	0x43215e57
 8003614:	200080f8 	.word	0x200080f8
 8003618:	20000034 	.word	0x20000034
 800361c:	20000038 	.word	0x20000038
  }
  else
  {
    VSA  = OTM8009A_480X800_VSYNC;
 8003620:	2301      	movs	r3, #1
 8003622:	657b      	str	r3, [r7, #84]	@ 0x54
    VBP  = OTM8009A_480X800_VBP;
 8003624:	230f      	movs	r3, #15
 8003626:	653b      	str	r3, [r7, #80]	@ 0x50
    VFP  = OTM8009A_480X800_VFP;
 8003628:	2310      	movs	r3, #16
 800362a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HSA  = OTM8009A_480X800_HSYNC;
 800362c:	2302      	movs	r3, #2
 800362e:	64bb      	str	r3, [r7, #72]	@ 0x48
    HBP  = OTM8009A_480X800_HBP;
 8003630:	2322      	movs	r3, #34	@ 0x22
 8003632:	647b      	str	r3, [r7, #68]	@ 0x44
    HFP  = OTM8009A_480X800_HFP;
 8003634:	2322      	movs	r3, #34	@ 0x22
 8003636:	643b      	str	r3, [r7, #64]	@ 0x40
  }

  hdsivideo_handle.VirtualChannelID = LCD_Driver_ID;
 8003638:	4b79      	ldr	r3, [pc, #484]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 800363e:	4b78      	ldr	r3, [pc, #480]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 8003640:	2205      	movs	r2, #5
 8003642:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8003644:	4b76      	ldr	r3, [pc, #472]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 8003646:	2200      	movs	r2, #0
 8003648:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800364a:	4b75      	ldr	r3, [pc, #468]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 800364c:	2200      	movs	r2, #0
 800364e:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8003650:	4b73      	ldr	r3, [pc, #460]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 8003652:	2200      	movs	r2, #0
 8003654:	625a      	str	r2, [r3, #36]	@ 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8003656:	4b72      	ldr	r3, [pc, #456]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 8003658:	2202      	movs	r2, #2
 800365a:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 800365c:	4b70      	ldr	r3, [pc, #448]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 800365e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8003662:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8003664:	4b6e      	ldr	r3, [pc, #440]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 8003666:	2200      	movs	r2, #0
 8003668:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 800366a:	4a6d      	ldr	r2, [pc, #436]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 800366c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366e:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz) / LcdClock;
 8003670:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003672:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003674:	fb03 f202 	mul.w	r2, r3, r2
 8003678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800367a:	fbb2 f3f3 	udiv	r3, r2, r3
 800367e:	4a68      	ldr	r2, [pc, #416]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 8003680:	6293      	str	r3, [r2, #40]	@ 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz) / LcdClock;
 8003682:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003684:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003686:	fb03 f202 	mul.w	r2, r3, r2
 800368a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800368c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003690:	4a63      	ldr	r2, [pc, #396]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 8003692:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz) / LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8003694:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003698:	441a      	add	r2, r3
 800369a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800369c:	441a      	add	r2, r3
 800369e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036a0:	4413      	add	r3, r2
 80036a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036a4:	fb03 f202 	mul.w	r2, r3, r2
 80036a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ae:	4a5c      	ldr	r2, [pc, #368]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 80036b0:	6313      	str	r3, [r2, #48]	@ 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 80036b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 80036b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036b6:	6353      	str	r3, [r2, #52]	@ 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 80036b8:	4a59      	ldr	r2, [pc, #356]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 80036ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036bc:	6393      	str	r3, [r2, #56]	@ 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 80036be:	4a58      	ldr	r2, [pc, #352]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 80036c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036c2:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 80036c4:	4a56      	ldr	r2, [pc, #344]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 80036c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c8:	6413      	str	r3, [r2, #64]	@ 0x40
  
  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 80036ca:	4b55      	ldr	r3, [pc, #340]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 80036cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80036d0:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 80036d2:	4b53      	ldr	r3, [pc, #332]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 80036d4:	2210      	movs	r2, #16
 80036d6:	649a      	str	r2, [r3, #72]	@ 0x48
  
  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 80036d8:	4b51      	ldr	r3, [pc, #324]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 80036da:	2200      	movs	r2, #0
 80036dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  
  
  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 80036de:	4b50      	ldr	r3, [pc, #320]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 80036e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036e4:	651a      	str	r2, [r3, #80]	@ 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 80036e6:	4b4e      	ldr	r3, [pc, #312]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 80036e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80036ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 80036ee:	4b4c      	ldr	r3, [pc, #304]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 80036f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036f4:	659a      	str	r2, [r3, #88]	@ 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 80036f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 80036f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 80036fe:	4b48      	ldr	r3, [pc, #288]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 8003700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003704:	661a      	str	r2, [r3, #96]	@ 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8003706:	4b46      	ldr	r3, [pc, #280]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 8003708:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800370c:	665a      	str	r2, [r3, #100]	@ 0x64
  
  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_eval), &(hdsivideo_handle));
 800370e:	4944      	ldr	r1, [pc, #272]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 8003710:	4844      	ldr	r0, [pc, #272]	@ (8003824 <BSP_LCD_InitEx+0x2f8>)
 8003712:	f002 fa76 	bl	8005c02 <HAL_DSI_ConfigVideoMode>

  /* Configure DSI PHY HS2LP and LP2HS timings */
  PhyTimings.ClockLaneHS2LPTime = 35;
 8003716:	2323      	movs	r3, #35	@ 0x23
 8003718:	60fb      	str	r3, [r7, #12]
  PhyTimings.ClockLaneLP2HSTime = 35;
 800371a:	2323      	movs	r3, #35	@ 0x23
 800371c:	613b      	str	r3, [r7, #16]
  PhyTimings.DataLaneHS2LPTime = 35;
 800371e:	2323      	movs	r3, #35	@ 0x23
 8003720:	617b      	str	r3, [r7, #20]
  PhyTimings.DataLaneLP2HSTime = 35;
 8003722:	2323      	movs	r3, #35	@ 0x23
 8003724:	61bb      	str	r3, [r7, #24]
  PhyTimings.DataLaneMaxReadTime = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
  PhyTimings.StopWaitTime = 10;
 800372a:	230a      	movs	r3, #10
 800372c:	623b      	str	r3, [r7, #32]
  HAL_DSI_ConfigPhyTimer(&hdsi_eval, &PhyTimings);
 800372e:	f107 030c 	add.w	r3, r7, #12
 8003732:	4619      	mov	r1, r3
 8003734:	483b      	ldr	r0, [pc, #236]	@ (8003824 <BSP_LCD_InitEx+0x2f8>)
 8003736:	f002 fc94 	bl	8006062 <HAL_DSI_ConfigPhyTimer>


/************************LTDC Initialization***********************************/  
  
  /* Timing Configuration */    
  hltdc_eval.Init.HorizontalSync = (HSA - 1);
 800373a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800373c:	3b01      	subs	r3, #1
 800373e:	4a3a      	ldr	r2, [pc, #232]	@ (8003828 <BSP_LCD_InitEx+0x2fc>)
 8003740:	6153      	str	r3, [r2, #20]
  hltdc_eval.Init.AccumulatedHBP = (HSA + HBP - 1);
 8003742:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003746:	4413      	add	r3, r2
 8003748:	3b01      	subs	r3, #1
 800374a:	4a37      	ldr	r2, [pc, #220]	@ (8003828 <BSP_LCD_InitEx+0x2fc>)
 800374c:	61d3      	str	r3, [r2, #28]
  hltdc_eval.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800374e:	4b37      	ldr	r3, [pc, #220]	@ (800382c <BSP_LCD_InitEx+0x300>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003754:	441a      	add	r2, r3
 8003756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003758:	4413      	add	r3, r2
 800375a:	3b01      	subs	r3, #1
 800375c:	4a32      	ldr	r2, [pc, #200]	@ (8003828 <BSP_LCD_InitEx+0x2fc>)
 800375e:	6253      	str	r3, [r2, #36]	@ 0x24
  hltdc_eval.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8003760:	4b32      	ldr	r3, [pc, #200]	@ (800382c <BSP_LCD_InitEx+0x300>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003766:	441a      	add	r2, r3
 8003768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800376a:	441a      	add	r2, r3
 800376c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800376e:	4413      	add	r3, r2
 8003770:	3b01      	subs	r3, #1
 8003772:	4a2d      	ldr	r2, [pc, #180]	@ (8003828 <BSP_LCD_InitEx+0x2fc>)
 8003774:	62d3      	str	r3, [r2, #44]	@ 0x2c
  
  /* Initialize the LCD pixel width and pixel height */
  hltdc_eval.LayerCfg->ImageWidth  = lcd_x_size;
 8003776:	4b2d      	ldr	r3, [pc, #180]	@ (800382c <BSP_LCD_InitEx+0x300>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a2b      	ldr	r2, [pc, #172]	@ (8003828 <BSP_LCD_InitEx+0x2fc>)
 800377c:	6613      	str	r3, [r2, #96]	@ 0x60
  hltdc_eval.LayerCfg->ImageHeight = lcd_y_size;   
 800377e:	4b2c      	ldr	r3, [pc, #176]	@ (8003830 <BSP_LCD_InitEx+0x304>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a29      	ldr	r2, [pc, #164]	@ (8003828 <BSP_LCD_InitEx+0x2fc>)
 8003784:	6653      	str	r3, [r2, #100]	@ 0x64
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.857 MHz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.857 MHz / 2 = 27.429 MHz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003786:	4b2b      	ldr	r3, [pc, #172]	@ (8003834 <BSP_LCD_InitEx+0x308>)
 8003788:	2208      	movs	r2, #8
 800378a:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800378c:	4b29      	ldr	r3, [pc, #164]	@ (8003834 <BSP_LCD_InitEx+0x308>)
 800378e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8003792:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8003794:	4b27      	ldr	r3, [pc, #156]	@ (8003834 <BSP_LCD_InitEx+0x308>)
 8003796:	2207      	movs	r2, #7
 8003798:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800379a:	4b26      	ldr	r3, [pc, #152]	@ (8003834 <BSP_LCD_InitEx+0x308>)
 800379c:	2200      	movs	r2, #0
 800379e:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80037a0:	4824      	ldr	r0, [pc, #144]	@ (8003834 <BSP_LCD_InitEx+0x308>)
 80037a2:	f004 ffdf 	bl	8008764 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Background value */
  hltdc_eval.Init.Backcolor.Blue = 0;
 80037a6:	4b20      	ldr	r3, [pc, #128]	@ (8003828 <BSP_LCD_InitEx+0x2fc>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc_eval.Init.Backcolor.Green = 0;
 80037ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003828 <BSP_LCD_InitEx+0x2fc>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc_eval.Init.Backcolor.Red = 0;
 80037b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003828 <BSP_LCD_InitEx+0x2fc>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  hltdc_eval.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80037be:	4b1a      	ldr	r3, [pc, #104]	@ (8003828 <BSP_LCD_InitEx+0x2fc>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	611a      	str	r2, [r3, #16]
  hltdc_eval.Instance = LTDC;
 80037c4:	4b18      	ldr	r3, [pc, #96]	@ (8003828 <BSP_LCD_InitEx+0x2fc>)
 80037c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003838 <BSP_LCD_InitEx+0x30c>)
 80037c8:	601a      	str	r2, [r3, #0]
  
  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDCEx_StructInitFromVideoConfig(&(hltdc_eval), &(hdsivideo_handle));
 80037ca:	4915      	ldr	r1, [pc, #84]	@ (8003820 <BSP_LCD_InitEx+0x2f4>)
 80037cc:	4816      	ldr	r0, [pc, #88]	@ (8003828 <BSP_LCD_InitEx+0x2fc>)
 80037ce:	f004 fd1d 	bl	800820c <HAL_LTDCEx_StructInitFromVideoConfig>
  
  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_eval);
 80037d2:	4815      	ldr	r0, [pc, #84]	@ (8003828 <BSP_LCD_InitEx+0x2fc>)
 80037d4:	f004 facc 	bl	8007d70 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&(hdsi_eval));
 80037d8:	4812      	ldr	r0, [pc, #72]	@ (8003824 <BSP_LCD_InitEx+0x2f8>)
 80037da:	f002 fd72 	bl	80062c2 <HAL_DSI_Start>
  
#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80037de:	f000 fd89 	bl	80042f4 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */
  
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80037e2:	4816      	ldr	r0, [pc, #88]	@ (800383c <BSP_LCD_InitEx+0x310>)
 80037e4:	f000 f928 	bl	8003a38 <BSP_LCD_SetFont>
  /************************End LTDC Initialization*******************************/

  /* Checking the ID to determine the type of component */
  if (Lcd_Driver_Type == LCD_CTRL_NT35510)
 80037e8:	4b15      	ldr	r3, [pc, #84]	@ (8003840 <BSP_LCD_InitEx+0x314>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d105      	bne.n	80037fc <BSP_LCD_InitEx+0x2d0>
  {
    /***********************NT35510 Initialization********************************/  
    /* Initialize the NT35510 LCD Display IC Driver (TechShine LCD IC Driver)
    * depending on configuration set in 'hdsivideo_handle'.
    */
    NT35510_Init(NT35510_FORMAT_RGB888, orientation);
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	4619      	mov	r1, r3
 80037f4:	2000      	movs	r0, #0
 80037f6:	f7ff f879 	bl	80028ec <NT35510_Init>
 80037fa:	e00b      	b.n	8003814 <BSP_LCD_InitEx+0x2e8>
    /***********************End NT35510 Initialization****************************/
  }
  else if (Lcd_Driver_Type == LCD_CTRL_OTM8009A)
 80037fc:	4b10      	ldr	r3, [pc, #64]	@ (8003840 <BSP_LCD_InitEx+0x314>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d105      	bne.n	8003810 <BSP_LCD_InitEx+0x2e4>
  {
    /***********************OTM8009A Initialization********************************/  
    /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
    *  depending on configuration set in 'hdsivideo_handle'.
    */
    OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	4619      	mov	r1, r3
 8003808:	2000      	movs	r0, #0
 800380a:	f7ff fa77 	bl	8002cfc <OTM8009A_Init>
 800380e:	e001      	b.n	8003814 <BSP_LCD_InitEx+0x2e8>
    /***********************End OTM8009A Initialization****************************/ 
  }
  else
  {
    return LCD_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <BSP_LCD_InitEx+0x2ea>
  }

  return LCD_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3758      	adds	r7, #88	@ 0x58
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20007f88 	.word	0x20007f88
 8003824:	200080dc 	.word	0x200080dc
 8003828:	20008034 	.word	0x20008034
 800382c:	20000034 	.word	0x20000034
 8003830:	20000038 	.word	0x20000038
 8003834:	20008118 	.word	0x20008118
 8003838:	40016800 	.word	0x40016800
 800383c:	2000002c 	.word	0x2000002c
 8003840:	200080f8 	.word	0x200080f8

08003844 <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  *         This signal is only cabled on Discovery Rev B and beyond.
  */
void BSP_LCD_Reset(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
#if !defined(USE_STM32469I_DISCO_REVA)
  /* Disco Rev B and beyond : reset the LCD by activation of XRES (active low) connected to PH7 */
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOH_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	603b      	str	r3, [r7, #0]
 800384e:	4b1a      	ldr	r3, [pc, #104]	@ (80038b8 <BSP_LCD_Reset+0x74>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003852:	4a19      	ldr	r2, [pc, #100]	@ (80038b8 <BSP_LCD_Reset+0x74>)
 8003854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003858:	6313      	str	r3, [r2, #48]	@ 0x30
 800385a:	4b17      	ldr	r3, [pc, #92]	@ (80038b8 <BSP_LCD_Reset+0x74>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	683b      	ldr	r3, [r7, #0]

  /* Configure the GPIO on PH7 */
  gpio_init_structure.Pin   = GPIO_PIN_7;
 8003866:	2380      	movs	r3, #128	@ 0x80
 8003868:	607b      	str	r3, [r7, #4]
  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 800386a:	4b14      	ldr	r3, [pc, #80]	@ (80038bc <BSP_LCD_Reset+0x78>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d102      	bne.n	8003878 <BSP_LCD_Reset+0x34>
  {
    /* Push Pull Mode is required for TechShine LCD (NT35510) */
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003872:	2301      	movs	r3, #1
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	e001      	b.n	800387c <BSP_LCD_Reset+0x38>
  }
  else
  {
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_OD;
 8003878:	2311      	movs	r3, #17
 800387a:	60bb      	str	r3, [r7, #8]
  }
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003880:	2303      	movs	r3, #3
 8003882:	613b      	str	r3, [r7, #16]

  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8003884:	1d3b      	adds	r3, r7, #4
 8003886:	4619      	mov	r1, r3
 8003888:	480d      	ldr	r0, [pc, #52]	@ (80038c0 <BSP_LCD_Reset+0x7c>)
 800388a:	f002 ff3d 	bl	8006708 <HAL_GPIO_Init>

  /* Activate XRES active low */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 800388e:	2200      	movs	r2, #0
 8003890:	2180      	movs	r1, #128	@ 0x80
 8003892:	480b      	ldr	r0, [pc, #44]	@ (80038c0 <BSP_LCD_Reset+0x7c>)
 8003894:	f003 f9f0 	bl	8006c78 <HAL_GPIO_WritePin>

  HAL_Delay(20); /* wait 20 ms */
 8003898:	2014      	movs	r0, #20
 800389a:	f001 f8f5 	bl	8004a88 <HAL_Delay>

  /* Deactivate XRES */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 800389e:	2201      	movs	r2, #1
 80038a0:	2180      	movs	r1, #128	@ 0x80
 80038a2:	4807      	ldr	r0, [pc, #28]	@ (80038c0 <BSP_LCD_Reset+0x7c>)
 80038a4:	f003 f9e8 	bl	8006c78 <HAL_GPIO_WritePin>

  /* Wait for 20ms after releasing XRES before sending commands */
  HAL_Delay(20);
 80038a8:	2014      	movs	r0, #20
 80038aa:	f001 f8ed 	bl	8004a88 <HAL_Delay>
#else
  /* Nothing to do in case of Disco Rev A */
#endif /* USE_STM32469I_DISCO_REVA == 0 */
}
 80038ae:	bf00      	nop
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40023800 	.word	0x40023800
 80038bc:	200080f8 	.word	0x200080f8
 80038c0:	40021c00 	.word	0x40021c00

080038c4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80038c8:	4b03      	ldr	r3, [pc, #12]	@ (80038d8 <BSP_LCD_GetXSize+0x14>)
 80038ca:	681b      	ldr	r3, [r3, #0]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20000034 	.word	0x20000034

080038dc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80038e0:	4b03      	ldr	r3, [pc, #12]	@ (80038f0 <BSP_LCD_GetYSize+0x14>)
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20000038 	.word	0x20000038

080038f4 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b090      	sub	sp, #64	@ 0x40
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	6039      	str	r1, [r7, #0]
 80038fe:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003904:	f7ff ffde 	bl	80038c4 <BSP_LCD_GetXSize>
 8003908:	4603      	mov	r3, r0
 800390a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003910:	f7ff ffe4 	bl	80038dc <BSP_LCD_GetYSize>
 8003914:	4603      	mov	r3, r0
 8003916:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003918:	2300      	movs	r3, #0
 800391a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8003920:	23ff      	movs	r3, #255	@ 0xff
 8003922:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003924:	2300      	movs	r3, #0
 8003926:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 800392e:	2300      	movs	r3, #0
 8003930:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800393a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800393e:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003940:	2307      	movs	r3, #7
 8003942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003944:	f7ff ffbe 	bl	80038c4 <BSP_LCD_GetXSize>
 8003948:	4603      	mov	r3, r0
 800394a:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800394c:	f7ff ffc6 	bl	80038dc <BSP_LCD_GetYSize>
 8003950:	4603      	mov	r3, r0
 8003952:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 8003954:	88fa      	ldrh	r2, [r7, #6]
 8003956:	f107 030c 	add.w	r3, r7, #12
 800395a:	4619      	mov	r1, r3
 800395c:	4812      	ldr	r0, [pc, #72]	@ (80039a8 <BSP_LCD_LayerDefaultInit+0xb4>)
 800395e:	f004 faa4 	bl	8007eaa <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003962:	88fa      	ldrh	r2, [r7, #6]
 8003964:	4911      	ldr	r1, [pc, #68]	@ (80039ac <BSP_LCD_LayerDefaultInit+0xb8>)
 8003966:	4613      	mov	r3, r2
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	3304      	adds	r3, #4
 8003972:	f04f 32ff 	mov.w	r2, #4294967295
 8003976:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003978:	88fa      	ldrh	r2, [r7, #6]
 800397a:	490c      	ldr	r1, [pc, #48]	@ (80039ac <BSP_LCD_LayerDefaultInit+0xb8>)
 800397c:	4613      	mov	r3, r2
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	3308      	adds	r3, #8
 8003988:	4a09      	ldr	r2, [pc, #36]	@ (80039b0 <BSP_LCD_LayerDefaultInit+0xbc>)
 800398a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 800398c:	88fa      	ldrh	r2, [r7, #6]
 800398e:	4907      	ldr	r1, [pc, #28]	@ (80039ac <BSP_LCD_LayerDefaultInit+0xb8>)
 8003990:	4613      	mov	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800399e:	601a      	str	r2, [r3, #0]
}
 80039a0:	bf00      	nop
 80039a2:	3740      	adds	r7, #64	@ 0x40
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20008034 	.word	0x20008034
 80039ac:	20008100 	.word	0x20008100
 80039b0:	2000002c 	.word	0x2000002c

080039b4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80039bc:	4a04      	ldr	r2, [pc, #16]	@ (80039d0 <BSP_LCD_SelectLayer+0x1c>)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6013      	str	r3, [r2, #0]
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	200080fc 	.word	0x200080fc

080039d4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80039dc:	4b07      	ldr	r3, [pc, #28]	@ (80039fc <BSP_LCD_SetTextColor+0x28>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4907      	ldr	r1, [pc, #28]	@ (8003a00 <BSP_LCD_SetTextColor+0x2c>)
 80039e2:	4613      	mov	r3, r2
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	601a      	str	r2, [r3, #0]
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	200080fc 	.word	0x200080fc
 8003a00:	20008100 	.word	0x20008100

08003a04 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003a0c:	4b08      	ldr	r3, [pc, #32]	@ (8003a30 <BSP_LCD_SetBackColor+0x2c>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	4908      	ldr	r1, [pc, #32]	@ (8003a34 <BSP_LCD_SetBackColor+0x30>)
 8003a12:	4613      	mov	r3, r2
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	601a      	str	r2, [r3, #0]
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	200080fc 	.word	0x200080fc
 8003a34:	20008100 	.word	0x20008100

08003a38 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003a40:	4b08      	ldr	r3, [pc, #32]	@ (8003a64 <BSP_LCD_SetFont+0x2c>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	4908      	ldr	r1, [pc, #32]	@ (8003a68 <BSP_LCD_SetFont+0x30>)
 8003a46:	4613      	mov	r3, r2
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	3308      	adds	r3, #8
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	601a      	str	r2, [r3, #0]
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	200080fc 	.word	0x200080fc
 8003a68:	20008100 	.word	0x20008100

08003a6c <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8003a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003a74:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab4 <BSP_LCD_Clear+0x48>)
 8003a76:	681c      	ldr	r4, [r3, #0]
 8003a78:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab4 <BSP_LCD_Clear+0x48>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0e      	ldr	r2, [pc, #56]	@ (8003ab8 <BSP_LCD_Clear+0x4c>)
 8003a7e:	2134      	movs	r1, #52	@ 0x34
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	4413      	add	r3, r2
 8003a86:	335c      	adds	r3, #92	@ 0x5c
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	461e      	mov	r6, r3
 8003a8c:	f7ff ff1a 	bl	80038c4 <BSP_LCD_GetXSize>
 8003a90:	4605      	mov	r5, r0
 8003a92:	f7ff ff23 	bl	80038dc <BSP_LCD_GetYSize>
 8003a96:	4602      	mov	r2, r0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	9301      	str	r3, [sp, #4]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	462a      	mov	r2, r5
 8003aa4:	4631      	mov	r1, r6
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	f000 fbcc 	bl	8004244 <LL_FillBuffer>
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ab4:	200080fc 	.word	0x200080fc
 8003ab8:	20008034 	.word	0x20008034

08003abc <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003abc:	b590      	push	{r4, r7, lr}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	80fb      	strh	r3, [r7, #6]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	80bb      	strh	r3, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003ace:	4b1b      	ldr	r3, [pc, #108]	@ (8003b3c <BSP_LCD_DisplayChar+0x80>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	491b      	ldr	r1, [pc, #108]	@ (8003b40 <BSP_LCD_DisplayChar+0x84>)
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	3308      	adds	r3, #8
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6819      	ldr	r1, [r3, #0]
 8003ae4:	78fb      	ldrb	r3, [r7, #3]
 8003ae6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003aea:	4b14      	ldr	r3, [pc, #80]	@ (8003b3c <BSP_LCD_DisplayChar+0x80>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	4c14      	ldr	r4, [pc, #80]	@ (8003b40 <BSP_LCD_DisplayChar+0x84>)
 8003af0:	4613      	mov	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4423      	add	r3, r4
 8003afa:	3308      	adds	r3, #8
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003b00:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003b04:	4b0d      	ldr	r3, [pc, #52]	@ (8003b3c <BSP_LCD_DisplayChar+0x80>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4c0d      	ldr	r4, [pc, #52]	@ (8003b40 <BSP_LCD_DisplayChar+0x84>)
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4423      	add	r3, r4
 8003b14:	3308      	adds	r3, #8
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	889b      	ldrh	r3, [r3, #4]
 8003b1a:	3307      	adds	r3, #7
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	da00      	bge.n	8003b22 <BSP_LCD_DisplayChar+0x66>
 8003b20:	3307      	adds	r3, #7
 8003b22:	10db      	asrs	r3, r3, #3
 8003b24:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003b28:	18ca      	adds	r2, r1, r3
 8003b2a:	88b9      	ldrh	r1, [r7, #4]
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fad0 	bl	80040d4 <DrawChar>
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd90      	pop	{r4, r7, pc}
 8003b3c:	200080fc 	.word	0x200080fc
 8003b40:	20008100 	.word	0x20008100

08003b44 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003b44:	b5b0      	push	{r4, r5, r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60ba      	str	r2, [r7, #8]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4603      	mov	r3, r0
 8003b50:	81fb      	strh	r3, [r7, #14]
 8003b52:	460b      	mov	r3, r1
 8003b54:	81bb      	strh	r3, [r7, #12]
 8003b56:	4613      	mov	r3, r2
 8003b58:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	83fb      	strh	r3, [r7, #30]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8003b6e:	e002      	b.n	8003b76 <BSP_LCD_DisplayStringAt+0x32>
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	3301      	adds	r3, #1
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	617a      	str	r2, [r7, #20]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f6      	bne.n	8003b70 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003b82:	f7ff fe9f 	bl	80038c4 <BSP_LCD_GetXSize>
 8003b86:	4601      	mov	r1, r0
 8003b88:	4b50      	ldr	r3, [pc, #320]	@ (8003ccc <BSP_LCD_DisplayStringAt+0x188>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4850      	ldr	r0, [pc, #320]	@ (8003cd0 <BSP_LCD_DisplayStringAt+0x18c>)
 8003b8e:	4613      	mov	r3, r2
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4403      	add	r3, r0
 8003b98:	3308      	adds	r3, #8
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	889b      	ldrh	r3, [r3, #4]
 8003b9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ba2:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d01c      	beq.n	8003be4 <BSP_LCD_DisplayStringAt+0xa0>
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	dc33      	bgt.n	8003c16 <BSP_LCD_DisplayStringAt+0xd2>
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d002      	beq.n	8003bb8 <BSP_LCD_DisplayStringAt+0x74>
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d019      	beq.n	8003bea <BSP_LCD_DisplayStringAt+0xa6>
 8003bb6:	e02e      	b.n	8003c16 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	1ad1      	subs	r1, r2, r3
 8003bbe:	4b43      	ldr	r3, [pc, #268]	@ (8003ccc <BSP_LCD_DisplayStringAt+0x188>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4843      	ldr	r0, [pc, #268]	@ (8003cd0 <BSP_LCD_DisplayStringAt+0x18c>)
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4403      	add	r3, r0
 8003bce:	3308      	adds	r3, #8
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	889b      	ldrh	r3, [r3, #4]
 8003bd4:	fb01 f303 	mul.w	r3, r1, r3
 8003bd8:	085b      	lsrs	r3, r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	89fb      	ldrh	r3, [r7, #14]
 8003bde:	4413      	add	r3, r2
 8003be0:	83fb      	strh	r3, [r7, #30]
      break;
 8003be2:	e01b      	b.n	8003c1c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8003be4:	89fb      	ldrh	r3, [r7, #14]
 8003be6:	83fb      	strh	r3, [r7, #30]
      break;
 8003be8:	e018      	b.n	8003c1c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	b299      	uxth	r1, r3
 8003bf2:	4b36      	ldr	r3, [pc, #216]	@ (8003ccc <BSP_LCD_DisplayStringAt+0x188>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4836      	ldr	r0, [pc, #216]	@ (8003cd0 <BSP_LCD_DisplayStringAt+0x18c>)
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4403      	add	r3, r0
 8003c02:	3308      	adds	r3, #8
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	889b      	ldrh	r3, [r3, #4]
 8003c08:	fb11 f303 	smulbb	r3, r1, r3
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	89fb      	ldrh	r3, [r7, #14]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	83fb      	strh	r3, [r7, #30]
      break;
 8003c14:	e002      	b.n	8003c1c <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 8003c16:	89fb      	ldrh	r3, [r7, #14]
 8003c18:	83fb      	strh	r3, [r7, #30]
      break;
 8003c1a:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8003c1c:	8bfb      	ldrh	r3, [r7, #30]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <BSP_LCD_DisplayStringAt+0xe6>
 8003c22:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	da1d      	bge.n	8003c66 <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003c2e:	e01a      	b.n	8003c66 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	781a      	ldrb	r2, [r3, #0]
 8003c34:	89b9      	ldrh	r1, [r7, #12]
 8003c36:	8bfb      	ldrh	r3, [r7, #30]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff ff3f 	bl	8003abc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003c3e:	4b23      	ldr	r3, [pc, #140]	@ (8003ccc <BSP_LCD_DisplayStringAt+0x188>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	4923      	ldr	r1, [pc, #140]	@ (8003cd0 <BSP_LCD_DisplayStringAt+0x18c>)
 8003c44:	4613      	mov	r3, r2
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	3308      	adds	r3, #8
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	889a      	ldrh	r2, [r3, #4]
 8003c54:	8bfb      	ldrh	r3, [r7, #30]
 8003c56:	4413      	add	r3, r2
 8003c58:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	60bb      	str	r3, [r7, #8]
    i++;
 8003c60:	8bbb      	ldrh	r3, [r7, #28]
 8003c62:	3301      	adds	r3, #1
 8003c64:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bf14      	ite	ne
 8003c6e:	2301      	movne	r3, #1
 8003c70:	2300      	moveq	r3, #0
 8003c72:	b2dc      	uxtb	r4, r3
 8003c74:	f7ff fe26 	bl	80038c4 <BSP_LCD_GetXSize>
 8003c78:	8bb9      	ldrh	r1, [r7, #28]
 8003c7a:	4b14      	ldr	r3, [pc, #80]	@ (8003ccc <BSP_LCD_DisplayStringAt+0x188>)
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4d14      	ldr	r5, [pc, #80]	@ (8003cd0 <BSP_LCD_DisplayStringAt+0x18c>)
 8003c80:	4613      	mov	r3, r2
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	4413      	add	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	442b      	add	r3, r5
 8003c8a:	3308      	adds	r3, #8
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	889b      	ldrh	r3, [r3, #4]
 8003c90:	fb01 f303 	mul.w	r3, r1, r3
 8003c94:	1ac3      	subs	r3, r0, r3
 8003c96:	b299      	uxth	r1, r3
 8003c98:	4b0c      	ldr	r3, [pc, #48]	@ (8003ccc <BSP_LCD_DisplayStringAt+0x188>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	480c      	ldr	r0, [pc, #48]	@ (8003cd0 <BSP_LCD_DisplayStringAt+0x18c>)
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4403      	add	r3, r0
 8003ca8:	3308      	adds	r3, #8
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	889b      	ldrh	r3, [r3, #4]
 8003cae:	4299      	cmp	r1, r3
 8003cb0:	bf2c      	ite	cs
 8003cb2:	2301      	movcs	r3, #1
 8003cb4:	2300      	movcc	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	4023      	ands	r3, r4
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1b7      	bne.n	8003c30 <BSP_LCD_DisplayStringAt+0xec>
  }

}
 8003cc0:	bf00      	nop
 8003cc2:	bf00      	nop
 8003cc4:	3720      	adds	r7, #32
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	200080fc 	.word	0x200080fc
 8003cd0:	20008100 	.word	0x20008100

08003cd4 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003cd4:	b5b0      	push	{r4, r5, r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	4603      	mov	r3, r0
 8003cdc:	80fb      	strh	r3, [r7, #6]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	80bb      	strh	r3, [r7, #4]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003cea:	4b16      	ldr	r3, [pc, #88]	@ (8003d44 <BSP_LCD_DrawHLine+0x70>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a16      	ldr	r2, [pc, #88]	@ (8003d48 <BSP_LCD_DrawHLine+0x74>)
 8003cf0:	2134      	movs	r1, #52	@ 0x34
 8003cf2:	fb01 f303 	mul.w	r3, r1, r3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	335c      	adds	r3, #92	@ 0x5c
 8003cfa:	681c      	ldr	r4, [r3, #0]
 8003cfc:	f7ff fde2 	bl	80038c4 <BSP_LCD_GetXSize>
 8003d00:	4602      	mov	r2, r0
 8003d02:	88bb      	ldrh	r3, [r7, #4]
 8003d04:	fb03 f202 	mul.w	r2, r3, r2
 8003d08:	88fb      	ldrh	r3, [r7, #6]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4423      	add	r3, r4
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003d12:	4b0c      	ldr	r3, [pc, #48]	@ (8003d44 <BSP_LCD_DrawHLine+0x70>)
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	68f9      	ldr	r1, [r7, #12]
 8003d18:	887c      	ldrh	r4, [r7, #2]
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d44 <BSP_LCD_DrawHLine+0x70>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	4d0b      	ldr	r5, [pc, #44]	@ (8003d4c <BSP_LCD_DrawHLine+0x78>)
 8003d20:	4613      	mov	r3, r2
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	442b      	add	r3, r5
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	9301      	str	r3, [sp, #4]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	2301      	movs	r3, #1
 8003d34:	4622      	mov	r2, r4
 8003d36:	f000 fa85 	bl	8004244 <LL_FillBuffer>
}
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bdb0      	pop	{r4, r5, r7, pc}
 8003d42:	bf00      	nop
 8003d44:	200080fc 	.word	0x200080fc
 8003d48:	20008034 	.word	0x20008034
 8003d4c:	20008100 	.word	0x20008100

08003d50 <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	4603      	mov	r3, r0
 8003d58:	80fb      	strh	r3, [r7, #6]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	80bb      	strh	r3, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003d66:	4b18      	ldr	r3, [pc, #96]	@ (8003dc8 <BSP_LCD_DrawVLine+0x78>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a18      	ldr	r2, [pc, #96]	@ (8003dcc <BSP_LCD_DrawVLine+0x7c>)
 8003d6c:	2134      	movs	r1, #52	@ 0x34
 8003d6e:	fb01 f303 	mul.w	r3, r1, r3
 8003d72:	4413      	add	r3, r2
 8003d74:	335c      	adds	r3, #92	@ 0x5c
 8003d76:	681c      	ldr	r4, [r3, #0]
 8003d78:	f7ff fda4 	bl	80038c4 <BSP_LCD_GetXSize>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	88bb      	ldrh	r3, [r7, #4]
 8003d80:	fb03 f202 	mul.w	r2, r3, r2
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4423      	add	r3, r4
 8003d8c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8003d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003dc8 <BSP_LCD_DrawVLine+0x78>)
 8003d90:	681c      	ldr	r4, [r3, #0]
 8003d92:	68fd      	ldr	r5, [r7, #12]
 8003d94:	887e      	ldrh	r6, [r7, #2]
 8003d96:	f7ff fd95 	bl	80038c4 <BSP_LCD_GetXSize>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	1e59      	subs	r1, r3, #1
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc8 <BSP_LCD_DrawVLine+0x78>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	480b      	ldr	r0, [pc, #44]	@ (8003dd0 <BSP_LCD_DrawVLine+0x80>)
 8003da4:	4613      	mov	r3, r2
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4403      	add	r3, r0
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	9301      	str	r3, [sp, #4]
 8003db2:	9100      	str	r1, [sp, #0]
 8003db4:	4633      	mov	r3, r6
 8003db6:	2201      	movs	r2, #1
 8003db8:	4629      	mov	r1, r5
 8003dba:	4620      	mov	r0, r4
 8003dbc:	f000 fa42 	bl	8004244 <LL_FillBuffer>
}
 8003dc0:	bf00      	nop
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dc8:	200080fc 	.word	0x200080fc
 8003dcc:	20008034 	.word	0x20008034
 8003dd0:	20008100 	.word	0x20008100

08003dd4 <BSP_LCD_DrawRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003dd4:	b590      	push	{r4, r7, lr}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4604      	mov	r4, r0
 8003ddc:	4608      	mov	r0, r1
 8003dde:	4611      	mov	r1, r2
 8003de0:	461a      	mov	r2, r3
 8003de2:	4623      	mov	r3, r4
 8003de4:	80fb      	strh	r3, [r7, #6]
 8003de6:	4603      	mov	r3, r0
 8003de8:	80bb      	strh	r3, [r7, #4]
 8003dea:	460b      	mov	r3, r1
 8003dec:	807b      	strh	r3, [r7, #2]
 8003dee:	4613      	mov	r3, r2
 8003df0:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8003df2:	887a      	ldrh	r2, [r7, #2]
 8003df4:	88b9      	ldrh	r1, [r7, #4]
 8003df6:	88fb      	ldrh	r3, [r7, #6]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff ff6b 	bl	8003cd4 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8003dfe:	88ba      	ldrh	r2, [r7, #4]
 8003e00:	883b      	ldrh	r3, [r7, #0]
 8003e02:	4413      	add	r3, r2
 8003e04:	b299      	uxth	r1, r3
 8003e06:	887a      	ldrh	r2, [r7, #2]
 8003e08:	88fb      	ldrh	r3, [r7, #6]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff ff62 	bl	8003cd4 <BSP_LCD_DrawHLine>

  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8003e10:	883a      	ldrh	r2, [r7, #0]
 8003e12:	88b9      	ldrh	r1, [r7, #4]
 8003e14:	88fb      	ldrh	r3, [r7, #6]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff ff9a 	bl	8003d50 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8003e1c:	88fa      	ldrh	r2, [r7, #6]
 8003e1e:	887b      	ldrh	r3, [r7, #2]
 8003e20:	4413      	add	r3, r2
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	883a      	ldrh	r2, [r7, #0]
 8003e26:	88b9      	ldrh	r1, [r7, #4]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff ff91 	bl	8003d50 <BSP_LCD_DrawVLine>
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd90      	pop	{r4, r7, pc}
	...

08003e38 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3c:	b086      	sub	sp, #24
 8003e3e:	af02      	add	r7, sp, #8
 8003e40:	4604      	mov	r4, r0
 8003e42:	4608      	mov	r0, r1
 8003e44:	4611      	mov	r1, r2
 8003e46:	461a      	mov	r2, r3
 8003e48:	4623      	mov	r3, r4
 8003e4a:	80fb      	strh	r3, [r7, #6]
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	80bb      	strh	r3, [r7, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	807b      	strh	r3, [r7, #2]
 8003e54:	4613      	mov	r3, r2
 8003e56:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003e5c:	4b20      	ldr	r3, [pc, #128]	@ (8003ee0 <BSP_LCD_FillRect+0xa8>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	4920      	ldr	r1, [pc, #128]	@ (8003ee4 <BSP_LCD_FillRect+0xac>)
 8003e62:	4613      	mov	r3, r2
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff fdb0 	bl	80039d4 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003e74:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee0 <BSP_LCD_FillRect+0xa8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1b      	ldr	r2, [pc, #108]	@ (8003ee8 <BSP_LCD_FillRect+0xb0>)
 8003e7a:	2134      	movs	r1, #52	@ 0x34
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	4413      	add	r3, r2
 8003e82:	335c      	adds	r3, #92	@ 0x5c
 8003e84:	681c      	ldr	r4, [r3, #0]
 8003e86:	f7ff fd1d 	bl	80038c4 <BSP_LCD_GetXSize>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	88bb      	ldrh	r3, [r7, #4]
 8003e8e:	fb03 f202 	mul.w	r2, r3, r2
 8003e92:	88fb      	ldrh	r3, [r7, #6]
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4423      	add	r3, r4
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003e9c:	4b10      	ldr	r3, [pc, #64]	@ (8003ee0 <BSP_LCD_FillRect+0xa8>)
 8003e9e:	681c      	ldr	r4, [r3, #0]
 8003ea0:	68fd      	ldr	r5, [r7, #12]
 8003ea2:	887e      	ldrh	r6, [r7, #2]
 8003ea4:	f8b7 8000 	ldrh.w	r8, [r7]
 8003ea8:	f7ff fd0c 	bl	80038c4 <BSP_LCD_GetXSize>
 8003eac:	4602      	mov	r2, r0
 8003eae:	887b      	ldrh	r3, [r7, #2]
 8003eb0:	1ad1      	subs	r1, r2, r3
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee0 <BSP_LCD_FillRect+0xa8>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	480b      	ldr	r0, [pc, #44]	@ (8003ee4 <BSP_LCD_FillRect+0xac>)
 8003eb8:	4613      	mov	r3, r2
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4403      	add	r3, r0
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	9100      	str	r1, [sp, #0]
 8003ec8:	4643      	mov	r3, r8
 8003eca:	4632      	mov	r2, r6
 8003ecc:	4629      	mov	r1, r5
 8003ece:	4620      	mov	r0, r4
 8003ed0:	f000 f9b8 	bl	8004244 <LL_FillBuffer>
}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ede:	bf00      	nop
 8003ee0:	200080fc 	.word	0x200080fc
 8003ee4:	20008100 	.word	0x20008100
 8003ee8:	20008034 	.word	0x20008034

08003eec <BSP_LCD_DisplayOn>:
/**
  * @brief  Switch back on the display if was switched off by previous call of BSP_LCD_DisplayOff().
  *         Exit DSI ULPM mode if was allowed and configured in Dsi Configuration.
  */
void BSP_LCD_DisplayOn(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af02      	add	r7, sp, #8
  /* Send Display on DCS command to display */
  HAL_DSI_ShortWrite(&(hdsi_eval),
 8003ef2:	4b06      	ldr	r3, [pc, #24]	@ (8003f0c <BSP_LCD_DisplayOn+0x20>)
 8003ef4:	6819      	ldr	r1, [r3, #0]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	2329      	movs	r3, #41	@ 0x29
 8003efc:	2215      	movs	r2, #21
 8003efe:	4804      	ldr	r0, [pc, #16]	@ (8003f10 <BSP_LCD_DisplayOn+0x24>)
 8003f00:	f002 fa57 	bl	80063b2 <HAL_DSI_ShortWrite>
                     hdsivideo_handle.VirtualChannelID,
                     DSI_DCS_SHORT_PKT_WRITE_P1,
                     OTM8009A_CMD_DISPON,
                     0x00);
  
}
 8003f04:	bf00      	nop
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20007f88 	.word	0x20007f88
 8003f10:	200080dc 	.word	0x200080dc

08003f14 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d80d      	bhi.n	8003f40 <DSI_IO_WriteCmd+0x2c>
  {
    HAL_DSI_ShortWrite(&hdsi_eval, LCD_Driver_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	4613      	mov	r3, r2
 8003f34:	2215      	movs	r2, #21
 8003f36:	2100      	movs	r1, #0
 8003f38:	480a      	ldr	r0, [pc, #40]	@ (8003f64 <DSI_IO_WriteCmd+0x50>)
 8003f3a:	f002 fa3a 	bl	80063b2 <HAL_DSI_ShortWrite>
  }
  else
  {
    HAL_DSI_LongWrite(&hdsi_eval,  LCD_Driver_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
  }
}
 8003f3e:	e00d      	b.n	8003f5c <DSI_IO_WriteCmd+0x48>
    HAL_DSI_LongWrite(&hdsi_eval,  LCD_Driver_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4413      	add	r3, r2
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	9301      	str	r3, [sp, #4]
 8003f4e:	9200      	str	r2, [sp, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2239      	movs	r2, #57	@ 0x39
 8003f54:	2100      	movs	r1, #0
 8003f56:	4803      	ldr	r0, [pc, #12]	@ (8003f64 <DSI_IO_WriteCmd+0x50>)
 8003f58:	f002 fa4d 	bl	80063f6 <HAL_DSI_LongWrite>
}
 8003f5c:	bf00      	nop
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	200080dc 	.word	0x200080dc

08003f68 <DSI_IO_ReadCmd>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
int32_t DSI_IO_ReadCmd(uint32_t Reg, uint8_t *pData, uint32_t Size)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08a      	sub	sp, #40	@ 0x28
 8003f6c:	af04      	add	r7, sp, #16
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  int32_t ret = LCD_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	617b      	str	r3, [r7, #20]

  if(HAL_DSI_Read(&hdsi_eval, LCD_Driver_ID, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) == HAL_OK)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	9302      	str	r3, [sp, #8]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	9301      	str	r3, [sp, #4]
 8003f80:	2306      	movs	r3, #6
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	2100      	movs	r1, #0
 8003f8a:	4806      	ldr	r0, [pc, #24]	@ (8003fa4 <DSI_IO_ReadCmd+0x3c>)
 8003f8c:	f002 facb 	bl	8006526 <HAL_DSI_Read>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <DSI_IO_ReadCmd+0x32>
  {
    ret = LCD_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003f9a:	697b      	ldr	r3, [r7, #20]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	200080dc 	.word	0x200080dc

08003fa8 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	4b34      	ldr	r3, [pc, #208]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb6:	4a33      	ldr	r2, [pc, #204]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 8003fb8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fbe:	4b31      	ldr	r3, [pc, #196]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8003fca:	4b2e      	ldr	r3, [pc, #184]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	4a2d      	ldr	r2, [pc, #180]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 8003fd0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003fd4:	6253      	str	r3, [r2, #36]	@ 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8003fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	4a2a      	ldr	r2, [pc, #168]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 8003fdc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003fe0:	6253      	str	r3, [r2, #36]	@ 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	4b27      	ldr	r3, [pc, #156]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fea:	4a26      	ldr	r2, [pc, #152]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 8003fec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ff2:	4b24      	ldr	r3, [pc, #144]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8003ffe:	4b21      	ldr	r3, [pc, #132]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	4a20      	ldr	r2, [pc, #128]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 8004004:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004008:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 800400a:	4b1e      	ldr	r3, [pc, #120]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	4a1d      	ldr	r2, [pc, #116]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 8004010:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004014:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	607b      	str	r3, [r7, #4]
 800401a:	4b1a      	ldr	r3, [pc, #104]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 800401c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401e:	4a19      	ldr	r2, [pc, #100]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 8004020:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004024:	6453      	str	r3, [r2, #68]	@ 0x44
 8004026:	4b17      	ldr	r3, [pc, #92]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 8004028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800402e:	607b      	str	r3, [r7, #4]
 8004030:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8004032:	4b14      	ldr	r3, [pc, #80]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 8004034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004036:	4a13      	ldr	r2, [pc, #76]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 8004038:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800403c:	6253      	str	r3, [r2, #36]	@ 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 800403e:	4b11      	ldr	r3, [pc, #68]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	4a10      	ldr	r2, [pc, #64]	@ (8004084 <BSP_LCD_MspInit+0xdc>)
 8004044:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004048:	6253      	str	r3, [r2, #36]	@ 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 800404a:	2200      	movs	r2, #0
 800404c:	2103      	movs	r1, #3
 800404e:	2058      	movs	r0, #88	@ 0x58
 8004050:	f000 fe19 	bl	8004c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004054:	2058      	movs	r0, #88	@ 0x58
 8004056:	f000 fe32 	bl	8004cbe <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 800405a:	2200      	movs	r2, #0
 800405c:	2103      	movs	r1, #3
 800405e:	205a      	movs	r0, #90	@ 0x5a
 8004060:	f000 fe11 	bl	8004c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004064:	205a      	movs	r0, #90	@ 0x5a
 8004066:	f000 fe2a 	bl	8004cbe <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 800406a:	2200      	movs	r2, #0
 800406c:	2103      	movs	r1, #3
 800406e:	205c      	movs	r0, #92	@ 0x5c
 8004070:	f000 fe09 	bl	8004c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8004074:	205c      	movs	r0, #92	@ 0x5c
 8004076:	f000 fe22 	bl	8004cbe <HAL_NVIC_EnableIRQ>
}
 800407a:	bf00      	nop
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40023800 	.word	0x40023800

08004088 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004088:	b5b0      	push	{r4, r5, r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	603a      	str	r2, [r7, #0]
 8004092:	80fb      	strh	r3, [r7, #6]
 8004094:	460b      	mov	r3, r1
 8004096:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004098:	4b0c      	ldr	r3, [pc, #48]	@ (80040cc <BSP_LCD_DrawPixel+0x44>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a0c      	ldr	r2, [pc, #48]	@ (80040d0 <BSP_LCD_DrawPixel+0x48>)
 800409e:	2134      	movs	r1, #52	@ 0x34
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	4413      	add	r3, r2
 80040a6:	335c      	adds	r3, #92	@ 0x5c
 80040a8:	681c      	ldr	r4, [r3, #0]
 80040aa:	88bd      	ldrh	r5, [r7, #4]
 80040ac:	f7ff fc0a 	bl	80038c4 <BSP_LCD_GetXSize>
 80040b0:	4603      	mov	r3, r0
 80040b2:	fb03 f205 	mul.w	r2, r3, r5
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4423      	add	r3, r4
 80040be:	461a      	mov	r2, r3
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6013      	str	r3, [r2, #0]
}
 80040c4:	bf00      	nop
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bdb0      	pop	{r4, r5, r7, pc}
 80040cc:	200080fc 	.word	0x200080fc
 80040d0:	20008034 	.word	0x20008034

080040d4 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4603      	mov	r3, r0
 80040dc:	603a      	str	r2, [r7, #0]
 80040de:	80fb      	strh	r3, [r7, #6]
 80040e0:	460b      	mov	r3, r1
 80040e2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	2300      	movs	r3, #0
 80040ea:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 80040ec:	4b53      	ldr	r3, [pc, #332]	@ (800423c <DrawChar+0x168>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	4953      	ldr	r1, [pc, #332]	@ (8004240 <DrawChar+0x16c>)
 80040f2:	4613      	mov	r3, r2
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	4413      	add	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	3308      	adds	r3, #8
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	88db      	ldrh	r3, [r3, #6]
 8004102:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004104:	4b4d      	ldr	r3, [pc, #308]	@ (800423c <DrawChar+0x168>)
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	494d      	ldr	r1, [pc, #308]	@ (8004240 <DrawChar+0x16c>)
 800410a:	4613      	mov	r3, r2
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	4413      	add	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	3308      	adds	r3, #8
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	889b      	ldrh	r3, [r3, #4]
 800411a:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 800411c:	8a3b      	ldrh	r3, [r7, #16]
 800411e:	3307      	adds	r3, #7
 8004120:	2b00      	cmp	r3, #0
 8004122:	da00      	bge.n	8004126 <DrawChar+0x52>
 8004124:	3307      	adds	r3, #7
 8004126:	10db      	asrs	r3, r3, #3
 8004128:	b2db      	uxtb	r3, r3
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	b2da      	uxtb	r2, r3
 800412e:	8a3b      	ldrh	r3, [r7, #16]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	e076      	b.n	800422a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800413c:	8a3b      	ldrh	r3, [r7, #16]
 800413e:	3307      	adds	r3, #7
 8004140:	2b00      	cmp	r3, #0
 8004142:	da00      	bge.n	8004146 <DrawChar+0x72>
 8004144:	3307      	adds	r3, #7
 8004146:	10db      	asrs	r3, r3, #3
 8004148:	461a      	mov	r2, r3
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	fb02 f303 	mul.w	r3, r2, r3
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	4413      	add	r3, r2
 8004154:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8004156:	8a3b      	ldrh	r3, [r7, #16]
 8004158:	3307      	adds	r3, #7
 800415a:	2b00      	cmp	r3, #0
 800415c:	da00      	bge.n	8004160 <DrawChar+0x8c>
 800415e:	3307      	adds	r3, #7
 8004160:	10db      	asrs	r3, r3, #3
 8004162:	2b01      	cmp	r3, #1
 8004164:	d002      	beq.n	800416c <DrawChar+0x98>
 8004166:	2b02      	cmp	r3, #2
 8004168:	d004      	beq.n	8004174 <DrawChar+0xa0>
 800416a:	e00c      	b.n	8004186 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	617b      	str	r3, [r7, #20]
      break;
 8004172:	e016      	b.n	80041a2 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	021b      	lsls	r3, r3, #8
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	3201      	adds	r2, #1
 800417e:	7812      	ldrb	r2, [r2, #0]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]
      break;
 8004184:	e00d      	b.n	80041a2 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	041a      	lsls	r2, r3, #16
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	3301      	adds	r3, #1
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	4313      	orrs	r3, r2
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	3202      	adds	r2, #2
 800419a:	7812      	ldrb	r2, [r2, #0]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
      break;
 80041a0:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80041a2:	2300      	movs	r3, #0
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	e036      	b.n	8004216 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 80041a8:	8a3a      	ldrh	r2, [r7, #16]
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	1ad2      	subs	r2, r2, r3
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
 80041b0:	4413      	add	r3, r2
 80041b2:	3b01      	subs	r3, #1
 80041b4:	2201      	movs	r2, #1
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	4013      	ands	r3, r2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d012      	beq.n	80041ea <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	88fb      	ldrh	r3, [r7, #6]
 80041ca:	4413      	add	r3, r2
 80041cc:	b298      	uxth	r0, r3
 80041ce:	4b1b      	ldr	r3, [pc, #108]	@ (800423c <DrawChar+0x168>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	491b      	ldr	r1, [pc, #108]	@ (8004240 <DrawChar+0x16c>)
 80041d4:	4613      	mov	r3, r2
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	88bb      	ldrh	r3, [r7, #4]
 80041e2:	4619      	mov	r1, r3
 80041e4:	f7ff ff50 	bl	8004088 <BSP_LCD_DrawPixel>
 80041e8:	e012      	b.n	8004210 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	88fb      	ldrh	r3, [r7, #6]
 80041f0:	4413      	add	r3, r2
 80041f2:	b298      	uxth	r0, r3
 80041f4:	4b11      	ldr	r3, [pc, #68]	@ (800423c <DrawChar+0x168>)
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	4911      	ldr	r1, [pc, #68]	@ (8004240 <DrawChar+0x16c>)
 80041fa:	4613      	mov	r3, r2
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	4413      	add	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	3304      	adds	r3, #4
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	88bb      	ldrh	r3, [r7, #4]
 800420a:	4619      	mov	r1, r3
 800420c:	f7ff ff3c 	bl	8004088 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	3301      	adds	r3, #1
 8004214:	61bb      	str	r3, [r7, #24]
 8004216:	8a3b      	ldrh	r3, [r7, #16]
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	429a      	cmp	r2, r3
 800421c:	d3c4      	bcc.n	80041a8 <DrawChar+0xd4>
      }
    }
    Ypos++;
 800421e:	88bb      	ldrh	r3, [r7, #4]
 8004220:	3301      	adds	r3, #1
 8004222:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	3301      	adds	r3, #1
 8004228:	61fb      	str	r3, [r7, #28]
 800422a:	8a7b      	ldrh	r3, [r7, #18]
 800422c:	69fa      	ldr	r2, [r7, #28]
 800422e:	429a      	cmp	r2, r3
 8004230:	d384      	bcc.n	800413c <DrawChar+0x68>
  }
}
 8004232:	bf00      	nop
 8004234:	bf00      	nop
 8004236:	3720      	adds	r7, #32
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	200080fc 	.word	0x200080fc
 8004240:	20008100 	.word	0x20008100

08004244 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af02      	add	r7, sp, #8
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 8004252:	4b16      	ldr	r3, [pc, #88]	@ (80042ac <LL_FillBuffer+0x68>)
 8004254:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004258:	605a      	str	r2, [r3, #4]
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 800425a:	4b14      	ldr	r3, [pc, #80]	@ (80042ac <LL_FillBuffer+0x68>)
 800425c:	2200      	movs	r2, #0
 800425e:	609a      	str	r2, [r3, #8]
  hdma2d_eval.Init.OutputOffset = OffLine;
 8004260:	4a12      	ldr	r2, [pc, #72]	@ (80042ac <LL_FillBuffer+0x68>)
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	60d3      	str	r3, [r2, #12]

  hdma2d_eval.Instance = DMA2D;
 8004266:	4b11      	ldr	r3, [pc, #68]	@ (80042ac <LL_FillBuffer+0x68>)
 8004268:	4a11      	ldr	r2, [pc, #68]	@ (80042b0 <LL_FillBuffer+0x6c>)
 800426a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 800426c:	480f      	ldr	r0, [pc, #60]	@ (80042ac <LL_FillBuffer+0x68>)
 800426e:	f000 ff1b 	bl	80050a8 <HAL_DMA2D_Init>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d115      	bne.n	80042a4 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, LayerIndex) == HAL_OK)
 8004278:	68f9      	ldr	r1, [r7, #12]
 800427a:	480c      	ldr	r0, [pc, #48]	@ (80042ac <LL_FillBuffer+0x68>)
 800427c:	f001 f872 	bl	8005364 <HAL_DMA2D_ConfigLayer>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10e      	bne.n	80042a4 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_eval, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69f9      	ldr	r1, [r7, #28]
 8004290:	4806      	ldr	r0, [pc, #24]	@ (80042ac <LL_FillBuffer+0x68>)
 8004292:	f000 ff52 	bl	800513a <HAL_DMA2D_Start>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d103      	bne.n	80042a4 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 800429c:	210a      	movs	r1, #10
 800429e:	4803      	ldr	r0, [pc, #12]	@ (80042ac <LL_FillBuffer+0x68>)
 80042a0:	f000 ff76 	bl	8005190 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80042a4:	bf00      	nop
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20007ff4 	.word	0x20007ff4
 80042b0:	4002b000 	.word	0x4002b000

080042b4 <LCD_ReadType>:
/**
  * @brief  Check if the component ID is correct.
  * @param  Lcd_type Driver Type Control NT35510 or OTM8009A
  */
static LCD_Driver_TypeDef LCD_ReadType(LCD_Driver_TypeDef Lcd_type)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	71fb      	strb	r3, [r7, #7]
  uint16_t read_id;
  /* Read the NT35510 ID */
  read_id = NT35510_ReadID();
 80042be:	f7fe fd0d 	bl	8002cdc <NT35510_ReadID>
 80042c2:	4603      	mov	r3, r0
 80042c4:	81fb      	strh	r3, [r7, #14]
  if(read_id == NT35510_ID)
 80042c6:	89fb      	ldrh	r3, [r7, #14]
 80042c8:	2b80      	cmp	r3, #128	@ 0x80
 80042ca:	d102      	bne.n	80042d2 <LCD_ReadType+0x1e>
  {
    Lcd_type= LCD_CTRL_NT35510;
 80042cc:	2300      	movs	r3, #0
 80042ce:	71fb      	strb	r3, [r7, #7]
 80042d0:	e00b      	b.n	80042ea <LCD_ReadType+0x36>
  }
  else
  {
    /* Read the OTM8009A ID */
    read_id = OTM8009A_ReadID();
 80042d2:	f7fe ff6b 	bl	80031ac <OTM8009A_ReadID>
 80042d6:	4603      	mov	r3, r0
 80042d8:	81fb      	strh	r3, [r7, #14]
    if(read_id == OTM8009A_ID)
 80042da:	89fb      	ldrh	r3, [r7, #14]
 80042dc:	2b40      	cmp	r3, #64	@ 0x40
 80042de:	d102      	bne.n	80042e6 <LCD_ReadType+0x32>
    {
      Lcd_type= LCD_CTRL_OTM8009A;
 80042e0:	2301      	movs	r3, #1
 80042e2:	71fb      	strb	r3, [r7, #7]
 80042e4:	e001      	b.n	80042ea <LCD_ReadType+0x36>
    }
    else
    {
      Lcd_type= LCD_CTRL_NONE;
 80042e6:	2302      	movs	r3, #2
 80042e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return Lcd_type;
 80042ea:	79fb      	ldrb	r3, [r7, #7]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80042f8:	4b29      	ldr	r3, [pc, #164]	@ (80043a0 <BSP_SDRAM_Init+0xac>)
 80042fa:	4a2a      	ldr	r2, [pc, #168]	@ (80043a4 <BSP_SDRAM_Init+0xb0>)
 80042fc:	601a      	str	r2, [r3, #0]

  /* Timing configuration for 90 MHz as SD clock frequency (System clock is up to 180 MHz) */
  Timing.LoadToActiveDelay    = 2;
 80042fe:	4b2a      	ldr	r3, [pc, #168]	@ (80043a8 <BSP_SDRAM_Init+0xb4>)
 8004300:	2202      	movs	r2, #2
 8004302:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004304:	4b28      	ldr	r3, [pc, #160]	@ (80043a8 <BSP_SDRAM_Init+0xb4>)
 8004306:	2207      	movs	r2, #7
 8004308:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800430a:	4b27      	ldr	r3, [pc, #156]	@ (80043a8 <BSP_SDRAM_Init+0xb4>)
 800430c:	2204      	movs	r2, #4
 800430e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004310:	4b25      	ldr	r3, [pc, #148]	@ (80043a8 <BSP_SDRAM_Init+0xb4>)
 8004312:	2207      	movs	r2, #7
 8004314:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8004316:	4b24      	ldr	r3, [pc, #144]	@ (80043a8 <BSP_SDRAM_Init+0xb4>)
 8004318:	2202      	movs	r2, #2
 800431a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800431c:	4b22      	ldr	r3, [pc, #136]	@ (80043a8 <BSP_SDRAM_Init+0xb4>)
 800431e:	2202      	movs	r2, #2
 8004320:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004322:	4b21      	ldr	r3, [pc, #132]	@ (80043a8 <BSP_SDRAM_Init+0xb4>)
 8004324:	2202      	movs	r2, #2
 8004326:	619a      	str	r2, [r3, #24]

  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004328:	4b1d      	ldr	r3, [pc, #116]	@ (80043a0 <BSP_SDRAM_Init+0xac>)
 800432a:	2200      	movs	r2, #0
 800432c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800432e:	4b1c      	ldr	r3, [pc, #112]	@ (80043a0 <BSP_SDRAM_Init+0xac>)
 8004330:	2200      	movs	r2, #0
 8004332:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004334:	4b1a      	ldr	r3, [pc, #104]	@ (80043a0 <BSP_SDRAM_Init+0xac>)
 8004336:	2204      	movs	r2, #4
 8004338:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800433a:	4b19      	ldr	r3, [pc, #100]	@ (80043a0 <BSP_SDRAM_Init+0xac>)
 800433c:	2220      	movs	r2, #32
 800433e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004340:	4b17      	ldr	r3, [pc, #92]	@ (80043a0 <BSP_SDRAM_Init+0xac>)
 8004342:	2240      	movs	r2, #64	@ 0x40
 8004344:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8004346:	4b16      	ldr	r3, [pc, #88]	@ (80043a0 <BSP_SDRAM_Init+0xac>)
 8004348:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800434c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800434e:	4b14      	ldr	r3, [pc, #80]	@ (80043a0 <BSP_SDRAM_Init+0xac>)
 8004350:	2200      	movs	r2, #0
 8004352:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004354:	4b12      	ldr	r3, [pc, #72]	@ (80043a0 <BSP_SDRAM_Init+0xac>)
 8004356:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800435a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800435c:	4b10      	ldr	r3, [pc, #64]	@ (80043a0 <BSP_SDRAM_Init+0xac>)
 800435e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004362:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004364:	4b0e      	ldr	r3, [pc, #56]	@ (80043a0 <BSP_SDRAM_Init+0xac>)
 8004366:	2200      	movs	r2, #0
 8004368:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 800436a:	2100      	movs	r1, #0
 800436c:	480c      	ldr	r0, [pc, #48]	@ (80043a0 <BSP_SDRAM_Init+0xac>)
 800436e:	f000 f87f 	bl	8004470 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004372:	490d      	ldr	r1, [pc, #52]	@ (80043a8 <BSP_SDRAM_Init+0xb4>)
 8004374:	480a      	ldr	r0, [pc, #40]	@ (80043a0 <BSP_SDRAM_Init+0xac>)
 8004376:	f004 feb7 	bl	80090e8 <HAL_SDRAM_Init>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004380:	4b0a      	ldr	r3, [pc, #40]	@ (80043ac <BSP_SDRAM_Init+0xb8>)
 8004382:	2201      	movs	r2, #1
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	e002      	b.n	800438e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004388:	4b08      	ldr	r3, [pc, #32]	@ (80043ac <BSP_SDRAM_Init+0xb8>)
 800438a:	2200      	movs	r2, #0
 800438c:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800438e:	f240 5069 	movw	r0, #1385	@ 0x569
 8004392:	f000 f80d 	bl	80043b0 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8004396:	4b05      	ldr	r3, [pc, #20]	@ (80043ac <BSP_SDRAM_Init+0xb8>)
 8004398:	781b      	ldrb	r3, [r3, #0]
}
 800439a:	4618      	mov	r0, r3
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20008154 	.word	0x20008154
 80043a4:	a0000140 	.word	0xa0000140
 80043a8:	20008188 	.word	0x20008188
 80043ac:	2000003c 	.word	0x2000003c

080043b0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80043bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043be:	2201      	movs	r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80043c2:	4b29      	ldr	r3, [pc, #164]	@ (8004468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043c4:	2210      	movs	r2, #16
 80043c6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80043c8:	4b27      	ldr	r3, [pc, #156]	@ (8004468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80043ce:	4b26      	ldr	r3, [pc, #152]	@ (8004468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80043d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80043d8:	4923      	ldr	r1, [pc, #140]	@ (8004468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043da:	4824      	ldr	r0, [pc, #144]	@ (800446c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80043dc:	f004 feb8 	bl	8009150 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80043e0:	2001      	movs	r0, #1
 80043e2:	f000 fb51 	bl	8004a88 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80043e6:	4b20      	ldr	r3, [pc, #128]	@ (8004468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043e8:	2202      	movs	r2, #2
 80043ea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80043ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043ee:	2210      	movs	r2, #16
 80043f0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80043f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80043f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80043fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004402:	4919      	ldr	r1, [pc, #100]	@ (8004468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004404:	4819      	ldr	r0, [pc, #100]	@ (800446c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004406:	f004 fea3 	bl	8009150 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800440a:	4b17      	ldr	r3, [pc, #92]	@ (8004468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800440c:	2203      	movs	r2, #3
 800440e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004410:	4b15      	ldr	r3, [pc, #84]	@ (8004468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004412:	2210      	movs	r2, #16
 8004414:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004416:	4b14      	ldr	r3, [pc, #80]	@ (8004468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004418:	2208      	movs	r2, #8
 800441a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800441c:	4b12      	ldr	r3, [pc, #72]	@ (8004468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800441e:	2200      	movs	r2, #0
 8004420:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004422:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004426:	4910      	ldr	r1, [pc, #64]	@ (8004468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004428:	4810      	ldr	r0, [pc, #64]	@ (800446c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800442a:	f004 fe91 	bl	8009150 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800442e:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8004432:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004434:	4b0c      	ldr	r3, [pc, #48]	@ (8004468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004436:	2204      	movs	r2, #4
 8004438:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800443a:	4b0b      	ldr	r3, [pc, #44]	@ (8004468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800443c:	2210      	movs	r2, #16
 800443e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004440:	4b09      	ldr	r3, [pc, #36]	@ (8004468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004442:	2201      	movs	r2, #1
 8004444:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4a07      	ldr	r2, [pc, #28]	@ (8004468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800444a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800444c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004450:	4905      	ldr	r1, [pc, #20]	@ (8004468 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004452:	4806      	ldr	r0, [pc, #24]	@ (800446c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004454:	f004 fe7c 	bl	8009150 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	4804      	ldr	r0, [pc, #16]	@ (800446c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800445c:	f004 fead 	bl	80091ba <HAL_SDRAM_ProgramRefreshRate>
}
 8004460:	bf00      	nop
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	200081a4 	.word	0x200081a4
 800446c:	20008154 	.word	0x20008154

08004470 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b090      	sub	sp, #64	@ 0x40
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8104 	beq.w	800468a <BSP_SDRAM_MspInit+0x21a>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004486:	4b83      	ldr	r3, [pc, #524]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 8004488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800448a:	4a82      	ldr	r2, [pc, #520]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	6393      	str	r3, [r2, #56]	@ 0x38
 8004492:	4b80      	ldr	r3, [pc, #512]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 8004494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800449c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044a2:	4b7c      	ldr	r3, [pc, #496]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a6:	4a7b      	ldr	r2, [pc, #492]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 80044a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80044ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ae:	4b79      	ldr	r3, [pc, #484]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 80044b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80044b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	623b      	str	r3, [r7, #32]
 80044be:	4b75      	ldr	r3, [pc, #468]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c2:	4a74      	ldr	r2, [pc, #464]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 80044c4:	f043 0304 	orr.w	r3, r3, #4
 80044c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ca:	4b72      	ldr	r3, [pc, #456]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	623b      	str	r3, [r7, #32]
 80044d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044d6:	2300      	movs	r3, #0
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	4b6e      	ldr	r3, [pc, #440]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 80044dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044de:	4a6d      	ldr	r2, [pc, #436]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 80044e0:	f043 0308 	orr.w	r3, r3, #8
 80044e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80044e6:	4b6b      	ldr	r3, [pc, #428]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80044f2:	2300      	movs	r3, #0
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	4b67      	ldr	r3, [pc, #412]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fa:	4a66      	ldr	r2, [pc, #408]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 80044fc:	f043 0310 	orr.w	r3, r3, #16
 8004500:	6313      	str	r3, [r2, #48]	@ 0x30
 8004502:	4b64      	ldr	r3, [pc, #400]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 8004504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	61bb      	str	r3, [r7, #24]
 800450c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	4b60      	ldr	r3, [pc, #384]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004516:	4a5f      	ldr	r2, [pc, #380]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 8004518:	f043 0320 	orr.w	r3, r3, #32
 800451c:	6313      	str	r3, [r2, #48]	@ 0x30
 800451e:	4b5d      	ldr	r3, [pc, #372]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 8004520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800452a:	2300      	movs	r3, #0
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	4b59      	ldr	r3, [pc, #356]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004532:	4a58      	ldr	r2, [pc, #352]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 8004534:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004538:	6313      	str	r3, [r2, #48]	@ 0x30
 800453a:	4b56      	ldr	r3, [pc, #344]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 800453c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	4b52      	ldr	r3, [pc, #328]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 800454c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454e:	4a51      	ldr	r2, [pc, #324]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 8004550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004554:	6313      	str	r3, [r2, #48]	@ 0x30
 8004556:	4b4f      	ldr	r3, [pc, #316]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 8004558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004562:	2300      	movs	r3, #0
 8004564:	60bb      	str	r3, [r7, #8]
 8004566:	4b4b      	ldr	r3, [pc, #300]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 8004568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456a:	4a4a      	ldr	r2, [pc, #296]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 800456c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004570:	6313      	str	r3, [r2, #48]	@ 0x30
 8004572:	4b48      	ldr	r3, [pc, #288]	@ (8004694 <BSP_SDRAM_MspInit+0x224>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457a:	60bb      	str	r3, [r7, #8]
 800457c:	68bb      	ldr	r3, [r7, #8]

    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800457e:	2302      	movs	r3, #2
 8004580:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8004582:	2301      	movs	r3, #1
 8004584:	637b      	str	r3, [r7, #52]	@ 0x34
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004586:	2302      	movs	r3, #2
 8004588:	63bb      	str	r3, [r7, #56]	@ 0x38
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800458a:	230c      	movs	r3, #12
 800458c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOC configuration : PC0 is SDNWE */
    gpio_init_structure.Pin   = GPIO_PIN_0;
 800458e:	2301      	movs	r3, #1
 8004590:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004592:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004596:	4619      	mov	r1, r3
 8004598:	483f      	ldr	r0, [pc, #252]	@ (8004698 <BSP_SDRAM_MspInit+0x228>)
 800459a:	f002 f8b5 	bl	8006708 <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800459e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80045a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                GPIO_PIN_14 | GPIO_PIN_15;


    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80045a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045a8:	4619      	mov	r1, r3
 80045aa:	483c      	ldr	r0, [pc, #240]	@ (800469c <BSP_SDRAM_MspInit+0x22c>)
 80045ac:	f002 f8ac 	bl	8006708 <HAL_GPIO_Init>

    /* GPIOE configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80045b0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80045b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80045b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045ba:	4619      	mov	r1, r3
 80045bc:	4838      	ldr	r0, [pc, #224]	@ (80046a0 <BSP_SDRAM_MspInit+0x230>)
 80045be:	f002 f8a3 	bl	8006708 <HAL_GPIO_Init>

    /* GPIOF configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80045c2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80045c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80045c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045cc:	4619      	mov	r1, r3
 80045ce:	4835      	ldr	r0, [pc, #212]	@ (80046a4 <BSP_SDRAM_MspInit+0x234>)
 80045d0:	f002 f89a 	bl	8006708 <HAL_GPIO_Init>

    /* GPIOG configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80045d4:	f248 1333 	movw	r3, #33075	@ 0x8133
 80045d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80045da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045de:	4619      	mov	r1, r3
 80045e0:	4831      	ldr	r0, [pc, #196]	@ (80046a8 <BSP_SDRAM_MspInit+0x238>)
 80045e2:	f002 f891 	bl	8006708 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80045e6:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 80045ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80045ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045f0:	4619      	mov	r1, r3
 80045f2:	482e      	ldr	r0, [pc, #184]	@ (80046ac <BSP_SDRAM_MspInit+0x23c>)
 80045f4:	f002 f888 	bl	8006708 <HAL_GPIO_Init>

    /* GPIOI configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80045f8:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 80045fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80045fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004602:	4619      	mov	r1, r3
 8004604:	482a      	ldr	r0, [pc, #168]	@ (80046b0 <BSP_SDRAM_MspInit+0x240>)
 8004606:	f002 f87f 	bl	8006708 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800460a:	4b2a      	ldr	r3, [pc, #168]	@ (80046b4 <BSP_SDRAM_MspInit+0x244>)
 800460c:	2200      	movs	r2, #0
 800460e:	605a      	str	r2, [r3, #4]
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004610:	4b28      	ldr	r3, [pc, #160]	@ (80046b4 <BSP_SDRAM_MspInit+0x244>)
 8004612:	2280      	movs	r2, #128	@ 0x80
 8004614:	609a      	str	r2, [r3, #8]
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004616:	4b27      	ldr	r3, [pc, #156]	@ (80046b4 <BSP_SDRAM_MspInit+0x244>)
 8004618:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800461c:	60da      	str	r2, [r3, #12]
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800461e:	4b25      	ldr	r3, [pc, #148]	@ (80046b4 <BSP_SDRAM_MspInit+0x244>)
 8004620:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004624:	611a      	str	r2, [r3, #16]
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004626:	4b23      	ldr	r3, [pc, #140]	@ (80046b4 <BSP_SDRAM_MspInit+0x244>)
 8004628:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800462c:	615a      	str	r2, [r3, #20]
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800462e:	4b21      	ldr	r3, [pc, #132]	@ (80046b4 <BSP_SDRAM_MspInit+0x244>)
 8004630:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004634:	619a      	str	r2, [r3, #24]
    dma_handle.Init.Mode                = DMA_NORMAL;
 8004636:	4b1f      	ldr	r3, [pc, #124]	@ (80046b4 <BSP_SDRAM_MspInit+0x244>)
 8004638:	2200      	movs	r2, #0
 800463a:	61da      	str	r2, [r3, #28]
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800463c:	4b1d      	ldr	r3, [pc, #116]	@ (80046b4 <BSP_SDRAM_MspInit+0x244>)
 800463e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004642:	621a      	str	r2, [r3, #32]
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004644:	4b1b      	ldr	r3, [pc, #108]	@ (80046b4 <BSP_SDRAM_MspInit+0x244>)
 8004646:	2200      	movs	r2, #0
 8004648:	625a      	str	r2, [r3, #36]	@ 0x24
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800464a:	4b1a      	ldr	r3, [pc, #104]	@ (80046b4 <BSP_SDRAM_MspInit+0x244>)
 800464c:	2203      	movs	r2, #3
 800464e:	629a      	str	r2, [r3, #40]	@ 0x28
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004650:	4b18      	ldr	r3, [pc, #96]	@ (80046b4 <BSP_SDRAM_MspInit+0x244>)
 8004652:	2200      	movs	r2, #0
 8004654:	62da      	str	r2, [r3, #44]	@ 0x2c
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8004656:	4b17      	ldr	r3, [pc, #92]	@ (80046b4 <BSP_SDRAM_MspInit+0x244>)
 8004658:	2200      	movs	r2, #0
 800465a:	631a      	str	r2, [r3, #48]	@ 0x30

    dma_handle.Instance = SDRAM_DMAx_STREAM;
 800465c:	4b15      	ldr	r3, [pc, #84]	@ (80046b4 <BSP_SDRAM_MspInit+0x244>)
 800465e:	4a16      	ldr	r2, [pc, #88]	@ (80046b8 <BSP_SDRAM_MspInit+0x248>)
 8004660:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a13      	ldr	r2, [pc, #76]	@ (80046b4 <BSP_SDRAM_MspInit+0x244>)
 8004666:	631a      	str	r2, [r3, #48]	@ 0x30
 8004668:	4a12      	ldr	r2, [pc, #72]	@ (80046b4 <BSP_SDRAM_MspInit+0x244>)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 800466e:	4811      	ldr	r0, [pc, #68]	@ (80046b4 <BSP_SDRAM_MspInit+0x244>)
 8004670:	f000 fc0a 	bl	8004e88 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 8004674:	480f      	ldr	r0, [pc, #60]	@ (80046b4 <BSP_SDRAM_MspInit+0x244>)
 8004676:	f000 fb59 	bl	8004d2c <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 800467a:	2200      	movs	r2, #0
 800467c:	2105      	movs	r1, #5
 800467e:	2038      	movs	r0, #56	@ 0x38
 8004680:	f000 fb01 	bl	8004c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004684:	2038      	movs	r0, #56	@ 0x38
 8004686:	f000 fb1a 	bl	8004cbe <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800468a:	bf00      	nop
 800468c:	3740      	adds	r7, #64	@ 0x40
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40023800 	.word	0x40023800
 8004698:	40020800 	.word	0x40020800
 800469c:	40020c00 	.word	0x40020c00
 80046a0:	40021000 	.word	0x40021000
 80046a4:	40021400 	.word	0x40021400
 80046a8:	40021800 	.word	0x40021800
 80046ac:	40021c00 	.word	0x40021c00
 80046b0:	40022000 	.word	0x40022000
 80046b4:	200081b4 	.word	0x200081b4
 80046b8:	40026410 	.word	0x40026410

080046bc <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	460a      	mov	r2, r1
 80046c6:	80fb      	strh	r3, [r7, #6]
 80046c8:	4613      	mov	r3, r2
 80046ca:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 80046d4:	4b25      	ldr	r3, [pc, #148]	@ (800476c <BSP_TS_Init+0xb0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a25      	ldr	r2, [pc, #148]	@ (8004770 <BSP_TS_Init+0xb4>)
 80046da:	7812      	ldrb	r2, [r2, #0]
 80046dc:	4610      	mov	r0, r2
 80046de:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 80046e0:	4b22      	ldr	r3, [pc, #136]	@ (800476c <BSP_TS_Init+0xb0>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2054      	movs	r0, #84	@ 0x54
 80046e6:	4798      	blx	r3
 80046e8:	4603      	mov	r3, r0
 80046ea:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 80046ec:	7b7b      	ldrb	r3, [r7, #13]
 80046ee:	2b11      	cmp	r3, #17
 80046f0:	d009      	beq.n	8004706 <BSP_TS_Init+0x4a>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 80046f2:	4b1e      	ldr	r3, [pc, #120]	@ (800476c <BSP_TS_Init+0xb0>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2070      	movs	r0, #112	@ 0x70
 80046f8:	4798      	blx	r3
 80046fa:	4603      	mov	r3, r0
 80046fc:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 80046fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004770 <BSP_TS_Init+0xb4>)
 8004700:	2270      	movs	r2, #112	@ 0x70
 8004702:	701a      	strb	r2, [r3, #0]
 8004704:	e002      	b.n	800470c <BSP_TS_Init+0x50>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8004706:	4b1a      	ldr	r3, [pc, #104]	@ (8004770 <BSP_TS_Init+0xb4>)
 8004708:	2254      	movs	r2, #84	@ 0x54
 800470a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE) || (ts_id2 == FT6X36_ID2_VALUE))
 800470c:	7b7b      	ldrb	r3, [r7, #13]
 800470e:	2b11      	cmp	r3, #17
 8004710:	d005      	beq.n	800471e <BSP_TS_Init+0x62>
 8004712:	7bbb      	ldrb	r3, [r7, #14]
 8004714:	2b11      	cmp	r3, #17
 8004716:	d002      	beq.n	800471e <BSP_TS_Init+0x62>
 8004718:	7bbb      	ldrb	r3, [r7, #14]
 800471a:	2bd8      	cmp	r3, #216	@ 0xd8
 800471c:	d11f      	bne.n	800475e <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 800471e:	4b15      	ldr	r3, [pc, #84]	@ (8004774 <BSP_TS_Init+0xb8>)
 8004720:	4a12      	ldr	r2, [pc, #72]	@ (800476c <BSP_TS_Init+0xb0>)
 8004722:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8004724:	88fa      	ldrh	r2, [r7, #6]
 8004726:	88bb      	ldrh	r3, [r7, #4]
 8004728:	429a      	cmp	r2, r3
 800472a:	d203      	bcs.n	8004734 <BSP_TS_Init+0x78>
    {
      ts_orientation = TS_SWAP_NONE;                
 800472c:	4b12      	ldr	r3, [pc, #72]	@ (8004778 <BSP_TS_Init+0xbc>)
 800472e:	2201      	movs	r2, #1
 8004730:	701a      	strb	r2, [r3, #0]
 8004732:	e002      	b.n	800473a <BSP_TS_Init+0x7e>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8004734:	4b10      	ldr	r3, [pc, #64]	@ (8004778 <BSP_TS_Init+0xbc>)
 8004736:	220c      	movs	r2, #12
 8004738:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d110      	bne.n	8004762 <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8004740:	4b0c      	ldr	r3, [pc, #48]	@ (8004774 <BSP_TS_Init+0xb8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	4a0a      	ldr	r2, [pc, #40]	@ (8004770 <BSP_TS_Init+0xb4>)
 8004748:	7812      	ldrb	r2, [r2, #0]
 800474a:	4610      	mov	r0, r2
 800474c:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 800474e:	4b09      	ldr	r3, [pc, #36]	@ (8004774 <BSP_TS_Init+0xb8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	4a06      	ldr	r2, [pc, #24]	@ (8004770 <BSP_TS_Init+0xb4>)
 8004756:	7812      	ldrb	r2, [r2, #0]
 8004758:	4610      	mov	r0, r2
 800475a:	4798      	blx	r3
    if(ts_status == TS_OK)
 800475c:	e001      	b.n	8004762 <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 800475e:	2303      	movs	r3, #3
 8004760:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8004762:	7bfb      	ldrb	r3, [r7, #15]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20000004 	.word	0x20000004
 8004770:	20008219 	.word	0x20008219
 8004774:	20008214 	.word	0x20008214
 8004778:	20008218 	.word	0x20008218

0800477c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800477c:	b590      	push	{r4, r7, lr}
 800477e:	b089      	sub	sp, #36	@ 0x24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8004788:	4b81      	ldr	r3, [pc, #516]	@ (8004990 <BSP_TS_GetState+0x214>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	4a81      	ldr	r2, [pc, #516]	@ (8004994 <BSP_TS_GetState+0x218>)
 8004790:	7812      	ldrb	r2, [r2, #0]
 8004792:	4610      	mov	r0, r2
 8004794:	4798      	blx	r3
 8004796:	4603      	mov	r3, r0
 8004798:	461a      	mov	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 80ef 	beq.w	8004986 <BSP_TS_GetState+0x20a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80047a8:	2300      	movs	r3, #0
 80047aa:	61fb      	str	r3, [r7, #28]
 80047ac:	e0e4      	b.n	8004978 <BSP_TS_GetState+0x1fc>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 80047ae:	4b78      	ldr	r3, [pc, #480]	@ (8004990 <BSP_TS_GetState+0x214>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	4a77      	ldr	r2, [pc, #476]	@ (8004994 <BSP_TS_GetState+0x218>)
 80047b6:	7812      	ldrb	r2, [r2, #0]
 80047b8:	4614      	mov	r4, r2
 80047ba:	f107 0110 	add.w	r1, r7, #16
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	0052      	lsls	r2, r2, #1
 80047c2:	1888      	adds	r0, r1, r2
 80047c4:	f107 010c 	add.w	r1, r7, #12
 80047c8:	69fa      	ldr	r2, [r7, #28]
 80047ca:	0052      	lsls	r2, r2, #1
 80047cc:	440a      	add	r2, r1
 80047ce:	4601      	mov	r1, r0
 80047d0:	4620      	mov	r0, r4
 80047d2:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 80047d4:	4b70      	ldr	r3, [pc, #448]	@ (8004998 <BSP_TS_GetState+0x21c>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d019      	beq.n	8004814 <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	3320      	adds	r3, #32
 80047e6:	443b      	add	r3, r7
 80047e8:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80047ec:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	3320      	adds	r3, #32
 80047f4:	443b      	add	r3, r7
 80047f6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	3320      	adds	r3, #32
 8004800:	443b      	add	r3, r7
 8004802:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	3320      	adds	r3, #32
 800480c:	443b      	add	r3, r7
 800480e:	8b3a      	ldrh	r2, [r7, #24]
 8004810:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 8004814:	4b60      	ldr	r3, [pc, #384]	@ (8004998 <BSP_TS_GetState+0x21c>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00f      	beq.n	8004840 <BSP_TS_GetState+0xc4>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	3320      	adds	r3, #32
 8004826:	443b      	add	r3, r7
 8004828:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800482c:	f5c3 7347 	rsb	r3, r3, #796	@ 0x31c
 8004830:	3303      	adds	r3, #3
 8004832:	b29a      	uxth	r2, r3
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	3320      	adds	r3, #32
 800483a:	443b      	add	r3, r7
 800483c:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 8004840:	4b55      	ldr	r3, [pc, #340]	@ (8004998 <BSP_TS_GetState+0x21c>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00f      	beq.n	800486c <BSP_TS_GetState+0xf0>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	3320      	adds	r3, #32
 8004852:	443b      	add	r3, r7
 8004854:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004858:	f5c3 73ef 	rsb	r3, r3, #478	@ 0x1de
 800485c:	3301      	adds	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	3320      	adds	r3, #32
 8004866:	443b      	add	r3, r7
 8004868:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	3320      	adds	r3, #32
 8004872:	443b      	add	r3, r7
 8004874:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8004878:	4619      	mov	r1, r3
 800487a:	4a48      	ldr	r2, [pc, #288]	@ (800499c <BSP_TS_GetState+0x220>)
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004882:	4299      	cmp	r1, r3
 8004884:	d90d      	bls.n	80048a2 <BSP_TS_GetState+0x126>
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	3320      	adds	r3, #32
 800488c:	443b      	add	r3, r7
 800488e:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8004892:	4942      	ldr	r1, [pc, #264]	@ (800499c <BSP_TS_GetState+0x220>)
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800489a:	b29b      	uxth	r3, r3
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	b29b      	uxth	r3, r3
 80048a0:	e00c      	b.n	80048bc <BSP_TS_GetState+0x140>
 80048a2:	4a3e      	ldr	r2, [pc, #248]	@ (800499c <BSP_TS_GetState+0x220>)
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	3320      	adds	r3, #32
 80048b2:	443b      	add	r3, r7
 80048b4:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	3320      	adds	r3, #32
 80048c4:	443b      	add	r3, r7
 80048c6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80048ca:	4619      	mov	r1, r3
 80048cc:	4a34      	ldr	r2, [pc, #208]	@ (80049a0 <BSP_TS_GetState+0x224>)
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d4:	4299      	cmp	r1, r3
 80048d6:	d90d      	bls.n	80048f4 <BSP_TS_GetState+0x178>
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	3320      	adds	r3, #32
 80048de:	443b      	add	r3, r7
 80048e0:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80048e4:	492e      	ldr	r1, [pc, #184]	@ (80049a0 <BSP_TS_GetState+0x224>)
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	e00c      	b.n	800490e <BSP_TS_GetState+0x192>
 80048f4:	4a2a      	ldr	r2, [pc, #168]	@ (80049a0 <BSP_TS_GetState+0x224>)
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	3320      	adds	r3, #32
 8004904:	443b      	add	r3, r7
 8004906:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	b29b      	uxth	r3, r3
 800490e:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 8004910:	8afa      	ldrh	r2, [r7, #22]
 8004912:	8abb      	ldrh	r3, [r7, #20]
 8004914:	4413      	add	r3, r2
 8004916:	2b05      	cmp	r3, #5
 8004918:	dd15      	ble.n	8004946 <BSP_TS_GetState+0x1ca>
      {
        _x[index] = Raw_x[index];
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	3320      	adds	r3, #32
 8004920:	443b      	add	r3, r7
 8004922:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8004926:	4619      	mov	r1, r3
 8004928:	4a1c      	ldr	r2, [pc, #112]	@ (800499c <BSP_TS_GetState+0x220>)
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	3320      	adds	r3, #32
 8004936:	443b      	add	r3, r7
 8004938:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800493c:	4619      	mov	r1, r3
 800493e:	4a18      	ldr	r2, [pc, #96]	@ (80049a0 <BSP_TS_GetState+0x224>)
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 8004946:	4a15      	ldr	r2, [pc, #84]	@ (800499c <BSP_TS_GetState+0x220>)
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800494e:	b299      	uxth	r1, r3
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	4413      	add	r3, r2
 8004958:	460a      	mov	r2, r1
 800495a:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 800495c:	4a10      	ldr	r2, [pc, #64]	@ (80049a0 <BSP_TS_GetState+0x224>)
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004964:	b299      	uxth	r1, r3
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	4413      	add	r3, r2
 800496e:	460a      	mov	r2, r1
 8004970:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	3301      	adds	r3, #1
 8004976:	61fb      	str	r3, [r7, #28]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	4293      	cmp	r3, r2
 8004982:	f4ff af14 	bcc.w	80047ae <BSP_TS_GetState+0x32>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8004986:	7efb      	ldrb	r3, [r7, #27]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3724      	adds	r7, #36	@ 0x24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd90      	pop	{r4, r7, pc}
 8004990:	20008214 	.word	0x20008214
 8004994:	20008219 	.word	0x20008219
 8004998:	20008218 	.word	0x20008218
 800499c:	2000821c 	.word	0x2000821c
 80049a0:	20008224 	.word	0x20008224

080049a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049a8:	4b0e      	ldr	r3, [pc, #56]	@ (80049e4 <HAL_Init+0x40>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a0d      	ldr	r2, [pc, #52]	@ (80049e4 <HAL_Init+0x40>)
 80049ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049b4:	4b0b      	ldr	r3, [pc, #44]	@ (80049e4 <HAL_Init+0x40>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a0a      	ldr	r2, [pc, #40]	@ (80049e4 <HAL_Init+0x40>)
 80049ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049c0:	4b08      	ldr	r3, [pc, #32]	@ (80049e4 <HAL_Init+0x40>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a07      	ldr	r2, [pc, #28]	@ (80049e4 <HAL_Init+0x40>)
 80049c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049cc:	2003      	movs	r0, #3
 80049ce:	f000 f94f 	bl	8004c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049d2:	200f      	movs	r0, #15
 80049d4:	f000 f808 	bl	80049e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049d8:	f7fd fbc2 	bl	8002160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40023c00 	.word	0x40023c00

080049e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049f0:	4b12      	ldr	r3, [pc, #72]	@ (8004a3c <HAL_InitTick+0x54>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	4b12      	ldr	r3, [pc, #72]	@ (8004a40 <HAL_InitTick+0x58>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	4619      	mov	r1, r3
 80049fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 f967 	bl	8004cda <HAL_SYSTICK_Config>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e00e      	b.n	8004a34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b0f      	cmp	r3, #15
 8004a1a:	d80a      	bhi.n	8004a32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	f04f 30ff 	mov.w	r0, #4294967295
 8004a24:	f000 f92f 	bl	8004c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a28:	4a06      	ldr	r2, [pc, #24]	@ (8004a44 <HAL_InitTick+0x5c>)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e000      	b.n	8004a34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	20000000 	.word	0x20000000
 8004a40:	20000044 	.word	0x20000044
 8004a44:	20000040 	.word	0x20000040

08004a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a4c:	4b06      	ldr	r3, [pc, #24]	@ (8004a68 <HAL_IncTick+0x20>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	461a      	mov	r2, r3
 8004a52:	4b06      	ldr	r3, [pc, #24]	@ (8004a6c <HAL_IncTick+0x24>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4413      	add	r3, r2
 8004a58:	4a04      	ldr	r2, [pc, #16]	@ (8004a6c <HAL_IncTick+0x24>)
 8004a5a:	6013      	str	r3, [r2, #0]
}
 8004a5c:	bf00      	nop
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	20000044 	.word	0x20000044
 8004a6c:	2000822c 	.word	0x2000822c

08004a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  return uwTick;
 8004a74:	4b03      	ldr	r3, [pc, #12]	@ (8004a84 <HAL_GetTick+0x14>)
 8004a76:	681b      	ldr	r3, [r3, #0]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	2000822c 	.word	0x2000822c

08004a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a90:	f7ff ffee 	bl	8004a70 <HAL_GetTick>
 8004a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d005      	beq.n	8004aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8004acc <HAL_Delay+0x44>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4413      	add	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004aae:	bf00      	nop
 8004ab0:	f7ff ffde 	bl	8004a70 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d8f7      	bhi.n	8004ab0 <HAL_Delay+0x28>
  {
  }
}
 8004ac0:	bf00      	nop
 8004ac2:	bf00      	nop
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000044 	.word	0x20000044

08004ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8004b14 <__NVIC_SetPriorityGrouping+0x44>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004aec:	4013      	ands	r3, r2
 8004aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004af8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b02:	4a04      	ldr	r2, [pc, #16]	@ (8004b14 <__NVIC_SetPriorityGrouping+0x44>)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	60d3      	str	r3, [r2, #12]
}
 8004b08:	bf00      	nop
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	e000ed00 	.word	0xe000ed00

08004b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b1c:	4b04      	ldr	r3, [pc, #16]	@ (8004b30 <__NVIC_GetPriorityGrouping+0x18>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	0a1b      	lsrs	r3, r3, #8
 8004b22:	f003 0307 	and.w	r3, r3, #7
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	e000ed00 	.word	0xe000ed00

08004b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	db0b      	blt.n	8004b5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	f003 021f 	and.w	r2, r3, #31
 8004b4c:	4907      	ldr	r1, [pc, #28]	@ (8004b6c <__NVIC_EnableIRQ+0x38>)
 8004b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	2001      	movs	r0, #1
 8004b56:	fa00 f202 	lsl.w	r2, r0, r2
 8004b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	e000e100 	.word	0xe000e100

08004b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	6039      	str	r1, [r7, #0]
 8004b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	db0a      	blt.n	8004b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	490c      	ldr	r1, [pc, #48]	@ (8004bbc <__NVIC_SetPriority+0x4c>)
 8004b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b8e:	0112      	lsls	r2, r2, #4
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	440b      	add	r3, r1
 8004b94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b98:	e00a      	b.n	8004bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	4908      	ldr	r1, [pc, #32]	@ (8004bc0 <__NVIC_SetPriority+0x50>)
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	3b04      	subs	r3, #4
 8004ba8:	0112      	lsls	r2, r2, #4
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	440b      	add	r3, r1
 8004bae:	761a      	strb	r2, [r3, #24]
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	e000e100 	.word	0xe000e100
 8004bc0:	e000ed00 	.word	0xe000ed00

08004bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b089      	sub	sp, #36	@ 0x24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f1c3 0307 	rsb	r3, r3, #7
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	bf28      	it	cs
 8004be2:	2304      	movcs	r3, #4
 8004be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	3304      	adds	r3, #4
 8004bea:	2b06      	cmp	r3, #6
 8004bec:	d902      	bls.n	8004bf4 <NVIC_EncodePriority+0x30>
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	3b03      	subs	r3, #3
 8004bf2:	e000      	b.n	8004bf6 <NVIC_EncodePriority+0x32>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	43da      	mvns	r2, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	401a      	ands	r2, r3
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	fa01 f303 	lsl.w	r3, r1, r3
 8004c16:	43d9      	mvns	r1, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c1c:	4313      	orrs	r3, r2
         );
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3724      	adds	r7, #36	@ 0x24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
	...

08004c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c3c:	d301      	bcc.n	8004c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e00f      	b.n	8004c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c42:	4a0a      	ldr	r2, [pc, #40]	@ (8004c6c <SysTick_Config+0x40>)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c4a:	210f      	movs	r1, #15
 8004c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c50:	f7ff ff8e 	bl	8004b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c54:	4b05      	ldr	r3, [pc, #20]	@ (8004c6c <SysTick_Config+0x40>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c5a:	4b04      	ldr	r3, [pc, #16]	@ (8004c6c <SysTick_Config+0x40>)
 8004c5c:	2207      	movs	r2, #7
 8004c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	e000e010 	.word	0xe000e010

08004c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff ff29 	bl	8004ad0 <__NVIC_SetPriorityGrouping>
}
 8004c7e:	bf00      	nop
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b086      	sub	sp, #24
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
 8004c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c98:	f7ff ff3e 	bl	8004b18 <__NVIC_GetPriorityGrouping>
 8004c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	6978      	ldr	r0, [r7, #20]
 8004ca4:	f7ff ff8e 	bl	8004bc4 <NVIC_EncodePriority>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cae:	4611      	mov	r1, r2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff ff5d 	bl	8004b70 <__NVIC_SetPriority>
}
 8004cb6:	bf00      	nop
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff ff31 	bl	8004b34 <__NVIC_EnableIRQ>
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7ff ffa2 	bl	8004c2c <SysTick_Config>
 8004ce8:	4603      	mov	r3, r0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e00e      	b.n	8004d22 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	795b      	ldrb	r3, [r3, #5]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d105      	bne.n	8004d1a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7fd fa4b 	bl	80021b0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d38:	f7ff fe9a 	bl	8004a70 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e099      	b.n	8004e7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0201 	bic.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d68:	e00f      	b.n	8004d8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d6a:	f7ff fe81 	bl	8004a70 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b05      	cmp	r3, #5
 8004d76:	d908      	bls.n	8004d8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2203      	movs	r2, #3
 8004d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e078      	b.n	8004e7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e8      	bne.n	8004d6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	4b38      	ldr	r3, [pc, #224]	@ (8004e84 <HAL_DMA_Init+0x158>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004db6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d107      	bne.n	8004df4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dec:	4313      	orrs	r3, r2
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f023 0307 	bic.w	r3, r3, #7
 8004e0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d117      	bne.n	8004e4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00e      	beq.n	8004e4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f8bd 	bl	8004fb0 <DMA_CheckFifoParam>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d008      	beq.n	8004e4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2240      	movs	r2, #64	@ 0x40
 8004e40:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e016      	b.n	8004e7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f874 	bl	8004f44 <DMA_CalcBaseAndBitshift>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e64:	223f      	movs	r2, #63	@ 0x3f
 8004e66:	409a      	lsls	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	f010803f 	.word	0xf010803f

08004e88 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e050      	b.n	8004f3c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d101      	bne.n	8004eaa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	e048      	b.n	8004f3c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0201 	bic.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2221      	movs	r2, #33	@ 0x21
 8004ee8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f82a 	bl	8004f44 <DMA_CalcBaseAndBitshift>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f1c:	223f      	movs	r2, #63	@ 0x3f
 8004f1e:	409a      	lsls	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	3b10      	subs	r3, #16
 8004f54:	4a14      	ldr	r2, [pc, #80]	@ (8004fa8 <DMA_CalcBaseAndBitshift+0x64>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	091b      	lsrs	r3, r3, #4
 8004f5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f5e:	4a13      	ldr	r2, [pc, #76]	@ (8004fac <DMA_CalcBaseAndBitshift+0x68>)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d909      	bls.n	8004f86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004f7a:	f023 0303 	bic.w	r3, r3, #3
 8004f7e:	1d1a      	adds	r2, r3, #4
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	659a      	str	r2, [r3, #88]	@ 0x58
 8004f84:	e007      	b.n	8004f96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004f8e:	f023 0303 	bic.w	r3, r3, #3
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	aaaaaaab 	.word	0xaaaaaaab
 8004fac:	08011aec 	.word	0x08011aec

08004fb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d11f      	bne.n	800500a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d856      	bhi.n	800507e <DMA_CheckFifoParam+0xce>
 8004fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd8 <DMA_CheckFifoParam+0x28>)
 8004fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd6:	bf00      	nop
 8004fd8:	08004fe9 	.word	0x08004fe9
 8004fdc:	08004ffb 	.word	0x08004ffb
 8004fe0:	08004fe9 	.word	0x08004fe9
 8004fe4:	0800507f 	.word	0x0800507f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d046      	beq.n	8005082 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ff8:	e043      	b.n	8005082 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005002:	d140      	bne.n	8005086 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005008:	e03d      	b.n	8005086 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005012:	d121      	bne.n	8005058 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b03      	cmp	r3, #3
 8005018:	d837      	bhi.n	800508a <DMA_CheckFifoParam+0xda>
 800501a:	a201      	add	r2, pc, #4	@ (adr r2, 8005020 <DMA_CheckFifoParam+0x70>)
 800501c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005020:	08005031 	.word	0x08005031
 8005024:	08005037 	.word	0x08005037
 8005028:	08005031 	.word	0x08005031
 800502c:	08005049 	.word	0x08005049
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	73fb      	strb	r3, [r7, #15]
      break;
 8005034:	e030      	b.n	8005098 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d025      	beq.n	800508e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005046:	e022      	b.n	800508e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005050:	d11f      	bne.n	8005092 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005056:	e01c      	b.n	8005092 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b02      	cmp	r3, #2
 800505c:	d903      	bls.n	8005066 <DMA_CheckFifoParam+0xb6>
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b03      	cmp	r3, #3
 8005062:	d003      	beq.n	800506c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005064:	e018      	b.n	8005098 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	73fb      	strb	r3, [r7, #15]
      break;
 800506a:	e015      	b.n	8005098 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005070:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00e      	beq.n	8005096 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
      break;
 800507c:	e00b      	b.n	8005096 <DMA_CheckFifoParam+0xe6>
      break;
 800507e:	bf00      	nop
 8005080:	e00a      	b.n	8005098 <DMA_CheckFifoParam+0xe8>
      break;
 8005082:	bf00      	nop
 8005084:	e008      	b.n	8005098 <DMA_CheckFifoParam+0xe8>
      break;
 8005086:	bf00      	nop
 8005088:	e006      	b.n	8005098 <DMA_CheckFifoParam+0xe8>
      break;
 800508a:	bf00      	nop
 800508c:	e004      	b.n	8005098 <DMA_CheckFifoParam+0xe8>
      break;
 800508e:	bf00      	nop
 8005090:	e002      	b.n	8005098 <DMA_CheckFifoParam+0xe8>
      break;   
 8005092:	bf00      	nop
 8005094:	e000      	b.n	8005098 <DMA_CheckFifoParam+0xe8>
      break;
 8005096:	bf00      	nop
    }
  } 
  
  return status; 
 8005098:	7bfb      	ldrb	r3, [r7, #15]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop

080050a8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e03b      	b.n	8005132 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7fd f890 	bl	80021f4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f8:	f023 0107 	bic.w	r1, r3, #7
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005112:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	68d1      	ldr	r1, [r2, #12]
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6812      	ldr	r2, [r2, #0]
 800511e:	430b      	orrs	r3, r1
 8005120:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b086      	sub	sp, #24
 800513e:	af02      	add	r7, sp, #8
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	607a      	str	r2, [r7, #4]
 8005146:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_DMA2D_Start+0x1c>
 8005152:	2302      	movs	r3, #2
 8005154:	e018      	b.n	8005188 <HAL_DMA2D_Start+0x4e>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2202      	movs	r2, #2
 8005162:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 f989 	bl	8005488 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0201 	orr.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d056      	beq.n	800525a <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80051ac:	f7ff fc60 	bl	8004a70 <HAL_GetTick>
 80051b0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80051b2:	e04b      	b.n	800524c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d023      	beq.n	800520e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f003 0320 	and.w	r3, r3, #32
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d4:	f043 0202 	orr.w	r2, r3, #2
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d005      	beq.n	80051f2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ea:	f043 0201 	orr.w	r2, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2221      	movs	r2, #33	@ 0x21
 80051f8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2204      	movs	r2, #4
 80051fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e0a5      	b.n	800535a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005214:	d01a      	beq.n	800524c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005216:	f7ff fc2b 	bl	8004a70 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d302      	bcc.n	800522c <HAL_DMA2D_PollForTransfer+0x9c>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10f      	bne.n	800524c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005230:	f043 0220 	orr.w	r2, r3, #32
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2203      	movs	r2, #3
 800523c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e086      	b.n	800535a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0ac      	beq.n	80051b4 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	f003 0320 	and.w	r3, r3, #32
 8005264:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d061      	beq.n	8005340 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800527c:	f7ff fbf8 	bl	8004a70 <HAL_GetTick>
 8005280:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005282:	e056      	b.n	8005332 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8005292:	2b00      	cmp	r3, #0
 8005294:	d02e      	beq.n	80052f4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a4:	f043 0204 	orr.w	r2, r3, #4
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ba:	f043 0202 	orr.w	r2, r3, #2
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d0:	f043 0201 	orr.w	r2, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2229      	movs	r2, #41	@ 0x29
 80052de:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2204      	movs	r2, #4
 80052e4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e032      	b.n	800535a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fa:	d01a      	beq.n	8005332 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052fc:	f7ff fbb8 	bl	8004a70 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d302      	bcc.n	8005312 <HAL_DMA2D_PollForTransfer+0x182>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10f      	bne.n	8005332 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005316:	f043 0220 	orr.w	r2, r3, #32
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2203      	movs	r2, #3
 8005322:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e013      	b.n	800535a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f003 0310 	and.w	r3, r3, #16
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0a1      	beq.n	8005284 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2212      	movs	r2, #18
 8005346:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_DMA2D_ConfigLayer+0x20>
 8005380:	2302      	movs	r3, #2
 8005382:	e079      	b.n	8005478 <HAL_DMA2D_ConfigLayer+0x114>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	3318      	adds	r3, #24
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	4413      	add	r3, r2
 800539e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	041b      	lsls	r3, r3, #16
 80053aa:	4313      	orrs	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80053ae:	4b35      	ldr	r3, [pc, #212]	@ (8005484 <HAL_DMA2D_ConfigLayer+0x120>)
 80053b0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b0a      	cmp	r3, #10
 80053b8:	d003      	beq.n	80053c2 <HAL_DMA2D_ConfigLayer+0x5e>
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2b09      	cmp	r3, #9
 80053c0:	d107      	bne.n	80053d2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]
 80053d0:	e005      	b.n	80053de <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	061b      	lsls	r3, r3, #24
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d120      	bne.n	8005426 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	43db      	mvns	r3, r3
 80053ee:	ea02 0103 	and.w	r1, r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	6812      	ldr	r2, [r2, #0]
 8005404:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b0a      	cmp	r3, #10
 800540c:	d003      	beq.n	8005416 <HAL_DMA2D_ConfigLayer+0xb2>
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b09      	cmp	r3, #9
 8005414:	d127      	bne.n	8005466 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005422:	629a      	str	r2, [r3, #40]	@ 0x28
 8005424:	e01f      	b.n	8005466 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69da      	ldr	r2, [r3, #28]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	43db      	mvns	r3, r3
 8005430:	ea02 0103 	and.w	r1, r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	430a      	orrs	r2, r1
 800543c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	6812      	ldr	r2, [r2, #0]
 8005446:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	2b0a      	cmp	r3, #10
 800544e:	d003      	beq.n	8005458 <HAL_DMA2D_ConfigLayer+0xf4>
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b09      	cmp	r3, #9
 8005456:	d106      	bne.n	8005466 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005464:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	371c      	adds	r7, #28
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	ff03000f 	.word	0xff03000f

08005488 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005488:	b480      	push	{r7}
 800548a:	b08b      	sub	sp, #44	@ 0x2c
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800549c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	041a      	lsls	r2, r3, #16
 80054a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a6:	431a      	orrs	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054c0:	d174      	bne.n	80055ac <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80054c8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80054d0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80054d8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d108      	bne.n	80054fa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	431a      	orrs	r2, r3
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f8:	e053      	b.n	80055a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d106      	bne.n	8005510 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	4313      	orrs	r3, r2
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	4313      	orrs	r3, r2
 800550c:	627b      	str	r3, [r7, #36]	@ 0x24
 800550e:	e048      	b.n	80055a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	2b02      	cmp	r3, #2
 8005516:	d111      	bne.n	800553c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	0cdb      	lsrs	r3, r3, #19
 800551c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	0a9b      	lsrs	r3, r3, #10
 8005522:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	08db      	lsrs	r3, r3, #3
 8005528:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	02db      	lsls	r3, r3, #11
 8005532:	4313      	orrs	r3, r2
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	627b      	str	r3, [r7, #36]	@ 0x24
 800553a:	e032      	b.n	80055a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b03      	cmp	r3, #3
 8005542:	d117      	bne.n	8005574 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	0fdb      	lsrs	r3, r3, #31
 8005548:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	0cdb      	lsrs	r3, r3, #19
 800554e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	0adb      	lsrs	r3, r3, #11
 8005554:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	08db      	lsrs	r3, r3, #3
 800555a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	029b      	lsls	r3, r3, #10
 8005564:	431a      	orrs	r2, r3
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	03db      	lsls	r3, r3, #15
 800556a:	4313      	orrs	r3, r2
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	627b      	str	r3, [r7, #36]	@ 0x24
 8005572:	e016      	b.n	80055a2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	0f1b      	lsrs	r3, r3, #28
 8005578:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	0d1b      	lsrs	r3, r3, #20
 800557e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	0b1b      	lsrs	r3, r3, #12
 8005584:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	091b      	lsrs	r3, r3, #4
 800558a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	011a      	lsls	r2, r3, #4
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	021b      	lsls	r3, r3, #8
 8005594:	431a      	orrs	r2, r3
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	031b      	lsls	r3, r3, #12
 800559a:	4313      	orrs	r3, r2
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	4313      	orrs	r3, r2
 80055a0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055a8:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80055aa:	e003      	b.n	80055b4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	60da      	str	r2, [r3, #12]
}
 80055b4:	bf00      	nop
 80055b6:	372c      	adds	r7, #44	@ 0x2c
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	019a      	lsls	r2, r3, #6
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	431a      	orrs	r2, r3
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	021b      	lsls	r3, r3, #8
 80055da:	431a      	orrs	r2, r3
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	041b      	lsls	r3, r3, #16
 80055e0:	431a      	orrs	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 80055e6:	bf00      	nop
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b086      	sub	sp, #24
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	607a      	str	r2, [r7, #4]
 80055fe:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005600:	f7ff fa36 	bl	8004a70 <HAL_GetTick>
 8005604:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005606:	e009      	b.n	800561c <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005608:	f7ff fa32 	bl	8004a70 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005616:	d901      	bls.n	800561c <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e015      	b.n	8005648 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0ee      	beq.n	8005608 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	019a      	lsls	r2, r3, #6
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	431a      	orrs	r2, r3
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	021b      	lsls	r3, r3, #8
 8005636:	ea42 0103 	orr.w	r1, r2, r3
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	041a      	lsls	r2, r3, #16
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08a      	sub	sp, #40	@ 0x28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e16e      	b.n	8005942 <HAL_DSI_Init+0x2f2>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	7c5b      	ldrb	r3, [r3, #17]
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d102      	bne.n	8005674 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fc fde2 	bl	8002238 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2203      	movs	r2, #3
 8005678:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800567a:	2300      	movs	r3, #0
 800567c:	61bb      	str	r3, [r7, #24]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800568e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800569a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800569e:	61bb      	str	r3, [r7, #24]
 80056a0:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056a2:	f7ff f9e5 	bl	8004a70 <HAL_GetTick>
 80056a6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80056a8:	e009      	b.n	80056be <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80056aa:	f7ff f9e1 	bl	8004a70 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056b8:	d901      	bls.n	80056be <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e141      	b.n	8005942 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80056c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0ed      	beq.n	80056aa <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6812      	ldr	r2, [r2, #0]
 80056da:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 80056de:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 80056e2:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80056fa:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8005702:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0201 	orr.w	r2, r2, #1
 8005722:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8005736:	2001      	movs	r0, #1
 8005738:	f7ff f9a6 	bl	8004a88 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 800573c:	f7ff f998 	bl	8004a70 <HAL_GetTick>
 8005740:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8005742:	e009      	b.n	8005758 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005744:	f7ff f994 	bl	8004a70 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005752:	d901      	bls.n	8005758 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e0f4      	b.n	8005942 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8005760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0ed      	beq.n	8005744 <HAL_DSI_Init+0xf4>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 8005768:	2300      	movs	r3, #0
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0201 	orr.w	r2, r2, #1
 800577a:	605a      	str	r2, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	613b      	str	r3, [r7, #16]
 8005788:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005798:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6899      	ldr	r1, [r3, #8]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f042 0202 	orr.w	r2, r2, #2
 80057bc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f042 0204 	orr.w	r2, r2, #4
 80057d0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0203 	bic.w	r2, r2, #3
 80057e4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 80057fe:	f7ff f937 	bl	8004a70 <HAL_GetTick>
 8005802:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800580c:	f003 0303 	and.w	r3, r3, #3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d123      	bne.n	800585c <HAL_DSI_Init+0x20c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8005814:	e00c      	b.n	8005830 <HAL_DSI_Init+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005816:	f7ff f92b 	bl	8004a70 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005824:	d904      	bls.n	8005830 <HAL_DSI_Init+0x1e0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e088      	b.n	8005942 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005838:	f003 0314 	and.w	r3, r3, #20
 800583c:	2b14      	cmp	r3, #20
 800583e:	d1ea      	bne.n	8005816 <HAL_DSI_Init+0x1c6>
 8005840:	e014      	b.n	800586c <HAL_DSI_Init+0x21c>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005842:	f7ff f915 	bl	8004a70 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005850:	d904      	bls.n	800585c <HAL_DSI_Init+0x20c>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e072      	b.n	8005942 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005864:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8005868:	2b94      	cmp	r3, #148	@ 0x94
 800586a:	d1ea      	bne.n	8005842 <HAL_DSI_Init+0x1f2>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d002      	beq.n	800587a <HAL_DSI_Init+0x22a>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	e000      	b.n	800587c <HAL_DSI_Init+0x22c>
 800587a:	2301      	movs	r3, #1
 800587c:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	4a32      	ldr	r2, [pc, #200]	@ (800594c <HAL_DSI_Init+0x2fc>)
 8005882:	fb03 f202 	mul.w	r2, r3, r2
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	409a      	lsls	r2, r3
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8005898:	fb01 f303 	mul.w	r3, r1, r3
 800589c:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a0:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80058b2:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69fa      	ldr	r2, [r7, #28]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2200      	movs	r2, #0
 80058da:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0201 	bic.w	r2, r2, #1
 80058f6:	605a      	str	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0203 	bic.w	r2, r2, #3
 8005916:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f042 0201 	orr.w	r2, r2, #1
 8005930:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3728      	adds	r7, #40	@ 0x28
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	003d0900 	.word	0x003d0900

08005950 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e066      	b.n	8005a30 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2203      	movs	r2, #3
 8005966:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8005968:	2300      	movs	r3, #0
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0208 	bic.w	r2, r2, #8
 800597c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8005988:	f003 0308 	and.w	r3, r3, #8
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8005990:	2300      	movs	r3, #0
 8005992:	613b      	str	r3, [r7, #16]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0201 	bic.w	r2, r2, #1
 80059a2:	605a      	str	r2, [r3, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0206 	bic.w	r2, r2, #6
 80059c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 80059c6:	2300      	movs	r3, #0
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0201 	bic.w	r2, r2, #1
 80059da:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 80059ee:	2300      	movs	r3, #0
 80059f0:	60bb      	str	r3, [r7, #8]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8005a02:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8005a0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a12:	60bb      	str	r3, [r7, #8]
 8005a14:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fc fc30 	bl	800227c <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3718      	adds	r7, #24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	7c1b      	ldrb	r3, [r3, #16]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d101      	bne.n	8005a4e <HAL_DSI_ConfigErrorMonitor+0x16>
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	e0ab      	b.n	8005ba6 <HAL_DSI_ConfigErrorMonitor+0x16e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00b      	beq.n	8005a90 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8005a88:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8005a8c:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d009      	beq.n	8005aae <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 8005aaa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d009      	beq.n	8005acc <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f042 0201 	orr.w	r2, r2, #1
 8005ac8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d009      	beq.n	8005aea <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0202 	orr.w	r2, r2, #2
 8005ae6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	f003 0310 	and.w	r3, r3, #16
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d009      	beq.n	8005b08 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 020c 	orr.w	r2, r2, #12
 8005b04:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	f003 0320 	and.w	r3, r3, #32
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d009      	beq.n	8005b26 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0210 	orr.w	r2, r2, #16
 8005b22:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d009      	beq.n	8005b44 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f042 0220 	orr.w	r2, r2, #32
 8005b40:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b5e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d009      	beq.n	8005b80 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b7c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d009      	beq.n	8005b9e <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8005b9a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	7c1b      	ldrb	r3, [r3, #16]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_DSI_SetGenericVCID+0x16>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e016      	b.n	8005bf6 <HAL_DSI_SetGenericVCID+0x44>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0203 	bic.w	r2, r2, #3
 8005bdc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	7c1b      	ldrb	r3, [r3, #16]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_DSI_ConfigVideoMode+0x16>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e1f6      	b.n	8006006 <HAL_DSI_ConfigVideoMode+0x404>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0201 	bic.w	r2, r2, #1
 8005c2c:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0201 	bic.w	r2, r2, #1
 8005c3e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0203 	bic.w	r2, r2, #3
 8005c50:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6812      	ldr	r2, [r2, #0]
 8005c6e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005c72:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005c76:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	691a      	ldr	r2, [r3, #16]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6812      	ldr	r2, [r2, #0]
 8005c94:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8005c98:	f023 031f 	bic.w	r3, r3, #31
 8005c9c:	6413      	str	r3, [r2, #64]	@ 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	695a      	ldr	r2, [r3, #20]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6812      	ldr	r2, [r2, #0]
 8005cba:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8005cbe:	f023 031f 	bic.w	r3, r3, #31
 8005cc2:	6453      	str	r3, [r2, #68]	@ 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	699a      	ldr	r2, [r3, #24]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0203 	bic.w	r2, r2, #3
 8005ce4:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68d9      	ldr	r1, [r3, #12]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695a      	ldr	r2, [r3, #20]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0207 	bic.w	r2, r2, #7
 8005d06:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6959      	ldr	r1, [r3, #20]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	431a      	orrs	r2, r3
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691a      	ldr	r2, [r3, #16]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 020f 	bic.w	r2, r2, #15
 8005d34:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6919      	ldr	r1, [r3, #16]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 020e 	bic.w	r2, r2, #14
 8005d58:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	005a      	lsls	r2, r3, #1
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d110      	bne.n	8005d9e <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	691a      	ldr	r2, [r3, #16]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d8a:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6919      	ldr	r1, [r3, #16]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6812      	ldr	r2, [r2, #0]
 8005da8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005dac:	f023 030f 	bic.w	r3, r3, #15
 8005db0:	6493      	str	r3, [r2, #72]	@ 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6812      	ldr	r2, [r2, #0]
 8005dce:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005dd2:	f023 030f 	bic.w	r3, r3, #15
 8005dd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6812      	ldr	r2, [r2, #0]
 8005df4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005df8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005dfc:	6513      	str	r3, [r2, #80]	@ 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6812      	ldr	r2, [r2, #0]
 8005e1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005e1e:	f023 0303 	bic.w	r3, r3, #3
 8005e22:	6553      	str	r3, [r2, #84]	@ 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6812      	ldr	r2, [r2, #0]
 8005e40:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005e44:	f023 0303 	bic.w	r3, r3, #3
 8005e48:	6593      	str	r3, [r2, #88]	@ 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6812      	ldr	r2, [r2, #0]
 8005e66:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005e6a:	f023 0303 	bic.w	r3, r3, #3
 8005e6e:	65d3      	str	r3, [r2, #92]	@ 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6812      	ldr	r2, [r2, #0]
 8005e8c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005e90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005e94:	6613      	str	r3, [r2, #96]	@ 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005eb6:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	699a      	ldr	r2, [r3, #24]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 027f 	bic.w	r2, r2, #16711680	@ 0xff0000
 8005ed8:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6999      	ldr	r1, [r3, #24]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ee4:	041a      	lsls	r2, r3, #16
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	699a      	ldr	r2, [r3, #24]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005efc:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6999      	ldr	r1, [r3, #24]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f40:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f62:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f84:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005fa6:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005fea:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
 800601a:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	7c1b      	ldrb	r3, [r3, #16]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_DSI_ConfigFlowControl+0x16>
 8006024:	2302      	movs	r3, #2
 8006026:	e016      	b.n	8006056 <HAL_DSI_ConfigFlowControl+0x44>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 021f 	bic.w	r2, r2, #31
 800603c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8006062:	b480      	push	{r7}
 8006064:	b085      	sub	sp, #20
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
 800606a:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	7c1b      	ldrb	r3, [r3, #16]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_DSI_ConfigPhyTimer+0x16>
 8006074:	2302      	movs	r3, #2
 8006076:	e058      	b.n	800612a <HAL_DSI_ConfigPhyTimer+0xc8>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	4293      	cmp	r3, r2
 8006088:	bf38      	it	cc
 800608a:	4613      	movcc	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 800609e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	041a      	lsls	r2, r3, #16
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	431a      	orrs	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80060cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	041b      	lsls	r3, r3, #16
 80060e2:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006106:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	021a      	lsls	r2, r3, #8
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	430a      	orrs	r2, r1
 800611e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	7c1b      	ldrb	r3, [r3, #16]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d101      	bne.n	800614c <HAL_DSI_ConfigHostTimeouts+0x16>
 8006148:	2302      	movs	r3, #2
 800614a:	e0b4      	b.n	80062b6 <HAL_DSI_ConfigHostTimeouts+0x180>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006160:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6899      	ldr	r1, [r3, #8]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	021a      	lsls	r2, r3, #8
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	b292      	uxth	r2, r2
 8006182:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	041a      	lsls	r2, r3, #16
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	430a      	orrs	r2, r1
 8006196:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6812      	ldr	r2, [r2, #0]
 80061a2:	0c1b      	lsrs	r3, r3, #16
 80061a4:	041b      	lsls	r3, r3, #16
 80061a6:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	6812      	ldr	r2, [r2, #0]
 80061c4:	0c1b      	lsrs	r3, r3, #16
 80061c6:	041b      	lsls	r3, r3, #16
 80061c8:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	68da      	ldr	r2, [r3, #12]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	6812      	ldr	r2, [r2, #0]
 80061e8:	0c1b      	lsrs	r3, r3, #16
 80061ea:	041b      	lsls	r3, r3, #16
 80061ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6812      	ldr	r2, [r2, #0]
 8006212:	0c1b      	lsrs	r3, r3, #16
 8006214:	041b      	lsls	r3, r3, #16
 8006216:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	695a      	ldr	r2, [r3, #20]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8006240:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	699a      	ldr	r2, [r3, #24]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6812      	ldr	r2, [r2, #0]
 8006266:	0c1b      	lsrs	r3, r3, #16
 8006268:	041b      	lsls	r3, r3, #16
 800626a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	69da      	ldr	r2, [r3, #28]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6812      	ldr	r2, [r2, #0]
 8006290:	0c1b      	lsrs	r3, r3, #16
 8006292:	041b      	lsls	r3, r3, #16
 8006294:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	6a1a      	ldr	r2, [r3, #32]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b085      	sub	sp, #20
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	7c1b      	ldrb	r3, [r3, #16]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d101      	bne.n	80062d6 <HAL_DSI_Start+0x14>
 80062d2:	2302      	movs	r3, #2
 80062d4:	e02b      	b.n	800632e <HAL_DSI_Start+0x6c>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80062dc:	2300      	movs	r3, #0
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	605a      	str	r2, [r3, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80062fe:	2300      	movs	r3, #0
 8006300:	60bb      	str	r3, [r7, #8]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0208 	orr.w	r2, r2, #8
 8006312:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800631e:	f003 0308 	and.w	r3, r3, #8
 8006322:	60bb      	str	r3, [r7, #8]
 8006324:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <HAL_DSI_Stop>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Stop(DSI_HandleTypeDef *hdsi)
{
 800633a:	b480      	push	{r7}
 800633c:	b085      	sub	sp, #20
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	7c1b      	ldrb	r3, [r3, #16]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d101      	bne.n	800634e <HAL_DSI_Stop+0x14>
 800634a:	2302      	movs	r3, #2
 800634c:	e02b      	b.n	80063a6 <HAL_DSI_Stop+0x6c>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	741a      	strb	r2, [r3, #16]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8006354:	2300      	movs	r3, #0
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 0201 	bic.w	r2, r2, #1
 8006366:	605a      	str	r2, [r3, #4]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	68fb      	ldr	r3, [r7, #12]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8006376:	2300      	movs	r3, #0
 8006378:	60bb      	str	r3, [r7, #8]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0208 	bic.w	r2, r2, #8
 800638a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006396:	f003 0308 	and.w	r3, r3, #8
 800639a:	60bb      	str	r3, [r7, #8]
 800639c:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b088      	sub	sp, #32
 80063b6:	af02      	add	r7, sp, #8
 80063b8:	60f8      	str	r0, [r7, #12]
 80063ba:	60b9      	str	r1, [r7, #8]
 80063bc:	607a      	str	r2, [r7, #4]
 80063be:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	7c1b      	ldrb	r3, [r3, #16]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <HAL_DSI_ShortWrite+0x1a>
 80063c8:	2302      	movs	r3, #2
 80063ca:	e010      	b.n	80063ee <HAL_DSI_ShortWrite+0x3c>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2201      	movs	r2, #1
 80063d0:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	68b9      	ldr	r1, [r7, #8]
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f7ff f908 	bl	80055f2 <DSI_ShortWrite>
 80063e2:	4603      	mov	r3, r0
 80063e4:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	741a      	strb	r2, [r3, #16]

  return status;
 80063ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b08c      	sub	sp, #48	@ 0x30
 80063fa:	af02      	add	r7, sp, #8
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	60b9      	str	r1, [r7, #8]
 8006400:	607a      	str	r2, [r7, #4]
 8006402:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;
 8006404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006406:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	7c1b      	ldrb	r3, [r3, #16]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d101      	bne.n	8006414 <HAL_DSI_LongWrite+0x1e>
 8006410:	2302      	movs	r3, #2
 8006412:	e084      	b.n	800651e <HAL_DSI_LongWrite+0x128>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2201      	movs	r2, #1
 8006418:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800641a:	f7fe fb29 	bl	8004a70 <HAL_GetTick>
 800641e:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006420:	e00c      	b.n	800643c <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006422:	f7fe fb25 	bl	8004a70 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006430:	d904      	bls.n	800643c <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e070      	b.n	800651e <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0eb      	beq.n	8006422 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 800644a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644c:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b03      	cmp	r3, #3
 8006452:	bf28      	it	cs
 8006454:	2303      	movcs	r3, #3
 8006456:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8006458:	2300      	movs	r3, #0
 800645a:	623b      	str	r3, [r7, #32]
 800645c:	e00f      	b.n	800647e <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	4413      	add	r3, r2
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	3301      	adds	r3, #1
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	fa02 f303 	lsl.w	r3, r2, r3
 8006472:	69fa      	ldr	r2, [r7, #28]
 8006474:	4313      	orrs	r3, r2
 8006476:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	3301      	adds	r3, #1
 800647c:	623b      	str	r3, [r7, #32]
 800647e:	6a3a      	ldr	r2, [r7, #32]
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	429a      	cmp	r2, r3
 8006484:	d3eb      	bcc.n	800645e <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69fa      	ldr	r2, [r7, #28]
 800648c:	671a      	str	r2, [r3, #112]	@ 0x70

  uicounter = NbParams - nbBytes;
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	627b      	str	r3, [r7, #36]	@ 0x24
  pparams += nbBytes;
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	4413      	add	r3, r2
 800649c:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800649e:	e028      	b.n	80064f2 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	2b04      	cmp	r3, #4
 80064a4:	bf28      	it	cs
 80064a6:	2304      	movcs	r3, #4
 80064a8:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80064ae:	2300      	movs	r3, #0
 80064b0:	623b      	str	r3, [r7, #32]
 80064b2:	e00e      	b.n	80064d2 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	4413      	add	r3, r2
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	00db      	lsls	r3, r3, #3
 80064c2:	fa02 f303 	lsl.w	r3, r2, r3
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	3301      	adds	r3, #1
 80064d0:	623b      	str	r3, [r7, #32]
 80064d2:	6a3a      	ldr	r2, [r7, #32]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d3ec      	bcc.n	80064b4 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69fa      	ldr	r2, [r7, #28]
 80064e0:	671a      	str	r2, [r3, #112]	@ 0x70

    uicounter -= nbBytes;
 80064e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pparams += nbBytes;
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	4413      	add	r3, r2
 80064f0:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1d3      	bne.n	80064a0 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8006500:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	3301      	adds	r3, #1
 8006506:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8006508:	b2db      	uxtb	r3, r3
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	4613      	mov	r3, r2
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	68b9      	ldr	r1, [r7, #8]
 8006512:	f7ff f855 	bl	80055c0 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3728      	adds	r7, #40	@ 0x28
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b08c      	sub	sp, #48	@ 0x30
 800652a:	af02      	add	r7, sp, #8
 800652c:	60f8      	str	r0, [r7, #12]
 800652e:	60b9      	str	r1, [r7, #8]
 8006530:	607a      	str	r2, [r7, #4]
 8006532:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint8_t *pdata = Array;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t datasize = Size;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	623b      	str	r3, [r7, #32]
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	7c1b      	ldrb	r3, [r3, #16]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d101      	bne.n	8006548 <HAL_DSI_Read+0x22>
 8006544:	2302      	movs	r3, #2
 8006546:	e0ae      	b.n	80066a6 <HAL_DSI_Read+0x180>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2201      	movs	r2, #1
 800654c:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	2b02      	cmp	r3, #2
 8006552:	d913      	bls.n	800657c <HAL_DSI_Read+0x56>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	b2da      	uxtb	r2, r3
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	0a1b      	lsrs	r3, r3, #8
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800655c:	b2db      	uxtb	r3, r3
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	4613      	mov	r3, r2
 8006562:	2237      	movs	r2, #55	@ 0x37
 8006564:	68b9      	ldr	r1, [r7, #8]
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f7ff f843 	bl	80055f2 <DSI_ShortWrite>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d004      	beq.n	800657c <HAL_DSI_Read+0x56>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e094      	b.n	80066a6 <HAL_DSI_Read+0x180>
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800657c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657e:	2b06      	cmp	r3, #6
 8006580:	d109      	bne.n	8006596 <HAL_DSI_Read+0x70>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6818      	ldr	r0, [r3, #0]
 8006586:	2300      	movs	r3, #0
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800658c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	f7ff f816 	bl	80055c0 <DSI_ConfigPacketHeader>
 8006594:	e033      	b.n	80065fe <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8006596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006598:	2b04      	cmp	r3, #4
 800659a:	d109      	bne.n	80065b0 <HAL_DSI_Read+0x8a>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6818      	ldr	r0, [r3, #0]
 80065a0:	2300      	movs	r3, #0
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	2300      	movs	r3, #0
 80065a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065a8:	68b9      	ldr	r1, [r7, #8]
 80065aa:	f7ff f809 	bl	80055c0 <DSI_ConfigPacketHeader>
 80065ae:	e026      	b.n	80065fe <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 80065b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b2:	2b14      	cmp	r3, #20
 80065b4:	d10c      	bne.n	80065d0 <HAL_DSI_Read+0xaa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	2300      	movs	r3, #0
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	4613      	mov	r3, r2
 80065c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065c8:	68b9      	ldr	r1, [r7, #8]
 80065ca:	f7fe fff9 	bl	80055c0 <DSI_ConfigPacketHeader>
 80065ce:	e016      	b.n	80065fe <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 80065d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d2:	2b24      	cmp	r3, #36	@ 0x24
 80065d4:	d10e      	bne.n	80065f4 <HAL_DSI_Read+0xce>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6818      	ldr	r0, [r3, #0]
 80065da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e2:	3301      	adds	r3, #1
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	4613      	mov	r3, r2
 80065ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065ec:	68b9      	ldr	r1, [r7, #8]
 80065ee:	f7fe ffe7 	bl	80055c0 <DSI_ConfigPacketHeader>
 80065f2:	e004      	b.n	80065fe <HAL_DSI_Read+0xd8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e053      	b.n	80066a6 <HAL_DSI_Read+0x180>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80065fe:	f7fe fa37 	bl	8004a70 <HAL_GetTick>
 8006602:	61b8      	str	r0, [r7, #24]

  /* If DSI fifo is not empty, read requested bytes */
  while (((int32_t)(datasize)) > 0)
 8006604:	e048      	b.n	8006698 <HAL_DSI_Read+0x172>
  {
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800660c:	f003 0310 	and.w	r3, r3, #16
 8006610:	2b00      	cmp	r3, #0
 8006612:	d120      	bne.n	8006656 <HAL_DSI_Read+0x130>
    {
      fifoword = hdsi->Instance->GPDR;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800661a:	617b      	str	r3, [r7, #20]
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	2b04      	cmp	r3, #4
 8006620:	bf28      	it	cs
 8006622:	2304      	movcs	r3, #4
 8006624:	613b      	str	r3, [r7, #16]

      for (count = 0U; count < nbbytes; count++)
 8006626:	2300      	movs	r3, #0
 8006628:	61fb      	str	r3, [r7, #28]
 800662a:	e010      	b.n	800664e <HAL_DSI_Read+0x128>
      {
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	00db      	lsls	r3, r3, #3
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	fa22 f303 	lsr.w	r3, r2, r3
 8006636:	b2da      	uxtb	r2, r3
 8006638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663a:	701a      	strb	r2, [r3, #0]
        pdata++;
 800663c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663e:	3301      	adds	r3, #1
 8006640:	627b      	str	r3, [r7, #36]	@ 0x24
        datasize--;
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	3b01      	subs	r3, #1
 8006646:	623b      	str	r3, [r7, #32]
      for (count = 0U; count < nbbytes; count++)
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	3301      	adds	r3, #1
 800664c:	61fb      	str	r3, [r7, #28]
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	429a      	cmp	r2, r3
 8006654:	d3ea      	bcc.n	800662c <HAL_DSI_Read+0x106>
      }
    }

    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006656:	f7fe fa0b 	bl	8004a70 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006664:	d904      	bls.n	8006670 <HAL_DSI_Read+0x14a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e01a      	b.n	80066a6 <HAL_DSI_Read+0x180>

    /* Software workaround to avoid HAL_TIMEOUT when a DSI read command is   */
    /* issued to the panel and the read data is not captured by the DSI Host */
    /* which returns Packet Size Error.                                      */
    /* Need to ensure that the Read command has finished before checking PSE */
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10c      	bne.n	8006698 <HAL_DSI_Read+0x172>
    {
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006686:	f003 0320 	and.w	r3, r3, #32
 800668a:	2b20      	cmp	r3, #32
 800668c:	d104      	bne.n	8006698 <HAL_DSI_Read+0x172>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	741a      	strb	r2, [r3, #16]

        return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e006      	b.n	80066a6 <HAL_DSI_Read+0x180>
  while (((int32_t)(datasize)) > 0)
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	2b00      	cmp	r3, #0
 800669c:	dcb3      	bgt.n	8006606 <HAL_DSI_Read+0xe0>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3728      	adds	r7, #40	@ 0x28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	7c1b      	ldrb	r3, [r3, #16]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d101      	bne.n	80066c4 <HAL_DSI_SetLowPowerRXFilter+0x16>
 80066c0:	2302      	movs	r3, #2
 80066c2:	e01b      	b.n	80066fc <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 80066da:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	065a      	lsls	r2, r3, #25
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006708:	b480      	push	{r7}
 800670a:	b089      	sub	sp, #36	@ 0x24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006712:	2300      	movs	r3, #0
 8006714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006716:	2300      	movs	r3, #0
 8006718:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800671a:	2300      	movs	r3, #0
 800671c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800671e:	2300      	movs	r3, #0
 8006720:	61fb      	str	r3, [r7, #28]
 8006722:	e177      	b.n	8006a14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006724:	2201      	movs	r2, #1
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	fa02 f303 	lsl.w	r3, r2, r3
 800672c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	4013      	ands	r3, r2
 8006736:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	429a      	cmp	r2, r3
 800673e:	f040 8166 	bne.w	8006a0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	2b01      	cmp	r3, #1
 800674c:	d005      	beq.n	800675a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006756:	2b02      	cmp	r3, #2
 8006758:	d130      	bne.n	80067bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	2203      	movs	r2, #3
 8006766:	fa02 f303 	lsl.w	r3, r2, r3
 800676a:	43db      	mvns	r3, r3
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	4013      	ands	r3, r2
 8006770:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	fa02 f303 	lsl.w	r3, r2, r3
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	4313      	orrs	r3, r2
 8006782:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006790:	2201      	movs	r2, #1
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	fa02 f303 	lsl.w	r3, r2, r3
 8006798:	43db      	mvns	r3, r3
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	4013      	ands	r3, r2
 800679e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	091b      	lsrs	r3, r3, #4
 80067a6:	f003 0201 	and.w	r2, r3, #1
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	fa02 f303 	lsl.w	r3, r2, r3
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f003 0303 	and.w	r3, r3, #3
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	d017      	beq.n	80067f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	2203      	movs	r2, #3
 80067d4:	fa02 f303 	lsl.w	r3, r2, r3
 80067d8:	43db      	mvns	r3, r3
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	4013      	ands	r3, r2
 80067de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	005b      	lsls	r3, r3, #1
 80067e8:	fa02 f303 	lsl.w	r3, r2, r3
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f003 0303 	and.w	r3, r3, #3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d123      	bne.n	800684c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	08da      	lsrs	r2, r3, #3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	3208      	adds	r2, #8
 800680c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006810:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	f003 0307 	and.w	r3, r3, #7
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	220f      	movs	r2, #15
 800681c:	fa02 f303 	lsl.w	r3, r2, r3
 8006820:	43db      	mvns	r3, r3
 8006822:	69ba      	ldr	r2, [r7, #24]
 8006824:	4013      	ands	r3, r2
 8006826:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	691a      	ldr	r2, [r3, #16]
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f003 0307 	and.w	r3, r3, #7
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	fa02 f303 	lsl.w	r3, r2, r3
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	4313      	orrs	r3, r2
 800683c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	08da      	lsrs	r2, r3, #3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3208      	adds	r2, #8
 8006846:	69b9      	ldr	r1, [r7, #24]
 8006848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	2203      	movs	r2, #3
 8006858:	fa02 f303 	lsl.w	r3, r2, r3
 800685c:	43db      	mvns	r3, r3
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	4013      	ands	r3, r2
 8006862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f003 0203 	and.w	r2, r3, #3
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	fa02 f303 	lsl.w	r3, r2, r3
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	4313      	orrs	r3, r2
 8006878:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 80c0 	beq.w	8006a0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	4b66      	ldr	r3, [pc, #408]	@ (8006a2c <HAL_GPIO_Init+0x324>)
 8006894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006896:	4a65      	ldr	r2, [pc, #404]	@ (8006a2c <HAL_GPIO_Init+0x324>)
 8006898:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800689c:	6453      	str	r3, [r2, #68]	@ 0x44
 800689e:	4b63      	ldr	r3, [pc, #396]	@ (8006a2c <HAL_GPIO_Init+0x324>)
 80068a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80068aa:	4a61      	ldr	r2, [pc, #388]	@ (8006a30 <HAL_GPIO_Init+0x328>)
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	089b      	lsrs	r3, r3, #2
 80068b0:	3302      	adds	r3, #2
 80068b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f003 0303 	and.w	r3, r3, #3
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	220f      	movs	r2, #15
 80068c2:	fa02 f303 	lsl.w	r3, r2, r3
 80068c6:	43db      	mvns	r3, r3
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	4013      	ands	r3, r2
 80068cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a58      	ldr	r2, [pc, #352]	@ (8006a34 <HAL_GPIO_Init+0x32c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d037      	beq.n	8006946 <HAL_GPIO_Init+0x23e>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a57      	ldr	r2, [pc, #348]	@ (8006a38 <HAL_GPIO_Init+0x330>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d031      	beq.n	8006942 <HAL_GPIO_Init+0x23a>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a56      	ldr	r2, [pc, #344]	@ (8006a3c <HAL_GPIO_Init+0x334>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d02b      	beq.n	800693e <HAL_GPIO_Init+0x236>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a55      	ldr	r2, [pc, #340]	@ (8006a40 <HAL_GPIO_Init+0x338>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d025      	beq.n	800693a <HAL_GPIO_Init+0x232>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a54      	ldr	r2, [pc, #336]	@ (8006a44 <HAL_GPIO_Init+0x33c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d01f      	beq.n	8006936 <HAL_GPIO_Init+0x22e>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a53      	ldr	r2, [pc, #332]	@ (8006a48 <HAL_GPIO_Init+0x340>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d019      	beq.n	8006932 <HAL_GPIO_Init+0x22a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a52      	ldr	r2, [pc, #328]	@ (8006a4c <HAL_GPIO_Init+0x344>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d013      	beq.n	800692e <HAL_GPIO_Init+0x226>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a51      	ldr	r2, [pc, #324]	@ (8006a50 <HAL_GPIO_Init+0x348>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d00d      	beq.n	800692a <HAL_GPIO_Init+0x222>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a50      	ldr	r2, [pc, #320]	@ (8006a54 <HAL_GPIO_Init+0x34c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d007      	beq.n	8006926 <HAL_GPIO_Init+0x21e>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a4f      	ldr	r2, [pc, #316]	@ (8006a58 <HAL_GPIO_Init+0x350>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d101      	bne.n	8006922 <HAL_GPIO_Init+0x21a>
 800691e:	2309      	movs	r3, #9
 8006920:	e012      	b.n	8006948 <HAL_GPIO_Init+0x240>
 8006922:	230a      	movs	r3, #10
 8006924:	e010      	b.n	8006948 <HAL_GPIO_Init+0x240>
 8006926:	2308      	movs	r3, #8
 8006928:	e00e      	b.n	8006948 <HAL_GPIO_Init+0x240>
 800692a:	2307      	movs	r3, #7
 800692c:	e00c      	b.n	8006948 <HAL_GPIO_Init+0x240>
 800692e:	2306      	movs	r3, #6
 8006930:	e00a      	b.n	8006948 <HAL_GPIO_Init+0x240>
 8006932:	2305      	movs	r3, #5
 8006934:	e008      	b.n	8006948 <HAL_GPIO_Init+0x240>
 8006936:	2304      	movs	r3, #4
 8006938:	e006      	b.n	8006948 <HAL_GPIO_Init+0x240>
 800693a:	2303      	movs	r3, #3
 800693c:	e004      	b.n	8006948 <HAL_GPIO_Init+0x240>
 800693e:	2302      	movs	r3, #2
 8006940:	e002      	b.n	8006948 <HAL_GPIO_Init+0x240>
 8006942:	2301      	movs	r3, #1
 8006944:	e000      	b.n	8006948 <HAL_GPIO_Init+0x240>
 8006946:	2300      	movs	r3, #0
 8006948:	69fa      	ldr	r2, [r7, #28]
 800694a:	f002 0203 	and.w	r2, r2, #3
 800694e:	0092      	lsls	r2, r2, #2
 8006950:	4093      	lsls	r3, r2
 8006952:	69ba      	ldr	r2, [r7, #24]
 8006954:	4313      	orrs	r3, r2
 8006956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006958:	4935      	ldr	r1, [pc, #212]	@ (8006a30 <HAL_GPIO_Init+0x328>)
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	089b      	lsrs	r3, r3, #2
 800695e:	3302      	adds	r3, #2
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006966:	4b3d      	ldr	r3, [pc, #244]	@ (8006a5c <HAL_GPIO_Init+0x354>)
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	43db      	mvns	r3, r3
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	4013      	ands	r3, r2
 8006974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	4313      	orrs	r3, r2
 8006988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800698a:	4a34      	ldr	r2, [pc, #208]	@ (8006a5c <HAL_GPIO_Init+0x354>)
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006990:	4b32      	ldr	r3, [pc, #200]	@ (8006a5c <HAL_GPIO_Init+0x354>)
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	43db      	mvns	r3, r3
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	4013      	ands	r3, r2
 800699e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80069ac:	69ba      	ldr	r2, [r7, #24]
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80069b4:	4a29      	ldr	r2, [pc, #164]	@ (8006a5c <HAL_GPIO_Init+0x354>)
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80069ba:	4b28      	ldr	r3, [pc, #160]	@ (8006a5c <HAL_GPIO_Init+0x354>)
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	43db      	mvns	r3, r3
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	4013      	ands	r3, r2
 80069c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80069d6:	69ba      	ldr	r2, [r7, #24]
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	4313      	orrs	r3, r2
 80069dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80069de:	4a1f      	ldr	r2, [pc, #124]	@ (8006a5c <HAL_GPIO_Init+0x354>)
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80069e4:	4b1d      	ldr	r3, [pc, #116]	@ (8006a5c <HAL_GPIO_Init+0x354>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	43db      	mvns	r3, r3
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	4013      	ands	r3, r2
 80069f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d003      	beq.n	8006a08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006a08:	4a14      	ldr	r2, [pc, #80]	@ (8006a5c <HAL_GPIO_Init+0x354>)
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	3301      	adds	r3, #1
 8006a12:	61fb      	str	r3, [r7, #28]
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	2b0f      	cmp	r3, #15
 8006a18:	f67f ae84 	bls.w	8006724 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006a1c:	bf00      	nop
 8006a1e:	bf00      	nop
 8006a20:	3724      	adds	r7, #36	@ 0x24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	40023800 	.word	0x40023800
 8006a30:	40013800 	.word	0x40013800
 8006a34:	40020000 	.word	0x40020000
 8006a38:	40020400 	.word	0x40020400
 8006a3c:	40020800 	.word	0x40020800
 8006a40:	40020c00 	.word	0x40020c00
 8006a44:	40021000 	.word	0x40021000
 8006a48:	40021400 	.word	0x40021400
 8006a4c:	40021800 	.word	0x40021800
 8006a50:	40021c00 	.word	0x40021c00
 8006a54:	40022000 	.word	0x40022000
 8006a58:	40022400 	.word	0x40022400
 8006a5c:	40013c00 	.word	0x40013c00

08006a60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b087      	sub	sp, #28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a76:	2300      	movs	r3, #0
 8006a78:	617b      	str	r3, [r7, #20]
 8006a7a:	e0d9      	b.n	8006c30 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	fa02 f303 	lsl.w	r3, r2, r3
 8006a84:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	f040 80c9 	bne.w	8006c2a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006a98:	4a6b      	ldr	r2, [pc, #428]	@ (8006c48 <HAL_GPIO_DeInit+0x1e8>)
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	089b      	lsrs	r3, r3, #2
 8006a9e:	3302      	adds	r3, #2
 8006aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f003 0303 	and.w	r3, r3, #3
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	220f      	movs	r2, #15
 8006ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a63      	ldr	r2, [pc, #396]	@ (8006c4c <HAL_GPIO_DeInit+0x1ec>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d037      	beq.n	8006b32 <HAL_GPIO_DeInit+0xd2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a62      	ldr	r2, [pc, #392]	@ (8006c50 <HAL_GPIO_DeInit+0x1f0>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d031      	beq.n	8006b2e <HAL_GPIO_DeInit+0xce>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a61      	ldr	r2, [pc, #388]	@ (8006c54 <HAL_GPIO_DeInit+0x1f4>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d02b      	beq.n	8006b2a <HAL_GPIO_DeInit+0xca>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a60      	ldr	r2, [pc, #384]	@ (8006c58 <HAL_GPIO_DeInit+0x1f8>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d025      	beq.n	8006b26 <HAL_GPIO_DeInit+0xc6>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a5f      	ldr	r2, [pc, #380]	@ (8006c5c <HAL_GPIO_DeInit+0x1fc>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d01f      	beq.n	8006b22 <HAL_GPIO_DeInit+0xc2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a5e      	ldr	r2, [pc, #376]	@ (8006c60 <HAL_GPIO_DeInit+0x200>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d019      	beq.n	8006b1e <HAL_GPIO_DeInit+0xbe>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a5d      	ldr	r2, [pc, #372]	@ (8006c64 <HAL_GPIO_DeInit+0x204>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d013      	beq.n	8006b1a <HAL_GPIO_DeInit+0xba>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a5c      	ldr	r2, [pc, #368]	@ (8006c68 <HAL_GPIO_DeInit+0x208>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d00d      	beq.n	8006b16 <HAL_GPIO_DeInit+0xb6>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a5b      	ldr	r2, [pc, #364]	@ (8006c6c <HAL_GPIO_DeInit+0x20c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d007      	beq.n	8006b12 <HAL_GPIO_DeInit+0xb2>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a5a      	ldr	r2, [pc, #360]	@ (8006c70 <HAL_GPIO_DeInit+0x210>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d101      	bne.n	8006b0e <HAL_GPIO_DeInit+0xae>
 8006b0a:	2309      	movs	r3, #9
 8006b0c:	e012      	b.n	8006b34 <HAL_GPIO_DeInit+0xd4>
 8006b0e:	230a      	movs	r3, #10
 8006b10:	e010      	b.n	8006b34 <HAL_GPIO_DeInit+0xd4>
 8006b12:	2308      	movs	r3, #8
 8006b14:	e00e      	b.n	8006b34 <HAL_GPIO_DeInit+0xd4>
 8006b16:	2307      	movs	r3, #7
 8006b18:	e00c      	b.n	8006b34 <HAL_GPIO_DeInit+0xd4>
 8006b1a:	2306      	movs	r3, #6
 8006b1c:	e00a      	b.n	8006b34 <HAL_GPIO_DeInit+0xd4>
 8006b1e:	2305      	movs	r3, #5
 8006b20:	e008      	b.n	8006b34 <HAL_GPIO_DeInit+0xd4>
 8006b22:	2304      	movs	r3, #4
 8006b24:	e006      	b.n	8006b34 <HAL_GPIO_DeInit+0xd4>
 8006b26:	2303      	movs	r3, #3
 8006b28:	e004      	b.n	8006b34 <HAL_GPIO_DeInit+0xd4>
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	e002      	b.n	8006b34 <HAL_GPIO_DeInit+0xd4>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e000      	b.n	8006b34 <HAL_GPIO_DeInit+0xd4>
 8006b32:	2300      	movs	r3, #0
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	f002 0203 	and.w	r2, r2, #3
 8006b3a:	0092      	lsls	r2, r2, #2
 8006b3c:	4093      	lsls	r3, r2
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d132      	bne.n	8006baa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006b44:	4b4b      	ldr	r3, [pc, #300]	@ (8006c74 <HAL_GPIO_DeInit+0x214>)
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	43db      	mvns	r3, r3
 8006b4c:	4949      	ldr	r1, [pc, #292]	@ (8006c74 <HAL_GPIO_DeInit+0x214>)
 8006b4e:	4013      	ands	r3, r2
 8006b50:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006b52:	4b48      	ldr	r3, [pc, #288]	@ (8006c74 <HAL_GPIO_DeInit+0x214>)
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	43db      	mvns	r3, r3
 8006b5a:	4946      	ldr	r1, [pc, #280]	@ (8006c74 <HAL_GPIO_DeInit+0x214>)
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006b60:	4b44      	ldr	r3, [pc, #272]	@ (8006c74 <HAL_GPIO_DeInit+0x214>)
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	43db      	mvns	r3, r3
 8006b68:	4942      	ldr	r1, [pc, #264]	@ (8006c74 <HAL_GPIO_DeInit+0x214>)
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006b6e:	4b41      	ldr	r3, [pc, #260]	@ (8006c74 <HAL_GPIO_DeInit+0x214>)
 8006b70:	689a      	ldr	r2, [r3, #8]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	43db      	mvns	r3, r3
 8006b76:	493f      	ldr	r1, [pc, #252]	@ (8006c74 <HAL_GPIO_DeInit+0x214>)
 8006b78:	4013      	ands	r3, r2
 8006b7a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f003 0303 	and.w	r3, r3, #3
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	220f      	movs	r2, #15
 8006b86:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006b8c:	4a2e      	ldr	r2, [pc, #184]	@ (8006c48 <HAL_GPIO_DeInit+0x1e8>)
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	089b      	lsrs	r3, r3, #2
 8006b92:	3302      	adds	r3, #2
 8006b94:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	43da      	mvns	r2, r3
 8006b9c:	482a      	ldr	r0, [pc, #168]	@ (8006c48 <HAL_GPIO_DeInit+0x1e8>)
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	089b      	lsrs	r3, r3, #2
 8006ba2:	400a      	ands	r2, r1
 8006ba4:	3302      	adds	r3, #2
 8006ba6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	2103      	movs	r1, #3
 8006bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb8:	43db      	mvns	r3, r3
 8006bba:	401a      	ands	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	08da      	lsrs	r2, r3, #3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	3208      	adds	r2, #8
 8006bc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	220f      	movs	r2, #15
 8006bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bda:	43db      	mvns	r3, r3
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	08d2      	lsrs	r2, r2, #3
 8006be0:	4019      	ands	r1, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	3208      	adds	r2, #8
 8006be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	2103      	movs	r1, #3
 8006bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8006bf8:	43db      	mvns	r3, r3
 8006bfa:	401a      	ands	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	2101      	movs	r1, #1
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	fa01 f303 	lsl.w	r3, r1, r3
 8006c0c:	43db      	mvns	r3, r3
 8006c0e:	401a      	ands	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	2103      	movs	r1, #3
 8006c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c22:	43db      	mvns	r3, r3
 8006c24:	401a      	ands	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	617b      	str	r3, [r7, #20]
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	2b0f      	cmp	r3, #15
 8006c34:	f67f af22 	bls.w	8006a7c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006c38:	bf00      	nop
 8006c3a:	bf00      	nop
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	40013800 	.word	0x40013800
 8006c4c:	40020000 	.word	0x40020000
 8006c50:	40020400 	.word	0x40020400
 8006c54:	40020800 	.word	0x40020800
 8006c58:	40020c00 	.word	0x40020c00
 8006c5c:	40021000 	.word	0x40021000
 8006c60:	40021400 	.word	0x40021400
 8006c64:	40021800 	.word	0x40021800
 8006c68:	40021c00 	.word	0x40021c00
 8006c6c:	40022000 	.word	0x40022000
 8006c70:	40022400 	.word	0x40022400
 8006c74:	40013c00 	.word	0x40013c00

08006c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	807b      	strh	r3, [r7, #2]
 8006c84:	4613      	mov	r3, r2
 8006c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006c88:	787b      	ldrb	r3, [r7, #1]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c8e:	887a      	ldrh	r2, [r7, #2]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006c94:	e003      	b.n	8006c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006c96:	887b      	ldrh	r3, [r7, #2]
 8006c98:	041a      	lsls	r2, r3, #16
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	619a      	str	r2, [r3, #24]
}
 8006c9e:	bf00      	nop
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
	...

08006cac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e12b      	b.n	8006f16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d106      	bne.n	8006cd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7fb faec 	bl	80022b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2224      	movs	r2, #36	@ 0x24
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0201 	bic.w	r2, r2, #1
 8006cee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006d10:	f001 fd14 	bl	800873c <HAL_RCC_GetPCLK1Freq>
 8006d14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	4a81      	ldr	r2, [pc, #516]	@ (8006f20 <HAL_I2C_Init+0x274>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d807      	bhi.n	8006d30 <HAL_I2C_Init+0x84>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4a80      	ldr	r2, [pc, #512]	@ (8006f24 <HAL_I2C_Init+0x278>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	bf94      	ite	ls
 8006d28:	2301      	movls	r3, #1
 8006d2a:	2300      	movhi	r3, #0
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	e006      	b.n	8006d3e <HAL_I2C_Init+0x92>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4a7d      	ldr	r2, [pc, #500]	@ (8006f28 <HAL_I2C_Init+0x27c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	bf94      	ite	ls
 8006d38:	2301      	movls	r3, #1
 8006d3a:	2300      	movhi	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e0e7      	b.n	8006f16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4a78      	ldr	r2, [pc, #480]	@ (8006f2c <HAL_I2C_Init+0x280>)
 8006d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4e:	0c9b      	lsrs	r3, r3, #18
 8006d50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	4a6a      	ldr	r2, [pc, #424]	@ (8006f20 <HAL_I2C_Init+0x274>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d802      	bhi.n	8006d80 <HAL_I2C_Init+0xd4>
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	e009      	b.n	8006d94 <HAL_I2C_Init+0xe8>
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006d86:	fb02 f303 	mul.w	r3, r2, r3
 8006d8a:	4a69      	ldr	r2, [pc, #420]	@ (8006f30 <HAL_I2C_Init+0x284>)
 8006d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d90:	099b      	lsrs	r3, r3, #6
 8006d92:	3301      	adds	r3, #1
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6812      	ldr	r2, [r2, #0]
 8006d98:	430b      	orrs	r3, r1
 8006d9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006da6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	495c      	ldr	r1, [pc, #368]	@ (8006f20 <HAL_I2C_Init+0x274>)
 8006db0:	428b      	cmp	r3, r1
 8006db2:	d819      	bhi.n	8006de8 <HAL_I2C_Init+0x13c>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	1e59      	subs	r1, r3, #1
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006dc2:	1c59      	adds	r1, r3, #1
 8006dc4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006dc8:	400b      	ands	r3, r1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00a      	beq.n	8006de4 <HAL_I2C_Init+0x138>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	1e59      	subs	r1, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ddc:	3301      	adds	r3, #1
 8006dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006de2:	e051      	b.n	8006e88 <HAL_I2C_Init+0x1dc>
 8006de4:	2304      	movs	r3, #4
 8006de6:	e04f      	b.n	8006e88 <HAL_I2C_Init+0x1dc>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d111      	bne.n	8006e14 <HAL_I2C_Init+0x168>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	1e58      	subs	r0, r3, #1
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6859      	ldr	r1, [r3, #4]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	005b      	lsls	r3, r3, #1
 8006dfc:	440b      	add	r3, r1
 8006dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e02:	3301      	adds	r3, #1
 8006e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	bf0c      	ite	eq
 8006e0c:	2301      	moveq	r3, #1
 8006e0e:	2300      	movne	r3, #0
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	e012      	b.n	8006e3a <HAL_I2C_Init+0x18e>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	1e58      	subs	r0, r3, #1
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6859      	ldr	r1, [r3, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	440b      	add	r3, r1
 8006e22:	0099      	lsls	r1, r3, #2
 8006e24:	440b      	add	r3, r1
 8006e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	bf0c      	ite	eq
 8006e34:	2301      	moveq	r3, #1
 8006e36:	2300      	movne	r3, #0
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <HAL_I2C_Init+0x196>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e022      	b.n	8006e88 <HAL_I2C_Init+0x1dc>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10e      	bne.n	8006e68 <HAL_I2C_Init+0x1bc>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	1e58      	subs	r0, r3, #1
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6859      	ldr	r1, [r3, #4]
 8006e52:	460b      	mov	r3, r1
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	440b      	add	r3, r1
 8006e58:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e66:	e00f      	b.n	8006e88 <HAL_I2C_Init+0x1dc>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	1e58      	subs	r0, r3, #1
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6859      	ldr	r1, [r3, #4]
 8006e70:	460b      	mov	r3, r1
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	440b      	add	r3, r1
 8006e76:	0099      	lsls	r1, r3, #2
 8006e78:	440b      	add	r3, r1
 8006e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e7e:	3301      	adds	r3, #1
 8006e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e88:	6879      	ldr	r1, [r7, #4]
 8006e8a:	6809      	ldr	r1, [r1, #0]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	69da      	ldr	r2, [r3, #28]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006eb6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	6911      	ldr	r1, [r2, #16]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	68d2      	ldr	r2, [r2, #12]
 8006ec2:	4311      	orrs	r1, r2
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	6812      	ldr	r2, [r2, #0]
 8006ec8:	430b      	orrs	r3, r1
 8006eca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	695a      	ldr	r2, [r3, #20]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0201 	orr.w	r2, r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	000186a0 	.word	0x000186a0
 8006f24:	001e847f 	.word	0x001e847f
 8006f28:	003d08ff 	.word	0x003d08ff
 8006f2c:	431bde83 	.word	0x431bde83
 8006f30:	10624dd3 	.word	0x10624dd3

08006f34 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e021      	b.n	8006f8a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2224      	movs	r2, #36	@ 0x24
 8006f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 0201 	bic.w	r2, r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7fb f9ee 	bl	8002340 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
	...

08006f94 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af02      	add	r7, sp, #8
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	817b      	strh	r3, [r7, #10]
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	813b      	strh	r3, [r7, #8]
 8006faa:	4613      	mov	r3, r2
 8006fac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006fae:	f7fd fd5f 	bl	8004a70 <HAL_GetTick>
 8006fb2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b20      	cmp	r3, #32
 8006fbe:	f040 80d9 	bne.w	8007174 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	2319      	movs	r3, #25
 8006fc8:	2201      	movs	r2, #1
 8006fca:	496d      	ldr	r1, [pc, #436]	@ (8007180 <HAL_I2C_Mem_Write+0x1ec>)
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 fc99 	bl	8007904 <I2C_WaitOnFlagUntilTimeout>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d001      	beq.n	8006fdc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006fd8:	2302      	movs	r3, #2
 8006fda:	e0cc      	b.n	8007176 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d101      	bne.n	8006fea <HAL_I2C_Mem_Write+0x56>
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	e0c5      	b.n	8007176 <HAL_I2C_Mem_Write+0x1e2>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d007      	beq.n	8007010 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f042 0201 	orr.w	r2, r2, #1
 800700e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800701e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2221      	movs	r2, #33	@ 0x21
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2240      	movs	r2, #64	@ 0x40
 800702c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a3a      	ldr	r2, [r7, #32]
 800703a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007040:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007046:	b29a      	uxth	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4a4d      	ldr	r2, [pc, #308]	@ (8007184 <HAL_I2C_Mem_Write+0x1f0>)
 8007050:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007052:	88f8      	ldrh	r0, [r7, #6]
 8007054:	893a      	ldrh	r2, [r7, #8]
 8007056:	8979      	ldrh	r1, [r7, #10]
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	9301      	str	r3, [sp, #4]
 800705c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	4603      	mov	r3, r0
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 fad0 	bl	8007608 <I2C_RequestMemoryWrite>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d052      	beq.n	8007114 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e081      	b.n	8007176 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 fd5e 	bl	8007b38 <I2C_WaitOnTXEFlagUntilTimeout>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00d      	beq.n	800709e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007086:	2b04      	cmp	r3, #4
 8007088:	d107      	bne.n	800709a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007098:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e06b      	b.n	8007176 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a2:	781a      	ldrb	r2, [r3, #0]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	3b01      	subs	r3, #1
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	f003 0304 	and.w	r3, r3, #4
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d11b      	bne.n	8007114 <HAL_I2C_Mem_Write+0x180>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d017      	beq.n	8007114 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e8:	781a      	ldrb	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f4:	1c5a      	adds	r2, r3, #1
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070fe:	3b01      	subs	r3, #1
 8007100:	b29a      	uxth	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800710a:	b29b      	uxth	r3, r3
 800710c:	3b01      	subs	r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1aa      	bne.n	8007072 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 fd51 	bl	8007bc8 <I2C_WaitOnBTFFlagUntilTimeout>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00d      	beq.n	8007148 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007130:	2b04      	cmp	r3, #4
 8007132:	d107      	bne.n	8007144 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007142:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e016      	b.n	8007176 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2220      	movs	r2, #32
 800715c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	e000      	b.n	8007176 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007174:	2302      	movs	r3, #2
  }
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	00100002 	.word	0x00100002
 8007184:	ffff0000 	.word	0xffff0000

08007188 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08c      	sub	sp, #48	@ 0x30
 800718c:	af02      	add	r7, sp, #8
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	4608      	mov	r0, r1
 8007192:	4611      	mov	r1, r2
 8007194:	461a      	mov	r2, r3
 8007196:	4603      	mov	r3, r0
 8007198:	817b      	strh	r3, [r7, #10]
 800719a:	460b      	mov	r3, r1
 800719c:	813b      	strh	r3, [r7, #8]
 800719e:	4613      	mov	r3, r2
 80071a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071a2:	f7fd fc65 	bl	8004a70 <HAL_GetTick>
 80071a6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b20      	cmp	r3, #32
 80071b2:	f040 8214 	bne.w	80075de <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	2319      	movs	r3, #25
 80071bc:	2201      	movs	r2, #1
 80071be:	497b      	ldr	r1, [pc, #492]	@ (80073ac <HAL_I2C_Mem_Read+0x224>)
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 fb9f 	bl	8007904 <I2C_WaitOnFlagUntilTimeout>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80071cc:	2302      	movs	r3, #2
 80071ce:	e207      	b.n	80075e0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d101      	bne.n	80071de <HAL_I2C_Mem_Read+0x56>
 80071da:	2302      	movs	r3, #2
 80071dc:	e200      	b.n	80075e0 <HAL_I2C_Mem_Read+0x458>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d007      	beq.n	8007204 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f042 0201 	orr.w	r2, r2, #1
 8007202:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007212:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2222      	movs	r2, #34	@ 0x22
 8007218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2240      	movs	r2, #64	@ 0x40
 8007220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800722e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007234:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800723a:	b29a      	uxth	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4a5b      	ldr	r2, [pc, #364]	@ (80073b0 <HAL_I2C_Mem_Read+0x228>)
 8007244:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007246:	88f8      	ldrh	r0, [r7, #6]
 8007248:	893a      	ldrh	r2, [r7, #8]
 800724a:	8979      	ldrh	r1, [r7, #10]
 800724c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724e:	9301      	str	r3, [sp, #4]
 8007250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	4603      	mov	r3, r0
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 fa6c 	bl	8007734 <I2C_RequestMemoryRead>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e1bc      	b.n	80075e0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800726a:	2b00      	cmp	r3, #0
 800726c:	d113      	bne.n	8007296 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800726e:	2300      	movs	r3, #0
 8007270:	623b      	str	r3, [r7, #32]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	623b      	str	r3, [r7, #32]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	623b      	str	r3, [r7, #32]
 8007282:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	e190      	b.n	80075b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800729a:	2b01      	cmp	r3, #1
 800729c:	d11b      	bne.n	80072d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072ae:	2300      	movs	r3, #0
 80072b0:	61fb      	str	r3, [r7, #28]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	61fb      	str	r3, [r7, #28]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	61fb      	str	r3, [r7, #28]
 80072c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	e170      	b.n	80075b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d11b      	bne.n	8007316 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072fe:	2300      	movs	r3, #0
 8007300:	61bb      	str	r3, [r7, #24]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	695b      	ldr	r3, [r3, #20]
 8007308:	61bb      	str	r3, [r7, #24]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	61bb      	str	r3, [r7, #24]
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	e150      	b.n	80075b8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	617b      	str	r3, [r7, #20]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	617b      	str	r3, [r7, #20]
 800732a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800732c:	e144      	b.n	80075b8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007332:	2b03      	cmp	r3, #3
 8007334:	f200 80f1 	bhi.w	800751a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800733c:	2b01      	cmp	r3, #1
 800733e:	d123      	bne.n	8007388 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007342:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 fc87 	bl	8007c58 <I2C_WaitOnRXNEFlagUntilTimeout>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e145      	b.n	80075e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	691a      	ldr	r2, [r3, #16]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735e:	b2d2      	uxtb	r2, r2
 8007360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007370:	3b01      	subs	r3, #1
 8007372:	b29a      	uxth	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800737c:	b29b      	uxth	r3, r3
 800737e:	3b01      	subs	r3, #1
 8007380:	b29a      	uxth	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007386:	e117      	b.n	80075b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800738c:	2b02      	cmp	r3, #2
 800738e:	d14e      	bne.n	800742e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007396:	2200      	movs	r2, #0
 8007398:	4906      	ldr	r1, [pc, #24]	@ (80073b4 <HAL_I2C_Mem_Read+0x22c>)
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 fab2 	bl	8007904 <I2C_WaitOnFlagUntilTimeout>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d008      	beq.n	80073b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e11a      	b.n	80075e0 <HAL_I2C_Mem_Read+0x458>
 80073aa:	bf00      	nop
 80073ac:	00100002 	.word	0x00100002
 80073b0:	ffff0000 	.word	0xffff0000
 80073b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691a      	ldr	r2, [r3, #16]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d2:	b2d2      	uxtb	r2, r2
 80073d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073e4:	3b01      	subs	r3, #1
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	3b01      	subs	r3, #1
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	691a      	ldr	r2, [r3, #16]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007404:	b2d2      	uxtb	r2, r2
 8007406:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007416:	3b01      	subs	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007422:	b29b      	uxth	r3, r3
 8007424:	3b01      	subs	r3, #1
 8007426:	b29a      	uxth	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800742c:	e0c4      	b.n	80075b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800742e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007434:	2200      	movs	r2, #0
 8007436:	496c      	ldr	r1, [pc, #432]	@ (80075e8 <HAL_I2C_Mem_Read+0x460>)
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 fa63 	bl	8007904 <I2C_WaitOnFlagUntilTimeout>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e0cb      	b.n	80075e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007456:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	691a      	ldr	r2, [r3, #16]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007462:	b2d2      	uxtb	r2, r2
 8007464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746a:	1c5a      	adds	r2, r3, #1
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007474:	3b01      	subs	r3, #1
 8007476:	b29a      	uxth	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007480:	b29b      	uxth	r3, r3
 8007482:	3b01      	subs	r3, #1
 8007484:	b29a      	uxth	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800748a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007490:	2200      	movs	r2, #0
 8007492:	4955      	ldr	r1, [pc, #340]	@ (80075e8 <HAL_I2C_Mem_Read+0x460>)
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 fa35 	bl	8007904 <I2C_WaitOnFlagUntilTimeout>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e09d      	b.n	80075e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	691a      	ldr	r2, [r3, #16]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074be:	b2d2      	uxtb	r2, r2
 80074c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074d0:	3b01      	subs	r3, #1
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074dc:	b29b      	uxth	r3, r3
 80074de:	3b01      	subs	r3, #1
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	691a      	ldr	r2, [r3, #16]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f0:	b2d2      	uxtb	r2, r2
 80074f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f8:	1c5a      	adds	r2, r3, #1
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007502:	3b01      	subs	r3, #1
 8007504:	b29a      	uxth	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800750e:	b29b      	uxth	r3, r3
 8007510:	3b01      	subs	r3, #1
 8007512:	b29a      	uxth	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007518:	e04e      	b.n	80075b8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800751a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800751c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 fb9a 	bl	8007c58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e058      	b.n	80075e0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	691a      	ldr	r2, [r3, #16]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007538:	b2d2      	uxtb	r2, r2
 800753a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800754a:	3b01      	subs	r3, #1
 800754c:	b29a      	uxth	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007556:	b29b      	uxth	r3, r3
 8007558:	3b01      	subs	r3, #1
 800755a:	b29a      	uxth	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	f003 0304 	and.w	r3, r3, #4
 800756a:	2b04      	cmp	r3, #4
 800756c:	d124      	bne.n	80075b8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007572:	2b03      	cmp	r3, #3
 8007574:	d107      	bne.n	8007586 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007584:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	691a      	ldr	r2, [r3, #16]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007590:	b2d2      	uxtb	r2, r2
 8007592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075a2:	3b01      	subs	r3, #1
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	3b01      	subs	r3, #1
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f47f aeb6 	bne.w	800732e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2220      	movs	r2, #32
 80075c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	e000      	b.n	80075e0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80075de:	2302      	movs	r3, #2
  }
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3728      	adds	r7, #40	@ 0x28
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	00010004 	.word	0x00010004

080075ec <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075fa:	b2db      	uxtb	r3, r3
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b088      	sub	sp, #32
 800760c:	af02      	add	r7, sp, #8
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	4608      	mov	r0, r1
 8007612:	4611      	mov	r1, r2
 8007614:	461a      	mov	r2, r3
 8007616:	4603      	mov	r3, r0
 8007618:	817b      	strh	r3, [r7, #10]
 800761a:	460b      	mov	r3, r1
 800761c:	813b      	strh	r3, [r7, #8]
 800761e:	4613      	mov	r3, r2
 8007620:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007630:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	6a3b      	ldr	r3, [r7, #32]
 8007638:	2200      	movs	r2, #0
 800763a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f000 f960 	bl	8007904 <I2C_WaitOnFlagUntilTimeout>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00d      	beq.n	8007666 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007658:	d103      	bne.n	8007662 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007660:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e05f      	b.n	8007726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007666:	897b      	ldrh	r3, [r7, #10]
 8007668:	b2db      	uxtb	r3, r3
 800766a:	461a      	mov	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007674:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	6a3a      	ldr	r2, [r7, #32]
 800767a:	492d      	ldr	r1, [pc, #180]	@ (8007730 <I2C_RequestMemoryWrite+0x128>)
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 f9bb 	bl	80079f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e04c      	b.n	8007726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800768c:	2300      	movs	r3, #0
 800768e:	617b      	str	r3, [r7, #20]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	617b      	str	r3, [r7, #20]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076a4:	6a39      	ldr	r1, [r7, #32]
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 fa46 	bl	8007b38 <I2C_WaitOnTXEFlagUntilTimeout>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00d      	beq.n	80076ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b6:	2b04      	cmp	r3, #4
 80076b8:	d107      	bne.n	80076ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e02b      	b.n	8007726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076ce:	88fb      	ldrh	r3, [r7, #6]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d105      	bne.n	80076e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076d4:	893b      	ldrh	r3, [r7, #8]
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	611a      	str	r2, [r3, #16]
 80076de:	e021      	b.n	8007724 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80076e0:	893b      	ldrh	r3, [r7, #8]
 80076e2:	0a1b      	lsrs	r3, r3, #8
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076f0:	6a39      	ldr	r1, [r7, #32]
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 fa20 	bl	8007b38 <I2C_WaitOnTXEFlagUntilTimeout>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00d      	beq.n	800771a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007702:	2b04      	cmp	r3, #4
 8007704:	d107      	bne.n	8007716 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007714:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e005      	b.n	8007726 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800771a:	893b      	ldrh	r3, [r7, #8]
 800771c:	b2da      	uxtb	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	00010002 	.word	0x00010002

08007734 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af02      	add	r7, sp, #8
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	4608      	mov	r0, r1
 800773e:	4611      	mov	r1, r2
 8007740:	461a      	mov	r2, r3
 8007742:	4603      	mov	r3, r0
 8007744:	817b      	strh	r3, [r7, #10]
 8007746:	460b      	mov	r3, r1
 8007748:	813b      	strh	r3, [r7, #8]
 800774a:	4613      	mov	r3, r2
 800774c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800775c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800776c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800776e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	6a3b      	ldr	r3, [r7, #32]
 8007774:	2200      	movs	r2, #0
 8007776:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 f8c2 	bl	8007904 <I2C_WaitOnFlagUntilTimeout>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00d      	beq.n	80077a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007794:	d103      	bne.n	800779e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800779c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e0aa      	b.n	80078f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077a2:	897b      	ldrh	r3, [r7, #10]
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	461a      	mov	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80077b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b4:	6a3a      	ldr	r2, [r7, #32]
 80077b6:	4952      	ldr	r1, [pc, #328]	@ (8007900 <I2C_RequestMemoryRead+0x1cc>)
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 f91d 	bl	80079f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e097      	b.n	80078f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077c8:	2300      	movs	r3, #0
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	617b      	str	r3, [r7, #20]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	617b      	str	r3, [r7, #20]
 80077dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077e0:	6a39      	ldr	r1, [r7, #32]
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 f9a8 	bl	8007b38 <I2C_WaitOnTXEFlagUntilTimeout>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00d      	beq.n	800780a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d107      	bne.n	8007806 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007804:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e076      	b.n	80078f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800780a:	88fb      	ldrh	r3, [r7, #6]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d105      	bne.n	800781c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007810:	893b      	ldrh	r3, [r7, #8]
 8007812:	b2da      	uxtb	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	611a      	str	r2, [r3, #16]
 800781a:	e021      	b.n	8007860 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800781c:	893b      	ldrh	r3, [r7, #8]
 800781e:	0a1b      	lsrs	r3, r3, #8
 8007820:	b29b      	uxth	r3, r3
 8007822:	b2da      	uxtb	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800782a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800782c:	6a39      	ldr	r1, [r7, #32]
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f000 f982 	bl	8007b38 <I2C_WaitOnTXEFlagUntilTimeout>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00d      	beq.n	8007856 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800783e:	2b04      	cmp	r3, #4
 8007840:	d107      	bne.n	8007852 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007850:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e050      	b.n	80078f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007856:	893b      	ldrh	r3, [r7, #8]
 8007858:	b2da      	uxtb	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007862:	6a39      	ldr	r1, [r7, #32]
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 f967 	bl	8007b38 <I2C_WaitOnTXEFlagUntilTimeout>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00d      	beq.n	800788c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007874:	2b04      	cmp	r3, #4
 8007876:	d107      	bne.n	8007888 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007886:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e035      	b.n	80078f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800789a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800789c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 f82b 	bl	8007904 <I2C_WaitOnFlagUntilTimeout>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00d      	beq.n	80078d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078c2:	d103      	bne.n	80078cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e013      	b.n	80078f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80078d0:	897b      	ldrh	r3, [r7, #10]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	f043 0301 	orr.w	r3, r3, #1
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e2:	6a3a      	ldr	r2, [r7, #32]
 80078e4:	4906      	ldr	r1, [pc, #24]	@ (8007900 <I2C_RequestMemoryRead+0x1cc>)
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f000 f886 	bl	80079f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e000      	b.n	80078f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	00010002 	.word	0x00010002

08007904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	603b      	str	r3, [r7, #0]
 8007910:	4613      	mov	r3, r2
 8007912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007914:	e048      	b.n	80079a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791c:	d044      	beq.n	80079a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800791e:	f7fd f8a7 	bl	8004a70 <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	683a      	ldr	r2, [r7, #0]
 800792a:	429a      	cmp	r2, r3
 800792c:	d302      	bcc.n	8007934 <I2C_WaitOnFlagUntilTimeout+0x30>
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d139      	bne.n	80079a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	0c1b      	lsrs	r3, r3, #16
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b01      	cmp	r3, #1
 800793c:	d10d      	bne.n	800795a <I2C_WaitOnFlagUntilTimeout+0x56>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	43da      	mvns	r2, r3
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	4013      	ands	r3, r2
 800794a:	b29b      	uxth	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	bf0c      	ite	eq
 8007950:	2301      	moveq	r3, #1
 8007952:	2300      	movne	r3, #0
 8007954:	b2db      	uxtb	r3, r3
 8007956:	461a      	mov	r2, r3
 8007958:	e00c      	b.n	8007974 <I2C_WaitOnFlagUntilTimeout+0x70>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	43da      	mvns	r2, r3
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	4013      	ands	r3, r2
 8007966:	b29b      	uxth	r3, r3
 8007968:	2b00      	cmp	r3, #0
 800796a:	bf0c      	ite	eq
 800796c:	2301      	moveq	r3, #1
 800796e:	2300      	movne	r3, #0
 8007970:	b2db      	uxtb	r3, r3
 8007972:	461a      	mov	r2, r3
 8007974:	79fb      	ldrb	r3, [r7, #7]
 8007976:	429a      	cmp	r2, r3
 8007978:	d116      	bne.n	80079a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2220      	movs	r2, #32
 8007984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007994:	f043 0220 	orr.w	r2, r3, #32
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e023      	b.n	80079f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	0c1b      	lsrs	r3, r3, #16
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d10d      	bne.n	80079ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	43da      	mvns	r2, r3
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	4013      	ands	r3, r2
 80079be:	b29b      	uxth	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	bf0c      	ite	eq
 80079c4:	2301      	moveq	r3, #1
 80079c6:	2300      	movne	r3, #0
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	461a      	mov	r2, r3
 80079cc:	e00c      	b.n	80079e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	43da      	mvns	r2, r3
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	4013      	ands	r3, r2
 80079da:	b29b      	uxth	r3, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	bf0c      	ite	eq
 80079e0:	2301      	moveq	r3, #1
 80079e2:	2300      	movne	r3, #0
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	461a      	mov	r2, r3
 80079e8:	79fb      	ldrb	r3, [r7, #7]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d093      	beq.n	8007916 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
 8007a04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a06:	e071      	b.n	8007aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a16:	d123      	bne.n	8007a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007a30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a4c:	f043 0204 	orr.w	r2, r3, #4
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e067      	b.n	8007b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a66:	d041      	beq.n	8007aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a68:	f7fd f802 	bl	8004a70 <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d302      	bcc.n	8007a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d136      	bne.n	8007aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	0c1b      	lsrs	r3, r3, #16
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d10c      	bne.n	8007aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	43da      	mvns	r2, r3
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	4013      	ands	r3, r2
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	bf14      	ite	ne
 8007a9a:	2301      	movne	r3, #1
 8007a9c:	2300      	moveq	r3, #0
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	e00b      	b.n	8007aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	43da      	mvns	r2, r3
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	4013      	ands	r3, r2
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	bf14      	ite	ne
 8007ab4:	2301      	movne	r3, #1
 8007ab6:	2300      	moveq	r3, #0
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d016      	beq.n	8007aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2220      	movs	r2, #32
 8007ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad8:	f043 0220 	orr.w	r2, r3, #32
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e021      	b.n	8007b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	0c1b      	lsrs	r3, r3, #16
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d10c      	bne.n	8007b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	43da      	mvns	r2, r3
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	4013      	ands	r3, r2
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	bf14      	ite	ne
 8007b08:	2301      	movne	r3, #1
 8007b0a:	2300      	moveq	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	e00b      	b.n	8007b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	43da      	mvns	r2, r3
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	bf14      	ite	ne
 8007b22:	2301      	movne	r3, #1
 8007b24:	2300      	moveq	r3, #0
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f47f af6d 	bne.w	8007a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b44:	e034      	b.n	8007bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f000 f8e3 	bl	8007d12 <I2C_IsAcknowledgeFailed>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e034      	b.n	8007bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b5c:	d028      	beq.n	8007bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b5e:	f7fc ff87 	bl	8004a70 <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d302      	bcc.n	8007b74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d11d      	bne.n	8007bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b7e:	2b80      	cmp	r3, #128	@ 0x80
 8007b80:	d016      	beq.n	8007bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b9c:	f043 0220 	orr.w	r2, r3, #32
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e007      	b.n	8007bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bba:	2b80      	cmp	r3, #128	@ 0x80
 8007bbc:	d1c3      	bne.n	8007b46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007bd4:	e034      	b.n	8007c40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f000 f89b 	bl	8007d12 <I2C_IsAcknowledgeFailed>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e034      	b.n	8007c50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bec:	d028      	beq.n	8007c40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bee:	f7fc ff3f 	bl	8004a70 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d302      	bcc.n	8007c04 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d11d      	bne.n	8007c40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	f003 0304 	and.w	r3, r3, #4
 8007c0e:	2b04      	cmp	r3, #4
 8007c10:	d016      	beq.n	8007c40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c2c:	f043 0220 	orr.w	r2, r3, #32
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e007      	b.n	8007c50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	f003 0304 	and.w	r3, r3, #4
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d1c3      	bne.n	8007bd6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c64:	e049      	b.n	8007cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	f003 0310 	and.w	r3, r3, #16
 8007c70:	2b10      	cmp	r3, #16
 8007c72:	d119      	bne.n	8007ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f06f 0210 	mvn.w	r2, #16
 8007c7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2220      	movs	r2, #32
 8007c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e030      	b.n	8007d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ca8:	f7fc fee2 	bl	8004a70 <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d302      	bcc.n	8007cbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d11d      	bne.n	8007cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cc8:	2b40      	cmp	r3, #64	@ 0x40
 8007cca:	d016      	beq.n	8007cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2220      	movs	r2, #32
 8007cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce6:	f043 0220 	orr.w	r2, r3, #32
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e007      	b.n	8007d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d04:	2b40      	cmp	r3, #64	@ 0x40
 8007d06:	d1ae      	bne.n	8007c66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	695b      	ldr	r3, [r3, #20]
 8007d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d28:	d11b      	bne.n	8007d62 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007d32:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d4e:	f043 0204 	orr.w	r2, r3, #4
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e000      	b.n	8007d64 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d101      	bne.n	8007d82 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e08f      	b.n	8007ea2 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d106      	bne.n	8007d9c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7fa faf6 	bl	8002388 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	699a      	ldr	r2, [r3, #24]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007db2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6999      	ldr	r1, [r3, #24]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007dc8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	041b      	lsls	r3, r3, #16
 8007dde:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6999      	ldr	r1, [r3, #24]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	430a      	orrs	r2, r1
 8007dec:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	041b      	lsls	r3, r3, #16
 8007df4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a19      	ldr	r1, [r3, #32]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	430a      	orrs	r2, r1
 8007e02:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e08:	041b      	lsls	r3, r3, #16
 8007e0a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1e:	041b      	lsls	r3, r3, #16
 8007e20:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007e36:	021b      	lsls	r3, r3, #8
 8007e38:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007e40:	041b      	lsls	r3, r3, #16
 8007e42:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007e52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8007e66:	431a      	orrs	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f042 0206 	orr.w	r2, r2, #6
 8007e7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699a      	ldr	r2, [r3, #24]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f042 0201 	orr.w	r2, r2, #1
 8007e8e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007eaa:	b5b0      	push	{r4, r5, r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	60f8      	str	r0, [r7, #12]
 8007eb2:	60b9      	str	r1, [r7, #8]
 8007eb4:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d101      	bne.n	8007ec4 <HAL_LTDC_ConfigLayer+0x1a>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	e02c      	b.n	8007f1e <HAL_LTDC_ConfigLayer+0x74>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2134      	movs	r1, #52	@ 0x34
 8007eda:	fb01 f303 	mul.w	r3, r1, r3
 8007ede:	4413      	add	r3, r2
 8007ee0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	4614      	mov	r4, r2
 8007ee8:	461d      	mov	r5, r3
 8007eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ef4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ef6:	682b      	ldr	r3, [r5, #0]
 8007ef8:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	68b9      	ldr	r1, [r7, #8]
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f000 f811 	bl	8007f26 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bdb0      	pop	{r4, r5, r7, pc}

08007f26 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b089      	sub	sp, #36	@ 0x24
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	685a      	ldr	r2, [r3, #4]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	0c1b      	lsrs	r3, r3, #16
 8007f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f42:	4413      	add	r3, r2
 8007f44:	041b      	lsls	r3, r3, #16
 8007f46:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	01db      	lsls	r3, r3, #7
 8007f52:	4413      	add	r3, r2
 8007f54:	3384      	adds	r3, #132	@ 0x84
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	6812      	ldr	r2, [r2, #0]
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	01d2      	lsls	r2, r2, #7
 8007f62:	440a      	add	r2, r1
 8007f64:	3284      	adds	r2, #132	@ 0x84
 8007f66:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007f6a:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	0c1b      	lsrs	r3, r3, #16
 8007f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007f7c:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007f7e:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4619      	mov	r1, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	01db      	lsls	r3, r3, #7
 8007f8a:	440b      	add	r3, r1
 8007f8c:	3384      	adds	r3, #132	@ 0x84
 8007f8e:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007f94:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	68da      	ldr	r2, [r3, #12]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fa4:	4413      	add	r3, r2
 8007fa6:	041b      	lsls	r3, r3, #16
 8007fa8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	01db      	lsls	r3, r3, #7
 8007fb4:	4413      	add	r3, r2
 8007fb6:	3384      	adds	r3, #132	@ 0x84
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	6812      	ldr	r2, [r2, #0]
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	01d2      	lsls	r2, r2, #7
 8007fc4:	440a      	add	r2, r1
 8007fc6:	3284      	adds	r2, #132	@ 0x84
 8007fc8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007fcc:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	689a      	ldr	r2, [r3, #8]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fdc:	4413      	add	r3, r2
 8007fde:	1c5a      	adds	r2, r3, #1
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	01db      	lsls	r3, r3, #7
 8007fea:	440b      	add	r3, r1
 8007fec:	3384      	adds	r3, #132	@ 0x84
 8007fee:	4619      	mov	r1, r3
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	01db      	lsls	r3, r3, #7
 8008000:	4413      	add	r3, r2
 8008002:	3384      	adds	r3, #132	@ 0x84
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	6812      	ldr	r2, [r2, #0]
 800800a:	4611      	mov	r1, r2
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	01d2      	lsls	r2, r2, #7
 8008010:	440a      	add	r2, r1
 8008012:	3284      	adds	r2, #132	@ 0x84
 8008014:	f023 0307 	bic.w	r3, r3, #7
 8008018:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	461a      	mov	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	01db      	lsls	r3, r3, #7
 8008024:	4413      	add	r3, r2
 8008026:	3384      	adds	r3, #132	@ 0x84
 8008028:	461a      	mov	r2, r3
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008036:	021b      	lsls	r3, r3, #8
 8008038:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008040:	041b      	lsls	r3, r3, #16
 8008042:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	061b      	lsls	r3, r3, #24
 800804a:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008052:	461a      	mov	r2, r3
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	431a      	orrs	r2, r3
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	431a      	orrs	r2, r3
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4619      	mov	r1, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	01db      	lsls	r3, r3, #7
 8008066:	440b      	add	r3, r1
 8008068:	3384      	adds	r3, #132	@ 0x84
 800806a:	4619      	mov	r1, r3
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	4313      	orrs	r3, r2
 8008070:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	461a      	mov	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	01db      	lsls	r3, r3, #7
 800807c:	4413      	add	r3, r2
 800807e:	3384      	adds	r3, #132	@ 0x84
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	6812      	ldr	r2, [r2, #0]
 8008086:	4611      	mov	r1, r2
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	01d2      	lsls	r2, r2, #7
 800808c:	440a      	add	r2, r1
 800808e:	3284      	adds	r2, #132	@ 0x84
 8008090:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008094:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	01db      	lsls	r3, r3, #7
 80080a0:	4413      	add	r3, r2
 80080a2:	3384      	adds	r3, #132	@ 0x84
 80080a4:	461a      	mov	r2, r3
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	461a      	mov	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	01db      	lsls	r3, r3, #7
 80080b6:	4413      	add	r3, r2
 80080b8:	3384      	adds	r3, #132	@ 0x84
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	6812      	ldr	r2, [r2, #0]
 80080c0:	4611      	mov	r1, r2
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	01d2      	lsls	r2, r2, #7
 80080c6:	440a      	add	r2, r1
 80080c8:	3284      	adds	r2, #132	@ 0x84
 80080ca:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80080ce:	f023 0307 	bic.w	r3, r3, #7
 80080d2:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	69da      	ldr	r2, [r3, #28]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	68f9      	ldr	r1, [r7, #12]
 80080de:	6809      	ldr	r1, [r1, #0]
 80080e0:	4608      	mov	r0, r1
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	01c9      	lsls	r1, r1, #7
 80080e6:	4401      	add	r1, r0
 80080e8:	3184      	adds	r1, #132	@ 0x84
 80080ea:	4313      	orrs	r3, r2
 80080ec:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	01db      	lsls	r3, r3, #7
 80080f8:	4413      	add	r3, r2
 80080fa:	3384      	adds	r3, #132	@ 0x84
 80080fc:	461a      	mov	r2, r3
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008102:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d102      	bne.n	8008112 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 800810c:	2304      	movs	r3, #4
 800810e:	61fb      	str	r3, [r7, #28]
 8008110:	e01b      	b.n	800814a <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d102      	bne.n	8008120 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 800811a:	2303      	movs	r3, #3
 800811c:	61fb      	str	r3, [r7, #28]
 800811e:	e014      	b.n	800814a <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	2b04      	cmp	r3, #4
 8008126:	d00b      	beq.n	8008140 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800812c:	2b02      	cmp	r3, #2
 800812e:	d007      	beq.n	8008140 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008134:	2b03      	cmp	r3, #3
 8008136:	d003      	beq.n	8008140 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800813c:	2b07      	cmp	r3, #7
 800813e:	d102      	bne.n	8008146 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8008140:	2302      	movs	r3, #2
 8008142:	61fb      	str	r3, [r7, #28]
 8008144:	e001      	b.n	800814a <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8008146:	2301      	movs	r3, #1
 8008148:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	461a      	mov	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	01db      	lsls	r3, r3, #7
 8008154:	4413      	add	r3, r2
 8008156:	3384      	adds	r3, #132	@ 0x84
 8008158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	6812      	ldr	r2, [r2, #0]
 800815e:	4611      	mov	r1, r2
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	01d2      	lsls	r2, r2, #7
 8008164:	440a      	add	r2, r1
 8008166:	3284      	adds	r2, #132	@ 0x84
 8008168:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800816c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008172:	69fa      	ldr	r2, [r7, #28]
 8008174:	fb02 f303 	mul.w	r3, r2, r3
 8008178:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	6859      	ldr	r1, [r3, #4]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	1acb      	subs	r3, r1, r3
 8008184:	69f9      	ldr	r1, [r7, #28]
 8008186:	fb01 f303 	mul.w	r3, r1, r3
 800818a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800818c:	68f9      	ldr	r1, [r7, #12]
 800818e:	6809      	ldr	r1, [r1, #0]
 8008190:	4608      	mov	r0, r1
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	01c9      	lsls	r1, r1, #7
 8008196:	4401      	add	r1, r0
 8008198:	3184      	adds	r1, #132	@ 0x84
 800819a:	4313      	orrs	r3, r2
 800819c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	01db      	lsls	r3, r3, #7
 80081a8:	4413      	add	r3, r2
 80081aa:	3384      	adds	r3, #132	@ 0x84
 80081ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	6812      	ldr	r2, [r2, #0]
 80081b2:	4611      	mov	r1, r2
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	01d2      	lsls	r2, r2, #7
 80081b8:	440a      	add	r2, r1
 80081ba:	3284      	adds	r2, #132	@ 0x84
 80081bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80081c0:	f023 0307 	bic.w	r3, r3, #7
 80081c4:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	461a      	mov	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	01db      	lsls	r3, r3, #7
 80081d0:	4413      	add	r3, r2
 80081d2:	3384      	adds	r3, #132	@ 0x84
 80081d4:	461a      	mov	r2, r3
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081da:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	461a      	mov	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	01db      	lsls	r3, r3, #7
 80081e6:	4413      	add	r3, r2
 80081e8:	3384      	adds	r3, #132	@ 0x84
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	6812      	ldr	r2, [r2, #0]
 80081f0:	4611      	mov	r1, r2
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	01d2      	lsls	r2, r2, #7
 80081f6:	440a      	add	r2, r1
 80081f8:	3284      	adds	r2, #132	@ 0x84
 80081fa:	f043 0301 	orr.w	r3, r3, #1
 80081fe:	6013      	str	r3, [r2, #0]
}
 8008200:	bf00      	nop
 8008202:	3724      	adds	r7, #36	@ 0x24
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

#if !defined(POLARITIES_INVERSION_UPDATED)
  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 800821e:	2200      	movs	r2, #0
 8008220:	e001      	b.n	8008226 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 8008222:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d102      	bne.n	8008238 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 8008232:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008236:	e000      	b.n	800823a <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8008238:	2200      	movs	r2, #0
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d102      	bne.n	800824c <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8008246:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800824a:	e000      	b.n	800824e <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 800824c:	2200      	movs	r2, #0
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
  hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29;
#endif /* POLARITIES_INVERSION_UPDATED */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008256:	1e5a      	subs	r2, r3, #1
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008264:	4413      	add	r3, r2
 8008266:	1e5a      	subs	r2, r3, #1
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008274:	441a      	add	r2, r3
                                   VidCfg->VerticalActive - 1U;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800827a:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 800827c:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800828a:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8008290:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008296:	4413      	add	r3, r2
 8008298:	1e5a      	subs	r2, r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80082b6:	2300      	movs	r3, #0
 80082b8:	603b      	str	r3, [r7, #0]
 80082ba:	4b20      	ldr	r3, [pc, #128]	@ (800833c <HAL_PWREx_EnableOverDrive+0x90>)
 80082bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082be:	4a1f      	ldr	r2, [pc, #124]	@ (800833c <HAL_PWREx_EnableOverDrive+0x90>)
 80082c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80082c6:	4b1d      	ldr	r3, [pc, #116]	@ (800833c <HAL_PWREx_EnableOverDrive+0x90>)
 80082c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082ce:	603b      	str	r3, [r7, #0]
 80082d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80082d2:	4b1b      	ldr	r3, [pc, #108]	@ (8008340 <HAL_PWREx_EnableOverDrive+0x94>)
 80082d4:	2201      	movs	r2, #1
 80082d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082d8:	f7fc fbca 	bl	8004a70 <HAL_GetTick>
 80082dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80082de:	e009      	b.n	80082f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80082e0:	f7fc fbc6 	bl	8004a70 <HAL_GetTick>
 80082e4:	4602      	mov	r2, r0
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80082ee:	d901      	bls.n	80082f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e01f      	b.n	8008334 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80082f4:	4b13      	ldr	r3, [pc, #76]	@ (8008344 <HAL_PWREx_EnableOverDrive+0x98>)
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008300:	d1ee      	bne.n	80082e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008302:	4b11      	ldr	r3, [pc, #68]	@ (8008348 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008304:	2201      	movs	r2, #1
 8008306:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008308:	f7fc fbb2 	bl	8004a70 <HAL_GetTick>
 800830c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800830e:	e009      	b.n	8008324 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008310:	f7fc fbae 	bl	8004a70 <HAL_GetTick>
 8008314:	4602      	mov	r2, r0
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800831e:	d901      	bls.n	8008324 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e007      	b.n	8008334 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008324:	4b07      	ldr	r3, [pc, #28]	@ (8008344 <HAL_PWREx_EnableOverDrive+0x98>)
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800832c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008330:	d1ee      	bne.n	8008310 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	40023800 	.word	0x40023800
 8008340:	420e0040 	.word	0x420e0040
 8008344:	40007000 	.word	0x40007000
 8008348:	420e0044 	.word	0x420e0044

0800834c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e0cc      	b.n	80084fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008360:	4b68      	ldr	r3, [pc, #416]	@ (8008504 <HAL_RCC_ClockConfig+0x1b8>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 030f 	and.w	r3, r3, #15
 8008368:	683a      	ldr	r2, [r7, #0]
 800836a:	429a      	cmp	r2, r3
 800836c:	d90c      	bls.n	8008388 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800836e:	4b65      	ldr	r3, [pc, #404]	@ (8008504 <HAL_RCC_ClockConfig+0x1b8>)
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	b2d2      	uxtb	r2, r2
 8008374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008376:	4b63      	ldr	r3, [pc, #396]	@ (8008504 <HAL_RCC_ClockConfig+0x1b8>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 030f 	and.w	r3, r3, #15
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	429a      	cmp	r2, r3
 8008382:	d001      	beq.n	8008388 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e0b8      	b.n	80084fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0302 	and.w	r3, r3, #2
 8008390:	2b00      	cmp	r3, #0
 8008392:	d020      	beq.n	80083d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0304 	and.w	r3, r3, #4
 800839c:	2b00      	cmp	r3, #0
 800839e:	d005      	beq.n	80083ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80083a0:	4b59      	ldr	r3, [pc, #356]	@ (8008508 <HAL_RCC_ClockConfig+0x1bc>)
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	4a58      	ldr	r2, [pc, #352]	@ (8008508 <HAL_RCC_ClockConfig+0x1bc>)
 80083a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80083aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0308 	and.w	r3, r3, #8
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d005      	beq.n	80083c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80083b8:	4b53      	ldr	r3, [pc, #332]	@ (8008508 <HAL_RCC_ClockConfig+0x1bc>)
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	4a52      	ldr	r2, [pc, #328]	@ (8008508 <HAL_RCC_ClockConfig+0x1bc>)
 80083be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80083c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083c4:	4b50      	ldr	r3, [pc, #320]	@ (8008508 <HAL_RCC_ClockConfig+0x1bc>)
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	494d      	ldr	r1, [pc, #308]	@ (8008508 <HAL_RCC_ClockConfig+0x1bc>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d044      	beq.n	800846c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d107      	bne.n	80083fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083ea:	4b47      	ldr	r3, [pc, #284]	@ (8008508 <HAL_RCC_ClockConfig+0x1bc>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d119      	bne.n	800842a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e07f      	b.n	80084fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	2b02      	cmp	r3, #2
 8008400:	d003      	beq.n	800840a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008406:	2b03      	cmp	r3, #3
 8008408:	d107      	bne.n	800841a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800840a:	4b3f      	ldr	r3, [pc, #252]	@ (8008508 <HAL_RCC_ClockConfig+0x1bc>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d109      	bne.n	800842a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e06f      	b.n	80084fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800841a:	4b3b      	ldr	r3, [pc, #236]	@ (8008508 <HAL_RCC_ClockConfig+0x1bc>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0302 	and.w	r3, r3, #2
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e067      	b.n	80084fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800842a:	4b37      	ldr	r3, [pc, #220]	@ (8008508 <HAL_RCC_ClockConfig+0x1bc>)
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	f023 0203 	bic.w	r2, r3, #3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	4934      	ldr	r1, [pc, #208]	@ (8008508 <HAL_RCC_ClockConfig+0x1bc>)
 8008438:	4313      	orrs	r3, r2
 800843a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800843c:	f7fc fb18 	bl	8004a70 <HAL_GetTick>
 8008440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008442:	e00a      	b.n	800845a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008444:	f7fc fb14 	bl	8004a70 <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008452:	4293      	cmp	r3, r2
 8008454:	d901      	bls.n	800845a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e04f      	b.n	80084fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800845a:	4b2b      	ldr	r3, [pc, #172]	@ (8008508 <HAL_RCC_ClockConfig+0x1bc>)
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	f003 020c 	and.w	r2, r3, #12
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	429a      	cmp	r2, r3
 800846a:	d1eb      	bne.n	8008444 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800846c:	4b25      	ldr	r3, [pc, #148]	@ (8008504 <HAL_RCC_ClockConfig+0x1b8>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 030f 	and.w	r3, r3, #15
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	429a      	cmp	r2, r3
 8008478:	d20c      	bcs.n	8008494 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800847a:	4b22      	ldr	r3, [pc, #136]	@ (8008504 <HAL_RCC_ClockConfig+0x1b8>)
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	b2d2      	uxtb	r2, r2
 8008480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008482:	4b20      	ldr	r3, [pc, #128]	@ (8008504 <HAL_RCC_ClockConfig+0x1b8>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 030f 	and.w	r3, r3, #15
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	429a      	cmp	r2, r3
 800848e:	d001      	beq.n	8008494 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e032      	b.n	80084fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0304 	and.w	r3, r3, #4
 800849c:	2b00      	cmp	r3, #0
 800849e:	d008      	beq.n	80084b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084a0:	4b19      	ldr	r3, [pc, #100]	@ (8008508 <HAL_RCC_ClockConfig+0x1bc>)
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	4916      	ldr	r1, [pc, #88]	@ (8008508 <HAL_RCC_ClockConfig+0x1bc>)
 80084ae:	4313      	orrs	r3, r2
 80084b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0308 	and.w	r3, r3, #8
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d009      	beq.n	80084d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084be:	4b12      	ldr	r3, [pc, #72]	@ (8008508 <HAL_RCC_ClockConfig+0x1bc>)
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	00db      	lsls	r3, r3, #3
 80084cc:	490e      	ldr	r1, [pc, #56]	@ (8008508 <HAL_RCC_ClockConfig+0x1bc>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80084d2:	f000 f821 	bl	8008518 <HAL_RCC_GetSysClockFreq>
 80084d6:	4602      	mov	r2, r0
 80084d8:	4b0b      	ldr	r3, [pc, #44]	@ (8008508 <HAL_RCC_ClockConfig+0x1bc>)
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	091b      	lsrs	r3, r3, #4
 80084de:	f003 030f 	and.w	r3, r3, #15
 80084e2:	490a      	ldr	r1, [pc, #40]	@ (800850c <HAL_RCC_ClockConfig+0x1c0>)
 80084e4:	5ccb      	ldrb	r3, [r1, r3]
 80084e6:	fa22 f303 	lsr.w	r3, r2, r3
 80084ea:	4a09      	ldr	r2, [pc, #36]	@ (8008510 <HAL_RCC_ClockConfig+0x1c4>)
 80084ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80084ee:	4b09      	ldr	r3, [pc, #36]	@ (8008514 <HAL_RCC_ClockConfig+0x1c8>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fc fa78 	bl	80049e8 <HAL_InitTick>

  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	40023c00 	.word	0x40023c00
 8008508:	40023800 	.word	0x40023800
 800850c:	0800fe08 	.word	0x0800fe08
 8008510:	20000000 	.word	0x20000000
 8008514:	20000040 	.word	0x20000040

08008518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800851c:	b094      	sub	sp, #80	@ 0x50
 800851e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008520:	2300      	movs	r3, #0
 8008522:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8008524:	2300      	movs	r3, #0
 8008526:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8008528:	2300      	movs	r3, #0
 800852a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800852c:	2300      	movs	r3, #0
 800852e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008530:	4b79      	ldr	r3, [pc, #484]	@ (8008718 <HAL_RCC_GetSysClockFreq+0x200>)
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f003 030c 	and.w	r3, r3, #12
 8008538:	2b08      	cmp	r3, #8
 800853a:	d00d      	beq.n	8008558 <HAL_RCC_GetSysClockFreq+0x40>
 800853c:	2b08      	cmp	r3, #8
 800853e:	f200 80e1 	bhi.w	8008704 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008542:	2b00      	cmp	r3, #0
 8008544:	d002      	beq.n	800854c <HAL_RCC_GetSysClockFreq+0x34>
 8008546:	2b04      	cmp	r3, #4
 8008548:	d003      	beq.n	8008552 <HAL_RCC_GetSysClockFreq+0x3a>
 800854a:	e0db      	b.n	8008704 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800854c:	4b73      	ldr	r3, [pc, #460]	@ (800871c <HAL_RCC_GetSysClockFreq+0x204>)
 800854e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008550:	e0db      	b.n	800870a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008552:	4b73      	ldr	r3, [pc, #460]	@ (8008720 <HAL_RCC_GetSysClockFreq+0x208>)
 8008554:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008556:	e0d8      	b.n	800870a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008558:	4b6f      	ldr	r3, [pc, #444]	@ (8008718 <HAL_RCC_GetSysClockFreq+0x200>)
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008560:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008562:	4b6d      	ldr	r3, [pc, #436]	@ (8008718 <HAL_RCC_GetSysClockFreq+0x200>)
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d063      	beq.n	8008636 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800856e:	4b6a      	ldr	r3, [pc, #424]	@ (8008718 <HAL_RCC_GetSysClockFreq+0x200>)
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	099b      	lsrs	r3, r3, #6
 8008574:	2200      	movs	r2, #0
 8008576:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008578:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800857a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800857c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008580:	633b      	str	r3, [r7, #48]	@ 0x30
 8008582:	2300      	movs	r3, #0
 8008584:	637b      	str	r3, [r7, #52]	@ 0x34
 8008586:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800858a:	4622      	mov	r2, r4
 800858c:	462b      	mov	r3, r5
 800858e:	f04f 0000 	mov.w	r0, #0
 8008592:	f04f 0100 	mov.w	r1, #0
 8008596:	0159      	lsls	r1, r3, #5
 8008598:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800859c:	0150      	lsls	r0, r2, #5
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	4621      	mov	r1, r4
 80085a4:	1a51      	subs	r1, r2, r1
 80085a6:	6139      	str	r1, [r7, #16]
 80085a8:	4629      	mov	r1, r5
 80085aa:	eb63 0301 	sbc.w	r3, r3, r1
 80085ae:	617b      	str	r3, [r7, #20]
 80085b0:	f04f 0200 	mov.w	r2, #0
 80085b4:	f04f 0300 	mov.w	r3, #0
 80085b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085bc:	4659      	mov	r1, fp
 80085be:	018b      	lsls	r3, r1, #6
 80085c0:	4651      	mov	r1, sl
 80085c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80085c6:	4651      	mov	r1, sl
 80085c8:	018a      	lsls	r2, r1, #6
 80085ca:	4651      	mov	r1, sl
 80085cc:	ebb2 0801 	subs.w	r8, r2, r1
 80085d0:	4659      	mov	r1, fp
 80085d2:	eb63 0901 	sbc.w	r9, r3, r1
 80085d6:	f04f 0200 	mov.w	r2, #0
 80085da:	f04f 0300 	mov.w	r3, #0
 80085de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80085e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80085e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80085ea:	4690      	mov	r8, r2
 80085ec:	4699      	mov	r9, r3
 80085ee:	4623      	mov	r3, r4
 80085f0:	eb18 0303 	adds.w	r3, r8, r3
 80085f4:	60bb      	str	r3, [r7, #8]
 80085f6:	462b      	mov	r3, r5
 80085f8:	eb49 0303 	adc.w	r3, r9, r3
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	f04f 0200 	mov.w	r2, #0
 8008602:	f04f 0300 	mov.w	r3, #0
 8008606:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800860a:	4629      	mov	r1, r5
 800860c:	024b      	lsls	r3, r1, #9
 800860e:	4621      	mov	r1, r4
 8008610:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008614:	4621      	mov	r1, r4
 8008616:	024a      	lsls	r2, r1, #9
 8008618:	4610      	mov	r0, r2
 800861a:	4619      	mov	r1, r3
 800861c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800861e:	2200      	movs	r2, #0
 8008620:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008622:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008624:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008628:	f7f8 fad6 	bl	8000bd8 <__aeabi_uldivmod>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	4613      	mov	r3, r2
 8008632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008634:	e058      	b.n	80086e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008636:	4b38      	ldr	r3, [pc, #224]	@ (8008718 <HAL_RCC_GetSysClockFreq+0x200>)
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	099b      	lsrs	r3, r3, #6
 800863c:	2200      	movs	r2, #0
 800863e:	4618      	mov	r0, r3
 8008640:	4611      	mov	r1, r2
 8008642:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008646:	623b      	str	r3, [r7, #32]
 8008648:	2300      	movs	r3, #0
 800864a:	627b      	str	r3, [r7, #36]	@ 0x24
 800864c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008650:	4642      	mov	r2, r8
 8008652:	464b      	mov	r3, r9
 8008654:	f04f 0000 	mov.w	r0, #0
 8008658:	f04f 0100 	mov.w	r1, #0
 800865c:	0159      	lsls	r1, r3, #5
 800865e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008662:	0150      	lsls	r0, r2, #5
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	4641      	mov	r1, r8
 800866a:	ebb2 0a01 	subs.w	sl, r2, r1
 800866e:	4649      	mov	r1, r9
 8008670:	eb63 0b01 	sbc.w	fp, r3, r1
 8008674:	f04f 0200 	mov.w	r2, #0
 8008678:	f04f 0300 	mov.w	r3, #0
 800867c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008680:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008684:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008688:	ebb2 040a 	subs.w	r4, r2, sl
 800868c:	eb63 050b 	sbc.w	r5, r3, fp
 8008690:	f04f 0200 	mov.w	r2, #0
 8008694:	f04f 0300 	mov.w	r3, #0
 8008698:	00eb      	lsls	r3, r5, #3
 800869a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800869e:	00e2      	lsls	r2, r4, #3
 80086a0:	4614      	mov	r4, r2
 80086a2:	461d      	mov	r5, r3
 80086a4:	4643      	mov	r3, r8
 80086a6:	18e3      	adds	r3, r4, r3
 80086a8:	603b      	str	r3, [r7, #0]
 80086aa:	464b      	mov	r3, r9
 80086ac:	eb45 0303 	adc.w	r3, r5, r3
 80086b0:	607b      	str	r3, [r7, #4]
 80086b2:	f04f 0200 	mov.w	r2, #0
 80086b6:	f04f 0300 	mov.w	r3, #0
 80086ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80086be:	4629      	mov	r1, r5
 80086c0:	028b      	lsls	r3, r1, #10
 80086c2:	4621      	mov	r1, r4
 80086c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80086c8:	4621      	mov	r1, r4
 80086ca:	028a      	lsls	r2, r1, #10
 80086cc:	4610      	mov	r0, r2
 80086ce:	4619      	mov	r1, r3
 80086d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086d2:	2200      	movs	r2, #0
 80086d4:	61bb      	str	r3, [r7, #24]
 80086d6:	61fa      	str	r2, [r7, #28]
 80086d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086dc:	f7f8 fa7c 	bl	8000bd8 <__aeabi_uldivmod>
 80086e0:	4602      	mov	r2, r0
 80086e2:	460b      	mov	r3, r1
 80086e4:	4613      	mov	r3, r2
 80086e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80086e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008718 <HAL_RCC_GetSysClockFreq+0x200>)
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	0c1b      	lsrs	r3, r3, #16
 80086ee:	f003 0303 	and.w	r3, r3, #3
 80086f2:	3301      	adds	r3, #1
 80086f4:	005b      	lsls	r3, r3, #1
 80086f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80086f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80086fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008700:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008702:	e002      	b.n	800870a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008704:	4b05      	ldr	r3, [pc, #20]	@ (800871c <HAL_RCC_GetSysClockFreq+0x204>)
 8008706:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800870a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800870c:	4618      	mov	r0, r3
 800870e:	3750      	adds	r7, #80	@ 0x50
 8008710:	46bd      	mov	sp, r7
 8008712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008716:	bf00      	nop
 8008718:	40023800 	.word	0x40023800
 800871c:	00f42400 	.word	0x00f42400
 8008720:	007a1200 	.word	0x007a1200

08008724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008724:	b480      	push	{r7}
 8008726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008728:	4b03      	ldr	r3, [pc, #12]	@ (8008738 <HAL_RCC_GetHCLKFreq+0x14>)
 800872a:	681b      	ldr	r3, [r3, #0]
}
 800872c:	4618      	mov	r0, r3
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	20000000 	.word	0x20000000

0800873c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008740:	f7ff fff0 	bl	8008724 <HAL_RCC_GetHCLKFreq>
 8008744:	4602      	mov	r2, r0
 8008746:	4b05      	ldr	r3, [pc, #20]	@ (800875c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	0a9b      	lsrs	r3, r3, #10
 800874c:	f003 0307 	and.w	r3, r3, #7
 8008750:	4903      	ldr	r1, [pc, #12]	@ (8008760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008752:	5ccb      	ldrb	r3, [r1, r3]
 8008754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008758:	4618      	mov	r0, r3
 800875a:	bd80      	pop	{r7, pc}
 800875c:	40023800 	.word	0x40023800
 8008760:	0800fe18 	.word	0x0800fe18

08008764 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b088      	sub	sp, #32
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8008774:	2300      	movs	r3, #0
 8008776:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00a      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800878c:	4b66      	ldr	r3, [pc, #408]	@ (8008928 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800878e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008792:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800879a:	4963      	ldr	r1, [pc, #396]	@ (8008928 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800879c:	4313      	orrs	r3, r2
 800879e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00a      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80087ae:	4b5e      	ldr	r3, [pc, #376]	@ (8008928 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80087b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087b4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087bc:	495a      	ldr	r1, [pc, #360]	@ (8008928 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 0301 	and.w	r3, r3, #1
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10b      	bne.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d105      	bne.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d075      	beq.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80087e8:	4b50      	ldr	r3, [pc, #320]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80087ee:	f7fc f93f 	bl	8004a70 <HAL_GetTick>
 80087f2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087f4:	e008      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80087f6:	f7fc f93b 	bl	8004a70 <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	2b02      	cmp	r3, #2
 8008802:	d901      	bls.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e1dc      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008808:	4b47      	ldr	r3, [pc, #284]	@ (8008928 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1f0      	bne.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	2b00      	cmp	r3, #0
 800881e:	d009      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	019a      	lsls	r2, r3, #6
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	071b      	lsls	r3, r3, #28
 800882c:	493e      	ldr	r1, [pc, #248]	@ (8008928 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800882e:	4313      	orrs	r3, r2
 8008830:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0302 	and.w	r3, r3, #2
 800883c:	2b00      	cmp	r3, #0
 800883e:	d01f      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008840:	4b39      	ldr	r3, [pc, #228]	@ (8008928 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008846:	0f1b      	lsrs	r3, r3, #28
 8008848:	f003 0307 	and.w	r3, r3, #7
 800884c:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	019a      	lsls	r2, r3, #6
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	061b      	lsls	r3, r3, #24
 800885a:	431a      	orrs	r2, r3
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	071b      	lsls	r3, r3, #28
 8008860:	4931      	ldr	r1, [pc, #196]	@ (8008928 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008862:	4313      	orrs	r3, r2
 8008864:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008868:	4b2f      	ldr	r3, [pc, #188]	@ (8008928 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800886a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800886e:	f023 021f 	bic.w	r2, r3, #31
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	3b01      	subs	r3, #1
 8008878:	492b      	ldr	r1, [pc, #172]	@ (8008928 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800887a:	4313      	orrs	r3, r2
 800887c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00d      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	019a      	lsls	r2, r3, #6
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	061b      	lsls	r3, r3, #24
 8008898:	431a      	orrs	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	071b      	lsls	r3, r3, #28
 80088a0:	4921      	ldr	r1, [pc, #132]	@ (8008928 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80088a8:	4b20      	ldr	r3, [pc, #128]	@ (800892c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80088aa:	2201      	movs	r2, #1
 80088ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80088ae:	f7fc f8df 	bl	8004a70 <HAL_GetTick>
 80088b2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088b4:	e008      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80088b6:	f7fc f8db 	bl	8004a70 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d901      	bls.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e17c      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088c8:	4b17      	ldr	r3, [pc, #92]	@ (8008928 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d0f0      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 0304 	and.w	r3, r3, #4
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d112      	bne.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10c      	bne.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 80ce 	beq.w	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80088fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008902:	f040 80c8 	bne.w	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008906:	4b0a      	ldr	r3, [pc, #40]	@ (8008930 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008908:	2200      	movs	r2, #0
 800890a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800890c:	f7fc f8b0 	bl	8004a70 <HAL_GetTick>
 8008910:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008912:	e00f      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008914:	f7fc f8ac 	bl	8004a70 <HAL_GetTick>
 8008918:	4602      	mov	r2, r0
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	2b02      	cmp	r3, #2
 8008920:	d908      	bls.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e14d      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8008926:	bf00      	nop
 8008928:	40023800 	.word	0x40023800
 800892c:	42470068 	.word	0x42470068
 8008930:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008934:	4ba5      	ldr	r3, [pc, #660]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800893c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008940:	d0e8      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 0304 	and.w	r3, r3, #4
 800894a:	2b00      	cmp	r3, #0
 800894c:	d02e      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800894e:	4b9f      	ldr	r3, [pc, #636]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008954:	0c1b      	lsrs	r3, r3, #16
 8008956:	f003 0303 	and.w	r3, r3, #3
 800895a:	3301      	adds	r3, #1
 800895c:	005b      	lsls	r3, r3, #1
 800895e:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008960:	4b9a      	ldr	r3, [pc, #616]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008966:	0f1b      	lsrs	r3, r3, #28
 8008968:	f003 0307 	and.w	r3, r3, #7
 800896c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	019a      	lsls	r2, r3, #6
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	085b      	lsrs	r3, r3, #1
 8008978:	3b01      	subs	r3, #1
 800897a:	041b      	lsls	r3, r3, #16
 800897c:	431a      	orrs	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	061b      	lsls	r3, r3, #24
 8008984:	431a      	orrs	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	071b      	lsls	r3, r3, #28
 800898a:	4990      	ldr	r1, [pc, #576]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800898c:	4313      	orrs	r3, r2
 800898e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008992:	4b8e      	ldr	r3, [pc, #568]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008994:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008998:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a0:	3b01      	subs	r3, #1
 80089a2:	021b      	lsls	r3, r3, #8
 80089a4:	4989      	ldr	r1, [pc, #548]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80089a6:	4313      	orrs	r3, r2
 80089a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0308 	and.w	r3, r3, #8
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d02c      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80089b8:	4b84      	ldr	r3, [pc, #528]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80089ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089be:	0c1b      	lsrs	r3, r3, #16
 80089c0:	f003 0303 	and.w	r3, r3, #3
 80089c4:	3301      	adds	r3, #1
 80089c6:	005b      	lsls	r3, r3, #1
 80089c8:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089ca:	4b80      	ldr	r3, [pc, #512]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80089cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089d0:	0e1b      	lsrs	r3, r3, #24
 80089d2:	f003 030f 	and.w	r3, r3, #15
 80089d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	019a      	lsls	r2, r3, #6
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	085b      	lsrs	r3, r3, #1
 80089e2:	3b01      	subs	r3, #1
 80089e4:	041b      	lsls	r3, r3, #16
 80089e6:	431a      	orrs	r2, r3
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	061b      	lsls	r3, r3, #24
 80089ec:	431a      	orrs	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	69db      	ldr	r3, [r3, #28]
 80089f2:	071b      	lsls	r3, r3, #28
 80089f4:	4975      	ldr	r1, [pc, #468]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80089f6:	4313      	orrs	r3, r2
 80089f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80089fc:	4b73      	ldr	r3, [pc, #460]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80089fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a02:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a0a:	4970      	ldr	r1, [pc, #448]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d024      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8008a22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a26:	d11f      	bne.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a28:	4b68      	ldr	r3, [pc, #416]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a2e:	0e1b      	lsrs	r3, r3, #24
 8008a30:	f003 030f 	and.w	r3, r3, #15
 8008a34:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a36:	4b65      	ldr	r3, [pc, #404]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a3c:	0f1b      	lsrs	r3, r3, #28
 8008a3e:	f003 0307 	and.w	r3, r3, #7
 8008a42:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	019a      	lsls	r2, r3, #6
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	085b      	lsrs	r3, r3, #1
 8008a50:	3b01      	subs	r3, #1
 8008a52:	041b      	lsls	r3, r3, #16
 8008a54:	431a      	orrs	r2, r3
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	061b      	lsls	r3, r3, #24
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	071b      	lsls	r3, r3, #28
 8008a60:	495a      	ldr	r1, [pc, #360]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008a62:	4313      	orrs	r3, r2
 8008a64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008a68:	4b59      	ldr	r3, [pc, #356]	@ (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008a6e:	f7fb ffff 	bl	8004a70 <HAL_GetTick>
 8008a72:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a74:	e008      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a76:	f7fb fffb 	bl	8004a70 <HAL_GetTick>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d901      	bls.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a84:	2303      	movs	r3, #3
 8008a86:	e09c      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a88:	4b50      	ldr	r3, [pc, #320]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a94:	d1ef      	bne.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 0320 	and.w	r3, r3, #32
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f000 8083 	beq.w	8008baa <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	60bb      	str	r3, [r7, #8]
 8008aa8:	4b48      	ldr	r3, [pc, #288]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aac:	4a47      	ldr	r2, [pc, #284]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008aae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ab2:	6413      	str	r3, [r2, #64]	@ 0x40
 8008ab4:	4b45      	ldr	r3, [pc, #276]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008abc:	60bb      	str	r3, [r7, #8]
 8008abe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008ac0:	4b44      	ldr	r3, [pc, #272]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a43      	ldr	r2, [pc, #268]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008ac6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008aca:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008acc:	f7fb ffd0 	bl	8004a70 <HAL_GetTick>
 8008ad0:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008ad2:	e008      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ad4:	f7fb ffcc 	bl	8004a70 <HAL_GetTick>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d901      	bls.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	e06d      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d0f0      	beq.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008af2:	4b36      	ldr	r3, [pc, #216]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008afa:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d02f      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b0a:	69ba      	ldr	r2, [r7, #24]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d028      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b10:	4b2e      	ldr	r3, [pc, #184]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b18:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008b20:	4b2d      	ldr	r3, [pc, #180]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008b26:	4a29      	ldr	r2, [pc, #164]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008b2c:	4b27      	ldr	r3, [pc, #156]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d114      	bne.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008b38:	f7fb ff9a 	bl	8004a70 <HAL_GetTick>
 8008b3c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b3e:	e00a      	b.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b40:	f7fb ff96 	bl	8004a70 <HAL_GetTick>
 8008b44:	4602      	mov	r2, r0
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d901      	bls.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e035      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b56:	4b1d      	ldr	r3, [pc, #116]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b5a:	f003 0302 	and.w	r3, r3, #2
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d0ee      	beq.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b6e:	d10d      	bne.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8008b70:	4b16      	ldr	r3, [pc, #88]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b7c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008b80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b84:	4911      	ldr	r1, [pc, #68]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	608b      	str	r3, [r1, #8]
 8008b8a:	e005      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8008b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	4a0e      	ldr	r2, [pc, #56]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008b92:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008b96:	6093      	str	r3, [r2, #8]
 8008b98:	4b0c      	ldr	r3, [pc, #48]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008b9a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ba4:	4909      	ldr	r1, [pc, #36]	@ (8008bcc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 0310 	and.w	r3, r3, #16
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d004      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8008bbc:	4b07      	ldr	r3, [pc, #28]	@ (8008bdc <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8008bbe:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3720      	adds	r7, #32
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	40023800 	.word	0x40023800
 8008bd0:	42470070 	.word	0x42470070
 8008bd4:	40007000 	.word	0x40007000
 8008bd8:	42470e40 	.word	0x42470e40
 8008bdc:	424711e0 	.word	0x424711e0

08008be0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d101      	bne.n	8008bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e273      	b.n	80090da <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d075      	beq.n	8008cea <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008bfe:	4b88      	ldr	r3, [pc, #544]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	f003 030c 	and.w	r3, r3, #12
 8008c06:	2b04      	cmp	r3, #4
 8008c08:	d00c      	beq.n	8008c24 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c0a:	4b85      	ldr	r3, [pc, #532]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f003 030c 	and.w	r3, r3, #12
        || \
 8008c12:	2b08      	cmp	r3, #8
 8008c14:	d112      	bne.n	8008c3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c16:	4b82      	ldr	r3, [pc, #520]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c22:	d10b      	bne.n	8008c3c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c24:	4b7e      	ldr	r3, [pc, #504]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d05b      	beq.n	8008ce8 <HAL_RCC_OscConfig+0x108>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d157      	bne.n	8008ce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e24e      	b.n	80090da <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c44:	d106      	bne.n	8008c54 <HAL_RCC_OscConfig+0x74>
 8008c46:	4b76      	ldr	r3, [pc, #472]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a75      	ldr	r2, [pc, #468]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c50:	6013      	str	r3, [r2, #0]
 8008c52:	e01d      	b.n	8008c90 <HAL_RCC_OscConfig+0xb0>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c5c:	d10c      	bne.n	8008c78 <HAL_RCC_OscConfig+0x98>
 8008c5e:	4b70      	ldr	r3, [pc, #448]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a6f      	ldr	r2, [pc, #444]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008c68:	6013      	str	r3, [r2, #0]
 8008c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a6c      	ldr	r2, [pc, #432]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c74:	6013      	str	r3, [r2, #0]
 8008c76:	e00b      	b.n	8008c90 <HAL_RCC_OscConfig+0xb0>
 8008c78:	4b69      	ldr	r3, [pc, #420]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a68      	ldr	r2, [pc, #416]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c82:	6013      	str	r3, [r2, #0]
 8008c84:	4b66      	ldr	r3, [pc, #408]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a65      	ldr	r2, [pc, #404]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d013      	beq.n	8008cc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c98:	f7fb feea 	bl	8004a70 <HAL_GetTick>
 8008c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c9e:	e008      	b.n	8008cb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ca0:	f7fb fee6 	bl	8004a70 <HAL_GetTick>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	2b64      	cmp	r3, #100	@ 0x64
 8008cac:	d901      	bls.n	8008cb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	e213      	b.n	80090da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d0f0      	beq.n	8008ca0 <HAL_RCC_OscConfig+0xc0>
 8008cbe:	e014      	b.n	8008cea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cc0:	f7fb fed6 	bl	8004a70 <HAL_GetTick>
 8008cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cc6:	e008      	b.n	8008cda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008cc8:	f7fb fed2 	bl	8004a70 <HAL_GetTick>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	2b64      	cmp	r3, #100	@ 0x64
 8008cd4:	d901      	bls.n	8008cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e1ff      	b.n	80090da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cda:	4b51      	ldr	r3, [pc, #324]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1f0      	bne.n	8008cc8 <HAL_RCC_OscConfig+0xe8>
 8008ce6:	e000      	b.n	8008cea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 0302 	and.w	r3, r3, #2
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d063      	beq.n	8008dbe <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	f003 030c 	and.w	r3, r3, #12
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00b      	beq.n	8008d1a <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d02:	4b47      	ldr	r3, [pc, #284]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	f003 030c 	and.w	r3, r3, #12
        || \
 8008d0a:	2b08      	cmp	r3, #8
 8008d0c:	d11c      	bne.n	8008d48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d0e:	4b44      	ldr	r3, [pc, #272]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d116      	bne.n	8008d48 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d1a:	4b41      	ldr	r3, [pc, #260]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0302 	and.w	r3, r3, #2
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d005      	beq.n	8008d32 <HAL_RCC_OscConfig+0x152>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d001      	beq.n	8008d32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e1d3      	b.n	80090da <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d32:	4b3b      	ldr	r3, [pc, #236]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	00db      	lsls	r3, r3, #3
 8008d40:	4937      	ldr	r1, [pc, #220]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008d42:	4313      	orrs	r3, r2
 8008d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d46:	e03a      	b.n	8008dbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d020      	beq.n	8008d92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d50:	4b34      	ldr	r3, [pc, #208]	@ (8008e24 <HAL_RCC_OscConfig+0x244>)
 8008d52:	2201      	movs	r2, #1
 8008d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d56:	f7fb fe8b 	bl	8004a70 <HAL_GetTick>
 8008d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d5c:	e008      	b.n	8008d70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d5e:	f7fb fe87 	bl	8004a70 <HAL_GetTick>
 8008d62:	4602      	mov	r2, r0
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d901      	bls.n	8008d70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e1b4      	b.n	80090da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d70:	4b2b      	ldr	r3, [pc, #172]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0302 	and.w	r3, r3, #2
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d0f0      	beq.n	8008d5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d7c:	4b28      	ldr	r3, [pc, #160]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	00db      	lsls	r3, r3, #3
 8008d8a:	4925      	ldr	r1, [pc, #148]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	600b      	str	r3, [r1, #0]
 8008d90:	e015      	b.n	8008dbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d92:	4b24      	ldr	r3, [pc, #144]	@ (8008e24 <HAL_RCC_OscConfig+0x244>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d98:	f7fb fe6a 	bl	8004a70 <HAL_GetTick>
 8008d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d9e:	e008      	b.n	8008db2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008da0:	f7fb fe66 	bl	8004a70 <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d901      	bls.n	8008db2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e193      	b.n	80090da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008db2:	4b1b      	ldr	r3, [pc, #108]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0302 	and.w	r3, r3, #2
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1f0      	bne.n	8008da0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 0308 	and.w	r3, r3, #8
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d036      	beq.n	8008e38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d016      	beq.n	8008e00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008dd2:	4b15      	ldr	r3, [pc, #84]	@ (8008e28 <HAL_RCC_OscConfig+0x248>)
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dd8:	f7fb fe4a 	bl	8004a70 <HAL_GetTick>
 8008ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008dde:	e008      	b.n	8008df2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008de0:	f7fb fe46 	bl	8004a70 <HAL_GetTick>
 8008de4:	4602      	mov	r2, r0
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d901      	bls.n	8008df2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e173      	b.n	80090da <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008df2:	4b0b      	ldr	r3, [pc, #44]	@ (8008e20 <HAL_RCC_OscConfig+0x240>)
 8008df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0f0      	beq.n	8008de0 <HAL_RCC_OscConfig+0x200>
 8008dfe:	e01b      	b.n	8008e38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e00:	4b09      	ldr	r3, [pc, #36]	@ (8008e28 <HAL_RCC_OscConfig+0x248>)
 8008e02:	2200      	movs	r2, #0
 8008e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e06:	f7fb fe33 	bl	8004a70 <HAL_GetTick>
 8008e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e0c:	e00e      	b.n	8008e2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e0e:	f7fb fe2f 	bl	8004a70 <HAL_GetTick>
 8008e12:	4602      	mov	r2, r0
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d907      	bls.n	8008e2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e15c      	b.n	80090da <HAL_RCC_OscConfig+0x4fa>
 8008e20:	40023800 	.word	0x40023800
 8008e24:	42470000 	.word	0x42470000
 8008e28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e2c:	4b8a      	ldr	r3, [pc, #552]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e30:	f003 0302 	and.w	r3, r3, #2
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1ea      	bne.n	8008e0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0304 	and.w	r3, r3, #4
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 8097 	beq.w	8008f74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e46:	2300      	movs	r3, #0
 8008e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e4a:	4b83      	ldr	r3, [pc, #524]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10f      	bne.n	8008e76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e56:	2300      	movs	r3, #0
 8008e58:	60bb      	str	r3, [r7, #8]
 8008e5a:	4b7f      	ldr	r3, [pc, #508]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e5e:	4a7e      	ldr	r2, [pc, #504]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8008e66:	4b7c      	ldr	r3, [pc, #496]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e6e:	60bb      	str	r3, [r7, #8]
 8008e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e72:	2301      	movs	r3, #1
 8008e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e76:	4b79      	ldr	r3, [pc, #484]	@ (800905c <HAL_RCC_OscConfig+0x47c>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d118      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e82:	4b76      	ldr	r3, [pc, #472]	@ (800905c <HAL_RCC_OscConfig+0x47c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a75      	ldr	r2, [pc, #468]	@ (800905c <HAL_RCC_OscConfig+0x47c>)
 8008e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e8e:	f7fb fdef 	bl	8004a70 <HAL_GetTick>
 8008e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e94:	e008      	b.n	8008ea8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e96:	f7fb fdeb 	bl	8004a70 <HAL_GetTick>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	1ad3      	subs	r3, r2, r3
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d901      	bls.n	8008ea8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e118      	b.n	80090da <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ea8:	4b6c      	ldr	r3, [pc, #432]	@ (800905c <HAL_RCC_OscConfig+0x47c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d0f0      	beq.n	8008e96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d106      	bne.n	8008eca <HAL_RCC_OscConfig+0x2ea>
 8008ebc:	4b66      	ldr	r3, [pc, #408]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ec0:	4a65      	ldr	r2, [pc, #404]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008ec2:	f043 0301 	orr.w	r3, r3, #1
 8008ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ec8:	e01c      	b.n	8008f04 <HAL_RCC_OscConfig+0x324>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	2b05      	cmp	r3, #5
 8008ed0:	d10c      	bne.n	8008eec <HAL_RCC_OscConfig+0x30c>
 8008ed2:	4b61      	ldr	r3, [pc, #388]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ed6:	4a60      	ldr	r2, [pc, #384]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008ed8:	f043 0304 	orr.w	r3, r3, #4
 8008edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ede:	4b5e      	ldr	r3, [pc, #376]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ee2:	4a5d      	ldr	r2, [pc, #372]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008ee4:	f043 0301 	orr.w	r3, r3, #1
 8008ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8008eea:	e00b      	b.n	8008f04 <HAL_RCC_OscConfig+0x324>
 8008eec:	4b5a      	ldr	r3, [pc, #360]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ef0:	4a59      	ldr	r2, [pc, #356]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008ef2:	f023 0301 	bic.w	r3, r3, #1
 8008ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ef8:	4b57      	ldr	r3, [pc, #348]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008efc:	4a56      	ldr	r2, [pc, #344]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008efe:	f023 0304 	bic.w	r3, r3, #4
 8008f02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d015      	beq.n	8008f38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f0c:	f7fb fdb0 	bl	8004a70 <HAL_GetTick>
 8008f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f12:	e00a      	b.n	8008f2a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f14:	f7fb fdac 	bl	8004a70 <HAL_GetTick>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d901      	bls.n	8008f2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008f26:	2303      	movs	r3, #3
 8008f28:	e0d7      	b.n	80090da <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f2a:	4b4b      	ldr	r3, [pc, #300]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f2e:	f003 0302 	and.w	r3, r3, #2
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d0ee      	beq.n	8008f14 <HAL_RCC_OscConfig+0x334>
 8008f36:	e014      	b.n	8008f62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f38:	f7fb fd9a 	bl	8004a70 <HAL_GetTick>
 8008f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f3e:	e00a      	b.n	8008f56 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f40:	f7fb fd96 	bl	8004a70 <HAL_GetTick>
 8008f44:	4602      	mov	r2, r0
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d901      	bls.n	8008f56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008f52:	2303      	movs	r3, #3
 8008f54:	e0c1      	b.n	80090da <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f56:	4b40      	ldr	r3, [pc, #256]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f5a:	f003 0302 	and.w	r3, r3, #2
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1ee      	bne.n	8008f40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d105      	bne.n	8008f74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f68:	4b3b      	ldr	r3, [pc, #236]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f6c:	4a3a      	ldr	r2, [pc, #232]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008f6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 80ad 	beq.w	80090d8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f7e:	4b36      	ldr	r3, [pc, #216]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f003 030c 	and.w	r3, r3, #12
 8008f86:	2b08      	cmp	r3, #8
 8008f88:	d060      	beq.n	800904c <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	699b      	ldr	r3, [r3, #24]
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d145      	bne.n	800901e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f92:	4b33      	ldr	r3, [pc, #204]	@ (8009060 <HAL_RCC_OscConfig+0x480>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f98:	f7fb fd6a 	bl	8004a70 <HAL_GetTick>
 8008f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f9e:	e008      	b.n	8008fb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fa0:	f7fb fd66 	bl	8004a70 <HAL_GetTick>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d901      	bls.n	8008fb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e093      	b.n	80090da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fb2:	4b29      	ldr	r3, [pc, #164]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1f0      	bne.n	8008fa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	69da      	ldr	r2, [r3, #28]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	431a      	orrs	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fcc:	019b      	lsls	r3, r3, #6
 8008fce:	431a      	orrs	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd4:	085b      	lsrs	r3, r3, #1
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	041b      	lsls	r3, r3, #16
 8008fda:	431a      	orrs	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe0:	061b      	lsls	r3, r3, #24
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fe8:	071b      	lsls	r3, r3, #28
 8008fea:	491b      	ldr	r1, [pc, #108]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8008fec:	4313      	orrs	r3, r2
 8008fee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8009060 <HAL_RCC_OscConfig+0x480>)
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ff6:	f7fb fd3b 	bl	8004a70 <HAL_GetTick>
 8008ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ffc:	e008      	b.n	8009010 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ffe:	f7fb fd37 	bl	8004a70 <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	2b02      	cmp	r3, #2
 800900a:	d901      	bls.n	8009010 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800900c:	2303      	movs	r3, #3
 800900e:	e064      	b.n	80090da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009010:	4b11      	ldr	r3, [pc, #68]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d0f0      	beq.n	8008ffe <HAL_RCC_OscConfig+0x41e>
 800901c:	e05c      	b.n	80090d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800901e:	4b10      	ldr	r3, [pc, #64]	@ (8009060 <HAL_RCC_OscConfig+0x480>)
 8009020:	2200      	movs	r2, #0
 8009022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009024:	f7fb fd24 	bl	8004a70 <HAL_GetTick>
 8009028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800902a:	e008      	b.n	800903e <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800902c:	f7fb fd20 	bl	8004a70 <HAL_GetTick>
 8009030:	4602      	mov	r2, r0
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	2b02      	cmp	r3, #2
 8009038:	d901      	bls.n	800903e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e04d      	b.n	80090da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800903e:	4b06      	ldr	r3, [pc, #24]	@ (8009058 <HAL_RCC_OscConfig+0x478>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1f0      	bne.n	800902c <HAL_RCC_OscConfig+0x44c>
 800904a:	e045      	b.n	80090d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	2b01      	cmp	r3, #1
 8009052:	d107      	bne.n	8009064 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e040      	b.n	80090da <HAL_RCC_OscConfig+0x4fa>
 8009058:	40023800 	.word	0x40023800
 800905c:	40007000 	.word	0x40007000
 8009060:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009064:	4b1f      	ldr	r3, [pc, #124]	@ (80090e4 <HAL_RCC_OscConfig+0x504>)
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d030      	beq.n	80090d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800907c:	429a      	cmp	r2, r3
 800907e:	d129      	bne.n	80090d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800908a:	429a      	cmp	r2, r3
 800908c:	d122      	bne.n	80090d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009094:	4013      	ands	r3, r2
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800909a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800909c:	4293      	cmp	r3, r2
 800909e:	d119      	bne.n	80090d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090aa:	085b      	lsrs	r3, r3, #1
 80090ac:	3b01      	subs	r3, #1
 80090ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d10f      	bne.n	80090d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d107      	bne.n	80090d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d001      	beq.n	80090d8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e000      	b.n	80090da <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3718      	adds	r7, #24
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	40023800 	.word	0x40023800

080090e8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d101      	bne.n	80090fc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e025      	b.n	8009148 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b00      	cmp	r3, #0
 8009106:	d106      	bne.n	8009116 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f7f9 fa07 	bl	8002524 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2202      	movs	r2, #2
 800911a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	3304      	adds	r3, #4
 8009126:	4619      	mov	r1, r3
 8009128:	4610      	mov	r0, r2
 800912a:	f000 f86e 	bl	800920a <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6818      	ldr	r0, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	461a      	mov	r2, r3
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	f000 f8c3 	bl	80092c4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009162:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009164:	7dfb      	ldrb	r3, [r7, #23]
 8009166:	2b02      	cmp	r3, #2
 8009168:	d101      	bne.n	800916e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800916a:	2302      	movs	r3, #2
 800916c:	e021      	b.n	80091b2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800916e:	7dfb      	ldrb	r3, [r7, #23]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d002      	beq.n	800917a <HAL_SDRAM_SendCommand+0x2a>
 8009174:	7dfb      	ldrb	r3, [r7, #23]
 8009176:	2b05      	cmp	r3, #5
 8009178:	d118      	bne.n	80091ac <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2202      	movs	r2, #2
 800917e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	68b9      	ldr	r1, [r7, #8]
 800918a:	4618      	mov	r0, r3
 800918c:	f000 f903 	bl	8009396 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b02      	cmp	r3, #2
 8009196:	d104      	bne.n	80091a2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2205      	movs	r2, #5
 800919c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80091a0:	e006      	b.n	80091b0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80091aa:	e001      	b.n	80091b0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e000      	b.n	80091b2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3718      	adds	r7, #24
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b082      	sub	sp, #8
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d101      	bne.n	80091d4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80091d0:	2302      	movs	r3, #2
 80091d2:	e016      	b.n	8009202 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d10f      	bne.n	8009200 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2202      	movs	r2, #2
 80091e4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 f90e 	bl	8009410 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	e000      	b.n	8009202 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
}
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800920a:	b480      	push	{r7}
 800920c:	b083      	sub	sp, #12
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
 8009212:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d123      	bne.n	8009264 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009224:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	6851      	ldr	r1, [r2, #4]
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	6892      	ldr	r2, [r2, #8]
 8009230:	4311      	orrs	r1, r2
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	68d2      	ldr	r2, [r2, #12]
 8009236:	4311      	orrs	r1, r2
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	6912      	ldr	r2, [r2, #16]
 800923c:	4311      	orrs	r1, r2
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	6952      	ldr	r2, [r2, #20]
 8009242:	4311      	orrs	r1, r2
 8009244:	683a      	ldr	r2, [r7, #0]
 8009246:	6992      	ldr	r2, [r2, #24]
 8009248:	4311      	orrs	r1, r2
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	69d2      	ldr	r2, [r2, #28]
 800924e:	4311      	orrs	r1, r2
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	6a12      	ldr	r2, [r2, #32]
 8009254:	4311      	orrs	r1, r2
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800925a:	430a      	orrs	r2, r1
 800925c:	431a      	orrs	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	601a      	str	r2, [r3, #0]
 8009262:	e028      	b.n	80092b6 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	69d9      	ldr	r1, [r3, #28]
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	6a1b      	ldr	r3, [r3, #32]
 8009274:	4319      	orrs	r1, r3
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800927a:	430b      	orrs	r3, r1
 800927c:	431a      	orrs	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800928a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	6851      	ldr	r1, [r2, #4]
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	6892      	ldr	r2, [r2, #8]
 8009296:	4311      	orrs	r1, r2
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	68d2      	ldr	r2, [r2, #12]
 800929c:	4311      	orrs	r1, r2
 800929e:	683a      	ldr	r2, [r7, #0]
 80092a0:	6912      	ldr	r2, [r2, #16]
 80092a2:	4311      	orrs	r1, r2
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	6952      	ldr	r2, [r2, #20]
 80092a8:	4311      	orrs	r1, r2
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	6992      	ldr	r2, [r2, #24]
 80092ae:	430a      	orrs	r2, r1
 80092b0:	431a      	orrs	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d128      	bne.n	8009328 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	1e59      	subs	r1, r3, #1
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	3b01      	subs	r3, #1
 80092ea:	011b      	lsls	r3, r3, #4
 80092ec:	4319      	orrs	r1, r3
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	3b01      	subs	r3, #1
 80092f4:	021b      	lsls	r3, r3, #8
 80092f6:	4319      	orrs	r1, r3
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	3b01      	subs	r3, #1
 80092fe:	031b      	lsls	r3, r3, #12
 8009300:	4319      	orrs	r1, r3
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	3b01      	subs	r3, #1
 8009308:	041b      	lsls	r3, r3, #16
 800930a:	4319      	orrs	r1, r3
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	695b      	ldr	r3, [r3, #20]
 8009310:	3b01      	subs	r3, #1
 8009312:	051b      	lsls	r3, r3, #20
 8009314:	4319      	orrs	r1, r3
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	3b01      	subs	r3, #1
 800931c:	061b      	lsls	r3, r3, #24
 800931e:	430b      	orrs	r3, r1
 8009320:	431a      	orrs	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	609a      	str	r2, [r3, #8]
 8009326:	e02f      	b.n	8009388 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009330:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	68d2      	ldr	r2, [r2, #12]
 8009338:	3a01      	subs	r2, #1
 800933a:	0311      	lsls	r1, r2, #12
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	6952      	ldr	r2, [r2, #20]
 8009340:	3a01      	subs	r2, #1
 8009342:	0512      	lsls	r2, r2, #20
 8009344:	430a      	orrs	r2, r1
 8009346:	431a      	orrs	r2, r3
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	1e59      	subs	r1, r3, #1
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	3b01      	subs	r3, #1
 8009360:	011b      	lsls	r3, r3, #4
 8009362:	4319      	orrs	r1, r3
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	3b01      	subs	r3, #1
 800936a:	021b      	lsls	r3, r3, #8
 800936c:	4319      	orrs	r1, r3
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	3b01      	subs	r3, #1
 8009374:	041b      	lsls	r3, r3, #16
 8009376:	4319      	orrs	r1, r3
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	3b01      	subs	r3, #1
 800937e:	061b      	lsls	r3, r3, #24
 8009380:	430b      	orrs	r3, r1
 8009382:	431a      	orrs	r2, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b086      	sub	sp, #24
 800939a:	af00      	add	r7, sp, #0
 800939c:	60f8      	str	r0, [r7, #12]
 800939e:	60b9      	str	r1, [r7, #8]
 80093a0:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80093a2:	2300      	movs	r3, #0
 80093a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	0d9b      	lsrs	r3, r3, #22
 80093ac:	059b      	lsls	r3, r3, #22
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	6811      	ldr	r1, [r2, #0]
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	6852      	ldr	r2, [r2, #4]
 80093b6:	4311      	orrs	r1, r2
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	6892      	ldr	r2, [r2, #8]
 80093bc:	3a01      	subs	r2, #1
 80093be:	0152      	lsls	r2, r2, #5
 80093c0:	4311      	orrs	r1, r2
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	68d2      	ldr	r2, [r2, #12]
 80093c6:	0252      	lsls	r2, r2, #9
 80093c8:	430a      	orrs	r2, r1
 80093ca:	431a      	orrs	r2, r3
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80093d0:	f7fb fb4e 	bl	8004a70 <HAL_GetTick>
 80093d4:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80093d6:	e010      	b.n	80093fa <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093de:	d00c      	beq.n	80093fa <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d007      	beq.n	80093f6 <FMC_SDRAM_SendCommand+0x60>
 80093e6:	f7fb fb43 	bl	8004a70 <HAL_GetTick>
 80093ea:	4602      	mov	r2, r0
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	1ad3      	subs	r3, r2, r3
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d201      	bcs.n	80093fa <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e006      	b.n	8009408 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	f003 0320 	and.w	r3, r3, #32
 8009402:	2b20      	cmp	r3, #32
 8009404:	d0e8      	beq.n	80093d8 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3718      	adds	r7, #24
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	695b      	ldr	r3, [r3, #20]
 800941e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8009422:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	0052      	lsls	r2, r2, #1
 800942a:	431a      	orrs	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
	...

08009440 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	2101      	movs	r1, #1
 800944e:	4848      	ldr	r0, [pc, #288]	@ (8009570 <network_configure_activations+0x130>)
 8009450:	f000 fb0e 	bl	8009a70 <ai_platform_get_activations_map>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d07f      	beq.n	800955a <network_configure_activations+0x11a>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 21040);
 800945a:	4b45      	ldr	r3, [pc, #276]	@ (8009570 <network_configure_activations+0x130>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f503 43a4 	add.w	r3, r3, #20992	@ 0x5200
 8009462:	3330      	adds	r3, #48	@ 0x30
 8009464:	4a43      	ldr	r2, [pc, #268]	@ (8009574 <network_configure_activations+0x134>)
 8009466:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 21040);
 8009468:	4b41      	ldr	r3, [pc, #260]	@ (8009570 <network_configure_activations+0x130>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f503 43a4 	add.w	r3, r3, #20992	@ 0x5200
 8009470:	3330      	adds	r3, #48	@ 0x30
 8009472:	4a40      	ldr	r2, [pc, #256]	@ (8009574 <network_configure_activations+0x134>)
 8009474:	60d3      	str	r3, [r2, #12]
    conv2d_conv2d_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 24176);
 8009476:	4b3e      	ldr	r3, [pc, #248]	@ (8009570 <network_configure_activations+0x130>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f503 43bc 	add.w	r3, r3, #24064	@ 0x5e00
 800947e:	3370      	adds	r3, #112	@ 0x70
 8009480:	4a3d      	ldr	r2, [pc, #244]	@ (8009578 <network_configure_activations+0x138>)
 8009482:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 24176);
 8009484:	4b3a      	ldr	r3, [pc, #232]	@ (8009570 <network_configure_activations+0x130>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f503 43bc 	add.w	r3, r3, #24064	@ 0x5e00
 800948c:	3370      	adds	r3, #112	@ 0x70
 800948e:	4a3a      	ldr	r2, [pc, #232]	@ (8009578 <network_configure_activations+0x138>)
 8009490:	60d3      	str	r3, [r2, #12]
    conv2d_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 768);
 8009492:	4b37      	ldr	r3, [pc, #220]	@ (8009570 <network_configure_activations+0x130>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800949a:	4a38      	ldr	r2, [pc, #224]	@ (800957c <network_configure_activations+0x13c>)
 800949c:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 768);
 800949e:	4b34      	ldr	r3, [pc, #208]	@ (8009570 <network_configure_activations+0x130>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80094a6:	4a35      	ldr	r2, [pc, #212]	@ (800957c <network_configure_activations+0x13c>)
 80094a8:	60d3      	str	r3, [r2, #12]
    conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 768);
 80094aa:	4b31      	ldr	r3, [pc, #196]	@ (8009570 <network_configure_activations+0x130>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80094b2:	4a33      	ldr	r2, [pc, #204]	@ (8009580 <network_configure_activations+0x140>)
 80094b4:	6093      	str	r3, [r2, #8]
    conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 768);
 80094b6:	4b2e      	ldr	r3, [pc, #184]	@ (8009570 <network_configure_activations+0x130>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80094be:	4a30      	ldr	r2, [pc, #192]	@ (8009580 <network_configure_activations+0x140>)
 80094c0:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 22400);
 80094c2:	4b2b      	ldr	r3, [pc, #172]	@ (8009570 <network_configure_activations+0x130>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f503 43af 	add.w	r3, r3, #22400	@ 0x5780
 80094ca:	4a2e      	ldr	r2, [pc, #184]	@ (8009584 <network_configure_activations+0x144>)
 80094cc:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 22400);
 80094ce:	4b28      	ldr	r3, [pc, #160]	@ (8009570 <network_configure_activations+0x130>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f503 43af 	add.w	r3, r3, #22400	@ 0x5780
 80094d6:	4a2b      	ldr	r2, [pc, #172]	@ (8009584 <network_configure_activations+0x144>)
 80094d8:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 22688);
 80094da:	4b25      	ldr	r3, [pc, #148]	@ (8009570 <network_configure_activations+0x130>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f503 43b1 	add.w	r3, r3, #22656	@ 0x5880
 80094e2:	3320      	adds	r3, #32
 80094e4:	4a28      	ldr	r2, [pc, #160]	@ (8009588 <network_configure_activations+0x148>)
 80094e6:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 22688);
 80094e8:	4b21      	ldr	r3, [pc, #132]	@ (8009570 <network_configure_activations+0x130>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f503 43b1 	add.w	r3, r3, #22656	@ 0x5880
 80094f0:	3320      	adds	r3, #32
 80094f2:	4a25      	ldr	r2, [pc, #148]	@ (8009588 <network_configure_activations+0x148>)
 80094f4:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80094f6:	4b1e      	ldr	r3, [pc, #120]	@ (8009570 <network_configure_activations+0x130>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a24      	ldr	r2, [pc, #144]	@ (800958c <network_configure_activations+0x14c>)
 80094fc:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80094fe:	4b1c      	ldr	r3, [pc, #112]	@ (8009570 <network_configure_activations+0x130>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a22      	ldr	r2, [pc, #136]	@ (800958c <network_configure_activations+0x14c>)
 8009504:	60d3      	str	r3, [r2, #12]
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 9216);
 8009506:	4b1a      	ldr	r3, [pc, #104]	@ (8009570 <network_configure_activations+0x130>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800950e:	4a20      	ldr	r2, [pc, #128]	@ (8009590 <network_configure_activations+0x150>)
 8009510:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 9216);
 8009512:	4b17      	ldr	r3, [pc, #92]	@ (8009570 <network_configure_activations+0x130>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800951a:	4a1d      	ldr	r2, [pc, #116]	@ (8009590 <network_configure_activations+0x150>)
 800951c:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800951e:	4b14      	ldr	r3, [pc, #80]	@ (8009570 <network_configure_activations+0x130>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a1c      	ldr	r2, [pc, #112]	@ (8009594 <network_configure_activations+0x154>)
 8009524:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8009526:	4b12      	ldr	r3, [pc, #72]	@ (8009570 <network_configure_activations+0x130>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a1a      	ldr	r2, [pc, #104]	@ (8009594 <network_configure_activations+0x154>)
 800952c:	60d3      	str	r3, [r2, #12]
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800952e:	4b10      	ldr	r3, [pc, #64]	@ (8009570 <network_configure_activations+0x130>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8009536:	4a18      	ldr	r2, [pc, #96]	@ (8009598 <network_configure_activations+0x158>)
 8009538:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800953a:	4b0d      	ldr	r3, [pc, #52]	@ (8009570 <network_configure_activations+0x130>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8009542:	4a15      	ldr	r2, [pc, #84]	@ (8009598 <network_configure_activations+0x158>)
 8009544:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8009546:	4b0a      	ldr	r3, [pc, #40]	@ (8009570 <network_configure_activations+0x130>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a14      	ldr	r2, [pc, #80]	@ (800959c <network_configure_activations+0x15c>)
 800954c:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800954e:	4b08      	ldr	r3, [pc, #32]	@ (8009570 <network_configure_activations+0x130>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a12      	ldr	r2, [pc, #72]	@ (800959c <network_configure_activations+0x15c>)
 8009554:	60d3      	str	r3, [r2, #12]
    return true;
 8009556:	2301      	movs	r3, #1
 8009558:	e005      	b.n	8009566 <network_configure_activations+0x126>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800955a:	2213      	movs	r2, #19
 800955c:	2130      	movs	r1, #48	@ 0x30
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fae6 	bl	8009b30 <ai_platform_network_set_error>
  return false;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	20008230 	.word	0x20008230
 8009574:	20000048 	.word	0x20000048
 8009578:	20000148 	.word	0x20000148
 800957c:	20000058 	.word	0x20000058
 8009580:	20000068 	.word	0x20000068
 8009584:	20000158 	.word	0x20000158
 8009588:	20000168 	.word	0x20000168
 800958c:	20000078 	.word	0x20000078
 8009590:	20000088 	.word	0x20000088
 8009594:	20000098 	.word	0x20000098
 8009598:	200000a8 	.word	0x200000a8
 800959c:	200000b8 	.word	0x200000b8

080095a0 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	2101      	movs	r1, #1
 80095ae:	4855      	ldr	r0, [pc, #340]	@ (8009704 <network_configure_weights+0x164>)
 80095b0:	f000 fa0c 	bl	80099cc <ai_platform_get_weights_map>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f000 809a 	beq.w	80096f0 <network_configure_weights+0x150>
    /* Updating weights (byte) offsets */
    
    conv2d_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80095bc:	4b52      	ldr	r3, [pc, #328]	@ (8009708 <network_configure_weights+0x168>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095c4:	4a50      	ldr	r2, [pc, #320]	@ (8009708 <network_configure_weights+0x168>)
 80095c6:	6013      	str	r3, [r2, #0]
    conv2d_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80095c8:	4b4e      	ldr	r3, [pc, #312]	@ (8009704 <network_configure_weights+0x164>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a4e      	ldr	r2, [pc, #312]	@ (8009708 <network_configure_weights+0x168>)
 80095ce:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 80095d0:	4b4c      	ldr	r3, [pc, #304]	@ (8009704 <network_configure_weights+0x164>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a4c      	ldr	r2, [pc, #304]	@ (8009708 <network_configure_weights+0x168>)
 80095d6:	60d3      	str	r3, [r2, #12]
    conv2d_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80095d8:	4b4c      	ldr	r3, [pc, #304]	@ (800970c <network_configure_weights+0x16c>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095e0:	4a4a      	ldr	r2, [pc, #296]	@ (800970c <network_configure_weights+0x16c>)
 80095e2:	6013      	str	r3, [r2, #0]
    conv2d_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 288);
 80095e4:	4b47      	ldr	r3, [pc, #284]	@ (8009704 <network_configure_weights+0x164>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80095ec:	4a47      	ldr	r2, [pc, #284]	@ (800970c <network_configure_weights+0x16c>)
 80095ee:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 288);
 80095f0:	4b44      	ldr	r3, [pc, #272]	@ (8009704 <network_configure_weights+0x164>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80095f8:	4a44      	ldr	r2, [pc, #272]	@ (800970c <network_configure_weights+0x16c>)
 80095fa:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80095fc:	4b44      	ldr	r3, [pc, #272]	@ (8009710 <network_configure_weights+0x170>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009604:	4a42      	ldr	r2, [pc, #264]	@ (8009710 <network_configure_weights+0x170>)
 8009606:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_weights_array.data = AI_PTR(g_network_weights_map[0] + 320);
 8009608:	4b3e      	ldr	r3, [pc, #248]	@ (8009704 <network_configure_weights+0x164>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8009610:	4a3f      	ldr	r2, [pc, #252]	@ (8009710 <network_configure_weights+0x170>)
 8009612:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 320);
 8009614:	4b3b      	ldr	r3, [pc, #236]	@ (8009704 <network_configure_weights+0x164>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800961c:	4a3c      	ldr	r2, [pc, #240]	@ (8009710 <network_configure_weights+0x170>)
 800961e:	60d3      	str	r3, [r2, #12]
    conv2d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8009620:	4b3c      	ldr	r3, [pc, #240]	@ (8009714 <network_configure_weights+0x174>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009628:	4a3a      	ldr	r2, [pc, #232]	@ (8009714 <network_configure_weights+0x174>)
 800962a:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_bias_array.data = AI_PTR(g_network_weights_map[0] + 4928);
 800962c:	4b35      	ldr	r3, [pc, #212]	@ (8009704 <network_configure_weights+0x164>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8009634:	4a37      	ldr	r2, [pc, #220]	@ (8009714 <network_configure_weights+0x174>)
 8009636:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 4928);
 8009638:	4b32      	ldr	r3, [pc, #200]	@ (8009704 <network_configure_weights+0x164>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8009640:	4a34      	ldr	r2, [pc, #208]	@ (8009714 <network_configure_weights+0x174>)
 8009642:	60d3      	str	r3, [r2, #12]
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8009644:	4b34      	ldr	r3, [pc, #208]	@ (8009718 <network_configure_weights+0x178>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800964c:	4a32      	ldr	r2, [pc, #200]	@ (8009718 <network_configure_weights+0x178>)
 800964e:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 4992);
 8009650:	4b2c      	ldr	r3, [pc, #176]	@ (8009704 <network_configure_weights+0x164>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8009658:	4a2f      	ldr	r2, [pc, #188]	@ (8009718 <network_configure_weights+0x178>)
 800965a:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 4992);
 800965c:	4b29      	ldr	r3, [pc, #164]	@ (8009704 <network_configure_weights+0x164>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8009664:	4a2c      	ldr	r2, [pc, #176]	@ (8009718 <network_configure_weights+0x178>)
 8009666:	60d3      	str	r3, [r2, #12]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8009668:	4b2c      	ldr	r3, [pc, #176]	@ (800971c <network_configure_weights+0x17c>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009670:	4a2a      	ldr	r2, [pc, #168]	@ (800971c <network_configure_weights+0x17c>)
 8009672:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 594816);
 8009674:	4b23      	ldr	r3, [pc, #140]	@ (8009704 <network_configure_weights+0x164>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f503 2311 	add.w	r3, r3, #593920	@ 0x91000
 800967c:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 8009680:	4a26      	ldr	r2, [pc, #152]	@ (800971c <network_configure_weights+0x17c>)
 8009682:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 594816);
 8009684:	4b1f      	ldr	r3, [pc, #124]	@ (8009704 <network_configure_weights+0x164>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f503 2311 	add.w	r3, r3, #593920	@ 0x91000
 800968c:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 8009690:	4a22      	ldr	r2, [pc, #136]	@ (800971c <network_configure_weights+0x17c>)
 8009692:	60d3      	str	r3, [r2, #12]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8009694:	4b22      	ldr	r3, [pc, #136]	@ (8009720 <network_configure_weights+0x180>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800969c:	4a20      	ldr	r2, [pc, #128]	@ (8009720 <network_configure_weights+0x180>)
 800969e:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 595072);
 80096a0:	4b18      	ldr	r3, [pc, #96]	@ (8009704 <network_configure_weights+0x164>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f503 2311 	add.w	r3, r3, #593920	@ 0x91000
 80096a8:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80096ac:	4a1c      	ldr	r2, [pc, #112]	@ (8009720 <network_configure_weights+0x180>)
 80096ae:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 595072);
 80096b0:	4b14      	ldr	r3, [pc, #80]	@ (8009704 <network_configure_weights+0x164>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f503 2311 	add.w	r3, r3, #593920	@ 0x91000
 80096b8:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80096bc:	4a18      	ldr	r2, [pc, #96]	@ (8009720 <network_configure_weights+0x180>)
 80096be:	60d3      	str	r3, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80096c0:	4b18      	ldr	r3, [pc, #96]	@ (8009724 <network_configure_weights+0x184>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80096c8:	4a16      	ldr	r2, [pc, #88]	@ (8009724 <network_configure_weights+0x184>)
 80096ca:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 597632);
 80096cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009704 <network_configure_weights+0x164>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f503 2311 	add.w	r3, r3, #593920	@ 0x91000
 80096d4:	f503 6368 	add.w	r3, r3, #3712	@ 0xe80
 80096d8:	4a12      	ldr	r2, [pc, #72]	@ (8009724 <network_configure_weights+0x184>)
 80096da:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 597632);
 80096dc:	4b09      	ldr	r3, [pc, #36]	@ (8009704 <network_configure_weights+0x164>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f503 2311 	add.w	r3, r3, #593920	@ 0x91000
 80096e4:	f503 6368 	add.w	r3, r3, #3712	@ 0xe80
 80096e8:	4a0e      	ldr	r2, [pc, #56]	@ (8009724 <network_configure_weights+0x184>)
 80096ea:	60d3      	str	r3, [r2, #12]
    return true;
 80096ec:	2301      	movs	r3, #1
 80096ee:	e005      	b.n	80096fc <network_configure_weights+0x15c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80096f0:	2212      	movs	r2, #18
 80096f2:	2130      	movs	r1, #48	@ 0x30
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fa1b 	bl	8009b30 <ai_platform_network_set_error>
  return false;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	20008234 	.word	0x20008234
 8009708:	200000c8 	.word	0x200000c8
 800970c:	200000d8 	.word	0x200000d8
 8009710:	200000e8 	.word	0x200000e8
 8009714:	200000f8 	.word	0x200000f8
 8009718:	20000108 	.word	0x20000108
 800971c:	20000118 	.word	0x20000118
 8009720:	20000128 	.word	0x20000128
 8009724:	20000138 	.word	0x20000138

08009728 <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f9f1 	bl	8009b18 <ai_platform_network_get_error>
 8009736:	4603      	mov	r3, r0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af02      	add	r7, sp, #8
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800974a:	2300      	movs	r3, #0
 800974c:	9301      	str	r3, [sp, #4]
 800974e:	2305      	movs	r3, #5
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	2301      	movs	r3, #1
 8009754:	4a04      	ldr	r2, [pc, #16]	@ (8009768 <ai_network_create+0x28>)
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fad7 	bl	8009d0c <ai_platform_network_create>
 800975e:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8009760:	4618      	mov	r0, r3
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	200009b8 	.word	0x200009b8

0800976c <ai_network_inputs_get>:
}


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d104      	bne.n	8009786 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800977c:	4b06      	ldr	r3, [pc, #24]	@ (8009798 <ai_network_inputs_get+0x2c>)
 800977e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a06      	ldr	r2, [pc, #24]	@ (800979c <ai_network_inputs_get+0x30>)
 8009784:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f9d7 	bl	8009b3c <ai_platform_inputs_get>
 800978e:	4603      	mov	r3, r0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	200009b8 	.word	0x200009b8
 800979c:	a1c00100 	.word	0xa1c00100

080097a0 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d104      	bne.n	80097ba <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80097b0:	4b06      	ldr	r3, [pc, #24]	@ (80097cc <ai_network_outputs_get+0x2c>)
 80097b2:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4a06      	ldr	r2, [pc, #24]	@ (80097d0 <ai_network_outputs_get+0x30>)
 80097b8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80097ba:	6839      	ldr	r1, [r7, #0]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fa33 	bl	8009c28 <ai_platform_outputs_get>
 80097c2:	4603      	mov	r3, r0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	200009b8 	.word	0x200009b8
 80097d0:	a1c00100 	.word	0xa1c00100

080097d4 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 80097de:	6839      	ldr	r1, [r7, #0]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fad5 	bl	8009d90 <ai_platform_network_init>
 80097e6:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 80097e8:	2301      	movs	r3, #1
 80097ea:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <ai_network_init+0x22>
 80097f2:	2300      	movs	r3, #0
 80097f4:	e026      	b.n	8009844 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 80097f6:	6839      	ldr	r1, [r7, #0]
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f7ff fed1 	bl	80095a0 <network_configure_weights>
 80097fe:	4603      	mov	r3, r0
 8009800:	461a      	mov	r2, r3
 8009802:	7afb      	ldrb	r3, [r7, #11]
 8009804:	4013      	ands	r3, r2
 8009806:	2b00      	cmp	r3, #0
 8009808:	bf14      	ite	ne
 800980a:	2301      	movne	r3, #1
 800980c:	2300      	moveq	r3, #0
 800980e:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f7ff fe14 	bl	8009440 <network_configure_activations>
 8009818:	4603      	mov	r3, r0
 800981a:	461a      	mov	r2, r3
 800981c:	7afb      	ldrb	r3, [r7, #11]
 800981e:	4013      	ands	r3, r2
 8009820:	2b00      	cmp	r3, #0
 8009822:	bf14      	ite	ne
 8009824:	2301      	movne	r3, #1
 8009826:	2300      	moveq	r3, #0
 8009828:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fb48 	bl	8009ec0 <ai_platform_network_post_init>
 8009830:	4603      	mov	r3, r0
 8009832:	461a      	mov	r2, r3
 8009834:	7afb      	ldrb	r3, [r7, #11]
 8009836:	4013      	ands	r3, r2
 8009838:	2b00      	cmp	r3, #0
 800983a:	bf14      	ite	ne
 800983c:	2301      	movne	r3, #1
 800983e:	2300      	moveq	r3, #0
 8009840:	72fb      	strb	r3, [r7, #11]

  return ok;
 8009842:	7afb      	ldrb	r3, [r7, #11]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	68b9      	ldr	r1, [r7, #8]
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f000 fb5d 	bl	8009f1c <ai_platform_network_process>
 8009862:	4603      	mov	r3, r0
}
 8009864:	4618      	mov	r0, r3
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <ai_network_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_activations_buffer_get(const ai_handle ptr)
{
 800986c:	b4b0      	push	{r4, r5, r7}
 800986e:	b08f      	sub	sp, #60	@ 0x3c
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8009876:	4b15      	ldr	r3, [pc, #84]	@ (80098cc <ai_network_data_activations_buffer_get+0x60>)
 8009878:	61fb      	str	r3, [r7, #28]
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	623b      	str	r3, [r7, #32]
 800987e:	2300      	movs	r3, #0
 8009880:	627b      	str	r3, [r7, #36]	@ 0x24
 8009882:	2300      	movs	r3, #0
 8009884:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009886:	f246 43a0 	movw	r3, #25760	@ 0x64a0
 800988a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800988c:	2301      	movs	r3, #1
 800988e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8009892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009894:	2204      	movs	r2, #4
 8009896:	f362 231f 	bfi	r3, r2, #8, #24
 800989a:	633b      	str	r3, [r7, #48]	@ 0x30
 800989c:	4b0c      	ldr	r3, [pc, #48]	@ (80098d0 <ai_network_data_activations_buffer_get+0x64>)
 800989e:	f107 040c 	add.w	r4, r7, #12
 80098a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80098a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80098a8:	f107 030c 	add.w	r3, r7, #12
 80098ac:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	461d      	mov	r5, r3
 80098b2:	f107 041c 	add.w	r4, r7, #28
 80098b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80098b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80098ba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80098be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	373c      	adds	r7, #60	@ 0x3c
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bcb0      	pop	{r4, r5, r7}
 80098ca:	4770      	bx	lr
 80098cc:	00040440 	.word	0x00040440
 80098d0:	0800fdd8 	.word	0x0800fdd8

080098d4 <ai_network_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_weights_buffer_get(const ai_handle ptr)
{
 80098d4:	b4b0      	push	{r4, r5, r7}
 80098d6:	b08f      	sub	sp, #60	@ 0x3c
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 80098de:	4b15      	ldr	r3, [pc, #84]	@ (8009934 <ai_network_data_weights_buffer_get+0x60>)
 80098e0:	61fb      	str	r3, [r7, #28]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	623b      	str	r3, [r7, #32]
 80098e6:	2300      	movs	r3, #0
 80098e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80098ea:	2300      	movs	r3, #0
 80098ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098ee:	4b12      	ldr	r3, [pc, #72]	@ (8009938 <ai_network_data_weights_buffer_get+0x64>)
 80098f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098f2:	2301      	movs	r3, #1
 80098f4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80098f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fa:	2204      	movs	r2, #4
 80098fc:	f362 231f 	bfi	r3, r2, #8, #24
 8009900:	633b      	str	r3, [r7, #48]	@ 0x30
 8009902:	4b0e      	ldr	r3, [pc, #56]	@ (800993c <ai_network_data_weights_buffer_get+0x68>)
 8009904:	f107 040c 	add.w	r4, r7, #12
 8009908:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800990a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800990e:	f107 030c 	add.w	r3, r7, #12
 8009912:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	461d      	mov	r5, r3
 8009918:	f107 041c 	add.w	r4, r7, #28
 800991c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800991e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009920:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009924:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	373c      	adds	r7, #60	@ 0x3c
 800992c:	46bd      	mov	sp, r7
 800992e:	bcb0      	pop	{r4, r5, r7}
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	40040440 	.word	0x40040440
 8009938:	00091ea8 	.word	0x00091ea8
 800993c:	0800fde8 	.word	0x0800fde8

08009940 <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 8009940:	b480      	push	{r7}
 8009942:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_network_weights_table);
 8009944:	4b02      	ldr	r3, [pc, #8]	@ (8009950 <ai_network_data_weights_get+0x10>)

}
 8009946:	4618      	mov	r0, r3
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr
 8009950:	20000a5c 	.word	0x20000a5c

08009954 <ai_buffer_get_size>:
 8009954:	b360      	cbz	r0, 80099b0 <ai_buffer_get_size+0x5c>
 8009956:	b430      	push	{r4, r5}
 8009958:	6803      	ldr	r3, [r0, #0]
 800995a:	4d16      	ldr	r5, [pc, #88]	@ (80099b4 <ai_buffer_get_size+0x60>)
 800995c:	6984      	ldr	r4, [r0, #24]
 800995e:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8009962:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009966:	42ab      	cmp	r3, r5
 8009968:	6862      	ldr	r2, [r4, #4]
 800996a:	d01b      	beq.n	80099a4 <ai_buffer_get_size+0x50>
 800996c:	7d03      	ldrb	r3, [r0, #20]
 800996e:	6941      	ldr	r1, [r0, #20]
 8009970:	f1a3 0301 	sub.w	r3, r3, #1
 8009974:	fab3 f383 	clz	r3, r3
 8009978:	095b      	lsrs	r3, r3, #5
 800997a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800997e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8009982:	da0b      	bge.n	800999c <ai_buffer_get_size+0x48>
 8009984:	2b01      	cmp	r3, #1
 8009986:	d102      	bne.n	800998e <ai_buffer_get_size+0x3a>
 8009988:	2802      	cmp	r0, #2
 800998a:	d007      	beq.n	800999c <ai_buffer_get_size+0x48>
 800998c:	2302      	movs	r3, #2
 800998e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8009992:	3301      	adds	r3, #1
 8009994:	4298      	cmp	r0, r3
 8009996:	fb01 f202 	mul.w	r2, r1, r2
 800999a:	d1f3      	bne.n	8009984 <ai_buffer_get_size+0x30>
 800999c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80099a0:	bc30      	pop	{r4, r5}
 80099a2:	4770      	bx	lr
 80099a4:	2900      	cmp	r1, #0
 80099a6:	d0e1      	beq.n	800996c <ai_buffer_get_size+0x18>
 80099a8:	321f      	adds	r2, #31
 80099aa:	f022 021f 	bic.w	r2, r2, #31
 80099ae:	e7dd      	b.n	800996c <ai_buffer_get_size+0x18>
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	000400c0 	.word	0x000400c0

080099b8 <ai_buffer_array_sane>:
 80099b8:	b138      	cbz	r0, 80099ca <ai_buffer_array_sane+0x12>
 80099ba:	6843      	ldr	r3, [r0, #4]
 80099bc:	b123      	cbz	r3, 80099c8 <ai_buffer_array_sane+0x10>
 80099be:	8840      	ldrh	r0, [r0, #2]
 80099c0:	3800      	subs	r0, #0
 80099c2:	bf18      	it	ne
 80099c4:	2001      	movne	r0, #1
 80099c6:	4770      	bx	lr
 80099c8:	4618      	mov	r0, r3
 80099ca:	4770      	bx	lr

080099cc <ai_platform_get_weights_map>:
 80099cc:	b1f2      	cbz	r2, 8009a0c <ai_platform_get_weights_map+0x40>
 80099ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099d0:	4605      	mov	r5, r0
 80099d2:	b1c8      	cbz	r0, 8009a08 <ai_platform_get_weights_map+0x3c>
 80099d4:	460c      	mov	r4, r1
 80099d6:	b1b9      	cbz	r1, 8009a08 <ai_platform_get_weights_map+0x3c>
 80099d8:	4b24      	ldr	r3, [pc, #144]	@ (8009a6c <ai_platform_get_weights_map+0xa0>)
 80099da:	6811      	ldr	r1, [r2, #0]
 80099dc:	4299      	cmp	r1, r3
 80099de:	4616      	mov	r6, r2
 80099e0:	d00b      	beq.n	80099fa <ai_platform_get_weights_map+0x2e>
 80099e2:	6856      	ldr	r6, [r2, #4]
 80099e4:	b186      	cbz	r6, 8009a08 <ai_platform_get_weights_map+0x3c>
 80099e6:	6837      	ldr	r7, [r6, #0]
 80099e8:	429f      	cmp	r7, r3
 80099ea:	d011      	beq.n	8009a10 <ai_platform_get_weights_map+0x44>
 80099ec:	6006      	str	r6, [r0, #0]
 80099ee:	f1a4 0001 	sub.w	r0, r4, #1
 80099f2:	fab0 f080 	clz	r0, r0
 80099f6:	0940      	lsrs	r0, r0, #5
 80099f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099fa:	1d10      	adds	r0, r2, #4
 80099fc:	f7ff ffdc 	bl	80099b8 <ai_buffer_array_sane>
 8009a00:	b110      	cbz	r0, 8009a08 <ai_platform_get_weights_map+0x3c>
 8009a02:	88f3      	ldrh	r3, [r6, #6]
 8009a04:	429c      	cmp	r4, r3
 8009a06:	d01b      	beq.n	8009a40 <ai_platform_get_weights_map+0x74>
 8009a08:	2000      	movs	r0, #0
 8009a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	4770      	bx	lr
 8009a10:	4631      	mov	r1, r6
 8009a12:	3804      	subs	r0, #4
 8009a14:	2300      	movs	r3, #0
 8009a16:	e004      	b.n	8009a22 <ai_platform_get_weights_map+0x56>
 8009a18:	3301      	adds	r3, #1
 8009a1a:	429c      	cmp	r4, r3
 8009a1c:	f840 2f04 	str.w	r2, [r0, #4]!
 8009a20:	d005      	beq.n	8009a2e <ai_platform_get_weights_map+0x62>
 8009a22:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009a26:	42ba      	cmp	r2, r7
 8009a28:	d1f6      	bne.n	8009a18 <ai_platform_get_weights_map+0x4c>
 8009a2a:	429c      	cmp	r4, r3
 8009a2c:	d1ec      	bne.n	8009a08 <ai_platform_get_weights_map+0x3c>
 8009a2e:	3401      	adds	r4, #1
 8009a30:	4b0e      	ldr	r3, [pc, #56]	@ (8009a6c <ai_platform_get_weights_map+0xa0>)
 8009a32:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009a36:	1ac0      	subs	r0, r0, r3
 8009a38:	fab0 f080 	clz	r0, r0
 8009a3c:	0940      	lsrs	r0, r0, #5
 8009a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a40:	2100      	movs	r1, #0
 8009a42:	1f28      	subs	r0, r5, #4
 8009a44:	468c      	mov	ip, r1
 8009a46:	e005      	b.n	8009a54 <ai_platform_get_weights_map+0x88>
 8009a48:	f10c 0c01 	add.w	ip, ip, #1
 8009a4c:	4564      	cmp	r4, ip
 8009a4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009a52:	d005      	beq.n	8009a60 <ai_platform_get_weights_map+0x94>
 8009a54:	68b3      	ldr	r3, [r6, #8]
 8009a56:	440b      	add	r3, r1
 8009a58:	311c      	adds	r1, #28
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1f3      	bne.n	8009a48 <ai_platform_get_weights_map+0x7c>
 8009a60:	eba4 000c 	sub.w	r0, r4, ip
 8009a64:	fab0 f080 	clz	r0, r0
 8009a68:	0940      	lsrs	r0, r0, #5
 8009a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a6c:	a1facade 	.word	0xa1facade

08009a70 <ai_platform_get_activations_map>:
 8009a70:	b1fa      	cbz	r2, 8009ab2 <ai_platform_get_activations_map+0x42>
 8009a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a74:	4605      	mov	r5, r0
 8009a76:	b1d0      	cbz	r0, 8009aae <ai_platform_get_activations_map+0x3e>
 8009a78:	460c      	mov	r4, r1
 8009a7a:	b1c1      	cbz	r1, 8009aae <ai_platform_get_activations_map+0x3e>
 8009a7c:	4b25      	ldr	r3, [pc, #148]	@ (8009b14 <ai_platform_get_activations_map+0xa4>)
 8009a7e:	6811      	ldr	r1, [r2, #0]
 8009a80:	4299      	cmp	r1, r3
 8009a82:	4616      	mov	r6, r2
 8009a84:	d00b      	beq.n	8009a9e <ai_platform_get_activations_map+0x2e>
 8009a86:	6a16      	ldr	r6, [r2, #32]
 8009a88:	b18e      	cbz	r6, 8009aae <ai_platform_get_activations_map+0x3e>
 8009a8a:	6837      	ldr	r7, [r6, #0]
 8009a8c:	429f      	cmp	r7, r3
 8009a8e:	d012      	beq.n	8009ab6 <ai_platform_get_activations_map+0x46>
 8009a90:	6006      	str	r6, [r0, #0]
 8009a92:	f1a4 0001 	sub.w	r0, r4, #1
 8009a96:	fab0 f080 	clz	r0, r0
 8009a9a:	0940      	lsrs	r0, r0, #5
 8009a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a9e:	f102 000c 	add.w	r0, r2, #12
 8009aa2:	f7ff ff89 	bl	80099b8 <ai_buffer_array_sane>
 8009aa6:	b110      	cbz	r0, 8009aae <ai_platform_get_activations_map+0x3e>
 8009aa8:	89f3      	ldrh	r3, [r6, #14]
 8009aaa:	429c      	cmp	r4, r3
 8009aac:	d01b      	beq.n	8009ae6 <ai_platform_get_activations_map+0x76>
 8009aae:	2000      	movs	r0, #0
 8009ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	4770      	bx	lr
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	3804      	subs	r0, #4
 8009aba:	2300      	movs	r3, #0
 8009abc:	e004      	b.n	8009ac8 <ai_platform_get_activations_map+0x58>
 8009abe:	3301      	adds	r3, #1
 8009ac0:	429c      	cmp	r4, r3
 8009ac2:	f840 2f04 	str.w	r2, [r0, #4]!
 8009ac6:	d005      	beq.n	8009ad4 <ai_platform_get_activations_map+0x64>
 8009ac8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8009acc:	42ba      	cmp	r2, r7
 8009ace:	d1f6      	bne.n	8009abe <ai_platform_get_activations_map+0x4e>
 8009ad0:	429c      	cmp	r4, r3
 8009ad2:	d1ec      	bne.n	8009aae <ai_platform_get_activations_map+0x3e>
 8009ad4:	3401      	adds	r4, #1
 8009ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8009b14 <ai_platform_get_activations_map+0xa4>)
 8009ad8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009adc:	1ac0      	subs	r0, r0, r3
 8009ade:	fab0 f080 	clz	r0, r0
 8009ae2:	0940      	lsrs	r0, r0, #5
 8009ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	1f28      	subs	r0, r5, #4
 8009aea:	468c      	mov	ip, r1
 8009aec:	e005      	b.n	8009afa <ai_platform_get_activations_map+0x8a>
 8009aee:	f10c 0c01 	add.w	ip, ip, #1
 8009af2:	4564      	cmp	r4, ip
 8009af4:	f840 3f04 	str.w	r3, [r0, #4]!
 8009af8:	d005      	beq.n	8009b06 <ai_platform_get_activations_map+0x96>
 8009afa:	6933      	ldr	r3, [r6, #16]
 8009afc:	440b      	add	r3, r1
 8009afe:	311c      	adds	r1, #28
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1f3      	bne.n	8009aee <ai_platform_get_activations_map+0x7e>
 8009b06:	eba4 000c 	sub.w	r0, r4, ip
 8009b0a:	fab0 f080 	clz	r0, r0
 8009b0e:	0940      	lsrs	r0, r0, #5
 8009b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b12:	bf00      	nop
 8009b14:	a1facade 	.word	0xa1facade

08009b18 <ai_platform_network_get_error>:
 8009b18:	4b04      	ldr	r3, [pc, #16]	@ (8009b2c <ai_platform_network_get_error+0x14>)
 8009b1a:	6802      	ldr	r2, [r0, #0]
 8009b1c:	4393      	bics	r3, r2
 8009b1e:	d102      	bne.n	8009b26 <ai_platform_network_get_error+0xe>
 8009b20:	300c      	adds	r0, #12
 8009b22:	f000 bc19 	b.w	800a358 <core_get_error>
 8009b26:	f241 0010 	movw	r0, #4112	@ 0x1010
 8009b2a:	4770      	bx	lr
 8009b2c:	a1c00100 	.word	0xa1c00100

08009b30 <ai_platform_network_set_error>:
 8009b30:	b110      	cbz	r0, 8009b38 <ai_platform_network_set_error+0x8>
 8009b32:	300c      	adds	r0, #12
 8009b34:	f000 bc16 	b.w	800a364 <core_set_error>
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop

08009b3c <ai_platform_inputs_get>:
 8009b3c:	4b39      	ldr	r3, [pc, #228]	@ (8009c24 <ai_platform_inputs_get+0xe8>)
 8009b3e:	6802      	ldr	r2, [r0, #0]
 8009b40:	4393      	bics	r3, r2
 8009b42:	d163      	bne.n	8009c0c <ai_platform_inputs_get+0xd0>
 8009b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b48:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	4605      	mov	r5, r0
 8009b4e:	460c      	mov	r4, r1
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d04e      	beq.n	8009bf2 <ai_platform_inputs_get+0xb6>
 8009b54:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 8009b56:	2f00      	cmp	r7, #0
 8009b58:	d04b      	beq.n	8009bf2 <ai_platform_inputs_get+0xb6>
 8009b5a:	f04f 0b00 	mov.w	fp, #0
 8009b5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b62:	465e      	mov	r6, fp
 8009b64:	46ba      	mov	sl, r7
 8009b66:	e016      	b.n	8009b96 <ai_platform_inputs_get+0x5a>
 8009b68:	9901      	ldr	r1, [sp, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	507a      	str	r2, [r7, r1]
 8009b6e:	69a1      	ldr	r1, [r4, #24]
 8009b70:	684c      	ldr	r4, [r1, #4]
 8009b72:	6028      	str	r0, [r5, #0]
 8009b74:	f04f 0201 	mov.w	r2, #1
 8009b78:	752a      	strb	r2, [r5, #20]
 8009b7a:	6968      	ldr	r0, [r5, #20]
 8009b7c:	60ab      	str	r3, [r5, #8]
 8009b7e:	f368 201f 	bfi	r0, r8, #8, #24
 8009b82:	2300      	movs	r3, #0
 8009b84:	e9c5 3403 	strd	r3, r4, [r5, #12]
 8009b88:	e9c5 0905 	strd	r0, r9, [r5, #20]
 8009b8c:	f8c5 c004 	str.w	ip, [r5, #4]
 8009b90:	3601      	adds	r6, #1
 8009b92:	f10b 0b1c 	add.w	fp, fp, #28
 8009b96:	f8ba 3000 	ldrh.w	r3, [sl]
 8009b9a:	00f2      	lsls	r2, r6, #3
 8009b9c:	42b3      	cmp	r3, r6
 8009b9e:	9201      	str	r2, [sp, #4]
 8009ba0:	d936      	bls.n	8009c10 <ai_platform_inputs_get+0xd4>
 8009ba2:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d032      	beq.n	8009c10 <ai_platform_inputs_get+0xd4>
 8009baa:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8009bae:	b37c      	cbz	r4, 8009c10 <ai_platform_inputs_get+0xd4>
 8009bb0:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009bb4:	69a2      	ldr	r2, [r4, #24]
 8009bb6:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8009bba:	6810      	ldr	r0, [r2, #0]
 8009bbc:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
 8009bc0:	68a3      	ldr	r3, [r4, #8]
 8009bc2:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8009bc6:	f002 ff5f 	bl	800ca88 <ai_array_to_buffer_fmt>
 8009bca:	69a1      	ldr	r1, [r4, #24]
 8009bcc:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 8009bd0:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8009bd4:	445d      	add	r5, fp
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d0ca      	beq.n	8009b70 <ai_platform_inputs_get+0x34>
 8009bda:	2100      	movs	r1, #0
 8009bdc:	f847 1036 	str.w	r1, [r7, r6, lsl #3]
 8009be0:	6821      	ldr	r1, [r4, #0]
 8009be2:	6059      	str	r1, [r3, #4]
 8009be4:	b111      	cbz	r1, 8009bec <ai_platform_inputs_get+0xb0>
 8009be6:	8849      	ldrh	r1, [r1, #2]
 8009be8:	2900      	cmp	r1, #0
 8009bea:	d1bd      	bne.n	8009b68 <ai_platform_inputs_get+0x2c>
 8009bec:	69a1      	ldr	r1, [r4, #24]
 8009bee:	2300      	movs	r3, #0
 8009bf0:	e7be      	b.n	8009b70 <ai_platform_inputs_get+0x34>
 8009bf2:	2218      	movs	r2, #24
 8009bf4:	2111      	movs	r1, #17
 8009bf6:	f105 000c 	add.w	r0, r5, #12
 8009bfa:	2600      	movs	r6, #0
 8009bfc:	f000 fbb2 	bl	800a364 <core_set_error>
 8009c00:	4630      	mov	r0, r6
 8009c02:	b104      	cbz	r4, 8009c06 <ai_platform_inputs_get+0xca>
 8009c04:	8026      	strh	r6, [r4, #0]
 8009c06:	b005      	add	sp, #20
 8009c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	4770      	bx	lr
 8009c10:	b2b6      	uxth	r6, r6
 8009c12:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8009c16:	2e00      	cmp	r6, #0
 8009c18:	d0eb      	beq.n	8009bf2 <ai_platform_inputs_get+0xb6>
 8009c1a:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009c1e:	6858      	ldr	r0, [r3, #4]
 8009c20:	e7ef      	b.n	8009c02 <ai_platform_inputs_get+0xc6>
 8009c22:	bf00      	nop
 8009c24:	a1c00100 	.word	0xa1c00100

08009c28 <ai_platform_outputs_get>:
 8009c28:	4b37      	ldr	r3, [pc, #220]	@ (8009d08 <ai_platform_outputs_get+0xe0>)
 8009c2a:	6802      	ldr	r2, [r0, #0]
 8009c2c:	4393      	bics	r3, r2
 8009c2e:	d169      	bne.n	8009d04 <ai_platform_outputs_get+0xdc>
 8009c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c34:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	b085      	sub	sp, #20
 8009c3a:	4605      	mov	r5, r0
 8009c3c:	460c      	mov	r4, r1
 8009c3e:	d94b      	bls.n	8009cd8 <ai_platform_outputs_get+0xb0>
 8009c40:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 8009c42:	f04f 0b00 	mov.w	fp, #0
 8009c46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c4a:	465e      	mov	r6, fp
 8009c4c:	46d8      	mov	r8, fp
 8009c4e:	46ba      	mov	sl, r7
 8009c50:	e016      	b.n	8009c80 <ai_platform_outputs_get+0x58>
 8009c52:	9901      	ldr	r1, [sp, #4]
 8009c54:	2201      	movs	r2, #1
 8009c56:	507a      	str	r2, [r7, r1]
 8009c58:	69a9      	ldr	r1, [r5, #24]
 8009c5a:	684d      	ldr	r5, [r1, #4]
 8009c5c:	6020      	str	r0, [r4, #0]
 8009c5e:	f04f 0201 	mov.w	r2, #1
 8009c62:	7522      	strb	r2, [r4, #20]
 8009c64:	6960      	ldr	r0, [r4, #20]
 8009c66:	f8c4 c004 	str.w	ip, [r4, #4]
 8009c6a:	f369 201f 	bfi	r0, r9, #8, #24
 8009c6e:	e9c4 5004 	strd	r5, r0, [r4, #16]
 8009c72:	e9c4 3802 	strd	r3, r8, [r4, #8]
 8009c76:	9b00      	ldr	r3, [sp, #0]
 8009c78:	61a3      	str	r3, [r4, #24]
 8009c7a:	3601      	adds	r6, #1
 8009c7c:	f10b 0b1c 	add.w	fp, fp, #28
 8009c80:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8009c84:	00f2      	lsls	r2, r6, #3
 8009c86:	42b3      	cmp	r3, r6
 8009c88:	9201      	str	r2, [sp, #4]
 8009c8a:	d932      	bls.n	8009cf2 <ai_platform_outputs_get+0xca>
 8009c8c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8009c90:	b37b      	cbz	r3, 8009cf2 <ai_platform_outputs_get+0xca>
 8009c92:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 8009c96:	b365      	cbz	r5, 8009cf2 <ai_platform_outputs_get+0xca>
 8009c98:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009c9c:	69aa      	ldr	r2, [r5, #24]
 8009c9e:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8009ca2:	68ab      	ldr	r3, [r5, #8]
 8009ca4:	6810      	ldr	r0, [r2, #0]
 8009ca6:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8009caa:	68eb      	ldr	r3, [r5, #12]
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	f002 feeb 	bl	800ca88 <ai_array_to_buffer_fmt>
 8009cb2:	69a9      	ldr	r1, [r5, #24]
 8009cb4:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 8009cb8:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8009cbc:	445c      	add	r4, fp
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d0cb      	beq.n	8009c5a <ai_platform_outputs_get+0x32>
 8009cc2:	f847 8036 	str.w	r8, [r7, r6, lsl #3]
 8009cc6:	6829      	ldr	r1, [r5, #0]
 8009cc8:	6059      	str	r1, [r3, #4]
 8009cca:	b111      	cbz	r1, 8009cd2 <ai_platform_outputs_get+0xaa>
 8009ccc:	8849      	ldrh	r1, [r1, #2]
 8009cce:	2900      	cmp	r1, #0
 8009cd0:	d1bf      	bne.n	8009c52 <ai_platform_outputs_get+0x2a>
 8009cd2:	69a9      	ldr	r1, [r5, #24]
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	e7c0      	b.n	8009c5a <ai_platform_outputs_get+0x32>
 8009cd8:	2218      	movs	r2, #24
 8009cda:	2111      	movs	r1, #17
 8009cdc:	f105 000c 	add.w	r0, r5, #12
 8009ce0:	2600      	movs	r6, #0
 8009ce2:	f000 fb3f 	bl	800a364 <core_set_error>
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	b104      	cbz	r4, 8009cec <ai_platform_outputs_get+0xc4>
 8009cea:	8026      	strh	r6, [r4, #0]
 8009cec:	b005      	add	sp, #20
 8009cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf2:	b2b6      	uxth	r6, r6
 8009cf4:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8009cf8:	2e00      	cmp	r6, #0
 8009cfa:	d0ed      	beq.n	8009cd8 <ai_platform_outputs_get+0xb0>
 8009cfc:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009d00:	6858      	ldr	r0, [r3, #4]
 8009d02:	e7f1      	b.n	8009ce8 <ai_platform_outputs_get+0xc0>
 8009d04:	2000      	movs	r0, #0
 8009d06:	4770      	bx	lr
 8009d08:	a1c00100 	.word	0xa1c00100

08009d0c <ai_platform_network_create>:
 8009d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d10:	b083      	sub	sp, #12
 8009d12:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8009d16:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8009d1a:	b320      	cbz	r0, 8009d66 <ai_platform_network_create+0x5a>
 8009d1c:	6002      	str	r2, [r0, #0]
 8009d1e:	4616      	mov	r6, r2
 8009d20:	461f      	mov	r7, r3
 8009d22:	4604      	mov	r4, r0
 8009d24:	f000 fb16 	bl	800a354 <core_init>
 8009d28:	b970      	cbnz	r0, 8009d48 <ai_platform_network_create+0x3c>
 8009d2a:	2530      	movs	r5, #48	@ 0x30
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	6023      	str	r3, [r4, #0]
 8009d30:	2410      	movs	r4, #16
 8009d32:	464a      	mov	r2, r9
 8009d34:	4641      	mov	r1, r8
 8009d36:	4638      	mov	r0, r7
 8009d38:	f002 ff46 	bl	800cbc8 <ai_version_get>
 8009d3c:	60b0      	str	r0, [r6, #8]
 8009d3e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8009d42:	b003      	add	sp, #12
 8009d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d48:	2200      	movs	r2, #0
 8009d4a:	4641      	mov	r1, r8
 8009d4c:	4638      	mov	r0, r7
 8009d4e:	f002 ff3b 	bl	800cbc8 <ai_version_get>
 8009d52:	2200      	movs	r2, #0
 8009d54:	4605      	mov	r5, r0
 8009d56:	2105      	movs	r1, #5
 8009d58:	2001      	movs	r0, #1
 8009d5a:	f002 ff35 	bl	800cbc8 <ai_version_get>
 8009d5e:	4285      	cmp	r5, r0
 8009d60:	d008      	beq.n	8009d74 <ai_platform_network_create+0x68>
 8009d62:	2501      	movs	r5, #1
 8009d64:	e7e2      	b.n	8009d2c <ai_platform_network_create+0x20>
 8009d66:	2510      	movs	r5, #16
 8009d68:	462c      	mov	r4, r5
 8009d6a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8009d6e:	b003      	add	sp, #12
 8009d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d74:	4b05      	ldr	r3, [pc, #20]	@ (8009d8c <ai_platform_network_create+0x80>)
 8009d76:	9301      	str	r3, [sp, #4]
 8009d78:	a801      	add	r0, sp, #4
 8009d7a:	f000 faff 	bl	800a37c <ai_check_custom_types>
 8009d7e:	b110      	cbz	r0, 8009d86 <ai_platform_network_create+0x7a>
 8009d80:	2400      	movs	r4, #0
 8009d82:	4625      	mov	r5, r4
 8009d84:	e7d5      	b.n	8009d32 <ai_platform_network_create+0x26>
 8009d86:	2502      	movs	r5, #2
 8009d88:	e7d0      	b.n	8009d2c <ai_platform_network_create+0x20>
 8009d8a:	bf00      	nop
 8009d8c:	84048403 	.word	0x84048403

08009d90 <ai_platform_network_init>:
 8009d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d94:	4a48      	ldr	r2, [pc, #288]	@ (8009eb8 <ai_platform_network_init+0x128>)
 8009d96:	4604      	mov	r4, r0
 8009d98:	6800      	ldr	r0, [r0, #0]
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	ea00 0102 	and.w	r1, r0, r2
 8009da0:	4382      	bics	r2, r0
 8009da2:	d13b      	bne.n	8009e1c <ai_platform_network_init+0x8c>
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d078      	beq.n	8009e9a <ai_platform_network_init+0x10a>
 8009da8:	4a44      	ldr	r2, [pc, #272]	@ (8009ebc <ai_platform_network_init+0x12c>)
 8009daa:	681d      	ldr	r5, [r3, #0]
 8009dac:	4295      	cmp	r5, r2
 8009dae:	d10a      	bne.n	8009dc6 <ai_platform_network_init+0x36>
 8009db0:	4288      	cmp	r0, r1
 8009db2:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
 8009db6:	e9d3 6301 	ldrd	r6, r3, [r3, #4]
 8009dba:	d03d      	beq.n	8009e38 <ai_platform_network_init+0xa8>
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	6123      	str	r3, [r4, #16]
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dc6:	2101      	movs	r1, #1
 8009dc8:	4618      	mov	r0, r3
 8009dca:	461d      	mov	r5, r3
 8009dcc:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8009dd0:	f7ff fdc0 	bl	8009954 <ai_buffer_get_size>
 8009dd4:	f105 071c 	add.w	r7, r5, #28
 8009dd8:	4606      	mov	r6, r0
 8009dda:	2101      	movs	r1, #1
 8009ddc:	4638      	mov	r0, r7
 8009dde:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8009de2:	f7ff fdb7 	bl	8009954 <ai_buffer_get_size>
 8009de6:	2e00      	cmp	r6, #0
 8009de8:	bf0a      	itet	eq
 8009dea:	4631      	moveq	r1, r6
 8009dec:	2101      	movne	r1, #1
 8009dee:	4635      	moveq	r5, r6
 8009df0:	b1b0      	cbz	r0, 8009e20 <ai_platform_network_init+0x90>
 8009df2:	f1b9 0f00 	cmp.w	r9, #0
 8009df6:	d057      	beq.n	8009ea8 <ai_platform_network_init+0x118>
 8009df8:	f04f 0e01 	mov.w	lr, #1
 8009dfc:	f1b8 0f00 	cmp.w	r8, #0
 8009e00:	d011      	beq.n	8009e26 <ai_platform_network_init+0x96>
 8009e02:	4b2d      	ldr	r3, [pc, #180]	@ (8009eb8 <ai_platform_network_init+0x128>)
 8009e04:	6822      	ldr	r2, [r4, #0]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d1d8      	bne.n	8009dbc <ai_platform_network_init+0x2c>
 8009e0a:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8009e0c:	428b      	cmp	r3, r1
 8009e0e:	d21b      	bcs.n	8009e48 <ai_platform_network_init+0xb8>
 8009e10:	2212      	movs	r2, #18
 8009e12:	2116      	movs	r1, #22
 8009e14:	f104 000c 	add.w	r0, r4, #12
 8009e18:	f000 faa4 	bl	800a364 <core_set_error>
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	e7d0      	b.n	8009dc2 <ai_platform_network_init+0x32>
 8009e20:	4607      	mov	r7, r0
 8009e22:	4686      	mov	lr, r0
 8009e24:	e7ea      	b.n	8009dfc <ai_platform_network_init+0x6c>
 8009e26:	2e00      	cmp	r6, #0
 8009e28:	d0eb      	beq.n	8009e02 <ai_platform_network_init+0x72>
 8009e2a:	2212      	movs	r2, #18
 8009e2c:	2110      	movs	r1, #16
 8009e2e:	f104 000c 	add.w	r0, r4, #12
 8009e32:	f000 fa97 	bl	800a364 <core_set_error>
 8009e36:	e7f1      	b.n	8009e1c <ai_platform_network_init+0x8c>
 8009e38:	e9c4 6308 	strd	r6, r3, [r4, #32]
 8009e3c:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8009e3e:	62a2      	str	r2, [r4, #40]	@ 0x28
 8009e40:	4620      	mov	r0, r4
 8009e42:	f000 fac5 	bl	800a3d0 <ai_layers_init_all>
 8009e46:	e7b9      	b.n	8009dbc <ai_platform_network_init+0x2c>
 8009e48:	b1e1      	cbz	r1, 8009e84 <ai_platform_network_init+0xf4>
 8009e4a:	46ac      	mov	ip, r5
 8009e4c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009e50:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009e54:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8009e58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8009e5c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009e5e:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8009e62:	4573      	cmp	r3, lr
 8009e64:	6226      	str	r6, [r4, #32]
 8009e66:	d311      	bcc.n	8009e8c <ai_platform_network_init+0xfc>
 8009e68:	f1be 0f00 	cmp.w	lr, #0
 8009e6c:	d007      	beq.n	8009e7e <ai_platform_network_init+0xee>
 8009e6e:	463e      	mov	r6, r7
 8009e70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009e72:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8009e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009e76:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8009e7a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8009e7e:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8009e82:	e7dc      	b.n	8009e3e <ai_platform_network_init+0xae>
 8009e84:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009e86:	6221      	str	r1, [r4, #32]
 8009e88:	4573      	cmp	r3, lr
 8009e8a:	d2ed      	bcs.n	8009e68 <ai_platform_network_init+0xd8>
 8009e8c:	2213      	movs	r2, #19
 8009e8e:	2116      	movs	r1, #22
 8009e90:	f104 000c 	add.w	r0, r4, #12
 8009e94:	f000 fa66 	bl	800a364 <core_set_error>
 8009e98:	e7c0      	b.n	8009e1c <ai_platform_network_init+0x8c>
 8009e9a:	2211      	movs	r2, #17
 8009e9c:	2110      	movs	r1, #16
 8009e9e:	f104 000c 	add.w	r0, r4, #12
 8009ea2:	f000 fa5f 	bl	800a364 <core_set_error>
 8009ea6:	e7b9      	b.n	8009e1c <ai_platform_network_init+0x8c>
 8009ea8:	2213      	movs	r2, #19
 8009eaa:	2110      	movs	r1, #16
 8009eac:	f104 000c 	add.w	r0, r4, #12
 8009eb0:	f000 fa58 	bl	800a364 <core_set_error>
 8009eb4:	e7b2      	b.n	8009e1c <ai_platform_network_init+0x8c>
 8009eb6:	bf00      	nop
 8009eb8:	a1c00100 	.word	0xa1c00100
 8009ebc:	a1facade 	.word	0xa1facade

08009ec0 <ai_platform_network_post_init>:
 8009ec0:	4b15      	ldr	r3, [pc, #84]	@ (8009f18 <ai_platform_network_post_init+0x58>)
 8009ec2:	6802      	ldr	r2, [r0, #0]
 8009ec4:	ea02 0103 	and.w	r1, r2, r3
 8009ec8:	4393      	bics	r3, r2
 8009eca:	d123      	bne.n	8009f14 <ai_platform_network_post_init+0x54>
 8009ecc:	b570      	push	{r4, r5, r6, lr}
 8009ece:	6903      	ldr	r3, [r0, #16]
 8009ed0:	079b      	lsls	r3, r3, #30
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	d503      	bpl.n	8009ede <ai_platform_network_post_init+0x1e>
 8009ed6:	428a      	cmp	r2, r1
 8009ed8:	d008      	beq.n	8009eec <ai_platform_network_post_init+0x2c>
 8009eda:	2001      	movs	r0, #1
 8009edc:	bd70      	pop	{r4, r5, r6, pc}
 8009ede:	2210      	movs	r2, #16
 8009ee0:	2111      	movs	r1, #17
 8009ee2:	300c      	adds	r0, #12
 8009ee4:	f000 fa3e 	bl	800a364 <core_set_error>
 8009ee8:	2000      	movs	r0, #0
 8009eea:	bd70      	pop	{r4, r5, r6, pc}
 8009eec:	f000 fa80 	bl	800a3f0 <ai_layers_post_init_all>
 8009ef0:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8009ef2:	2e00      	cmp	r6, #0
 8009ef4:	d0f1      	beq.n	8009eda <ai_platform_network_post_init+0x1a>
 8009ef6:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8009ef8:	2d00      	cmp	r5, #0
 8009efa:	d0ee      	beq.n	8009eda <ai_platform_network_post_init+0x1a>
 8009efc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8009efe:	4629      	mov	r1, r5
 8009f00:	2000      	movs	r0, #0
 8009f02:	47b0      	blx	r6
 8009f04:	692b      	ldr	r3, [r5, #16]
 8009f06:	42ab      	cmp	r3, r5
 8009f08:	d0e7      	beq.n	8009eda <ai_platform_network_post_init+0x1a>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d0e5      	beq.n	8009eda <ai_platform_network_post_init+0x1a>
 8009f0e:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 8009f10:	461d      	mov	r5, r3
 8009f12:	e7f3      	b.n	8009efc <ai_platform_network_post_init+0x3c>
 8009f14:	2000      	movs	r0, #0
 8009f16:	4770      	bx	lr
 8009f18:	a1c00100 	.word	0xa1c00100

08009f1c <ai_platform_network_process>:
 8009f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f20:	4bb7      	ldr	r3, [pc, #732]	@ (800a200 <ai_platform_network_process+0x2e4>)
 8009f22:	4607      	mov	r7, r0
 8009f24:	6800      	ldr	r0, [r0, #0]
 8009f26:	4383      	bics	r3, r0
 8009f28:	b085      	sub	sp, #20
 8009f2a:	f040 812d 	bne.w	800a188 <ai_platform_network_process+0x26c>
 8009f2e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	f000 811d 	beq.w	800a170 <ai_platform_network_process+0x254>
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 8009f3c:	f003 0303 	and.w	r3, r3, #3
 8009f40:	2600      	movs	r6, #0
 8009f42:	2b03      	cmp	r3, #3
 8009f44:	61be      	str	r6, [r7, #24]
 8009f46:	f040 8129 	bne.w	800a19c <ai_platform_network_process+0x280>
 8009f4a:	2900      	cmp	r1, #0
 8009f4c:	f000 8116 	beq.w	800a17c <ai_platform_network_process+0x260>
 8009f50:	f1b9 0f00 	cmp.w	r9, #0
 8009f54:	f000 8112 	beq.w	800a17c <ai_platform_network_process+0x260>
 8009f58:	f8b9 3000 	ldrh.w	r3, [r9]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f000 810d 	beq.w	800a17c <ai_platform_network_process+0x260>
 8009f62:	698b      	ldr	r3, [r1, #24]
 8009f64:	e9cd 7202 	strd	r7, r2, [sp, #8]
 8009f68:	f8d3 b000 	ldr.w	fp, [r3]
 8009f6c:	460c      	mov	r4, r1
 8009f6e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d072      	beq.n	800a05c <ai_platform_network_process+0x140>
 8009f76:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 8009f7a:	2d00      	cmp	r5, #0
 8009f7c:	d06e      	beq.n	800a05c <ai_platform_network_process+0x140>
 8009f7e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8009f82:	f8d3 a000 	ldr.w	sl, [r3]
 8009f86:	0133      	lsls	r3, r6, #4
 8009f88:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 8009f8c:	9301      	str	r3, [sp, #4]
 8009f8e:	f000 81ba 	beq.w	800a306 <ai_platform_network_process+0x3ea>
 8009f92:	69ab      	ldr	r3, [r5, #24]
 8009f94:	2101      	movs	r1, #1
 8009f96:	4620      	mov	r0, r4
 8009f98:	685f      	ldr	r7, [r3, #4]
 8009f9a:	f7ff fcdb 	bl	8009954 <ai_buffer_get_size>
 8009f9e:	4287      	cmp	r7, r0
 8009fa0:	f0c0 8103 	bcc.w	800a1aa <ai_platform_network_process+0x28e>
 8009fa4:	68e8      	ldr	r0, [r5, #12]
 8009fa6:	69a1      	ldr	r1, [r4, #24]
 8009fa8:	68c2      	ldr	r2, [r0, #12]
 8009faa:	68cb      	ldr	r3, [r1, #12]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	f040 80fc 	bne.w	800a1aa <ai_platform_network_process+0x28e>
 8009fb2:	6882      	ldr	r2, [r0, #8]
 8009fb4:	688b      	ldr	r3, [r1, #8]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	f040 80f7 	bne.w	800a1aa <ai_platform_network_process+0x28e>
 8009fbc:	6842      	ldr	r2, [r0, #4]
 8009fbe:	684b      	ldr	r3, [r1, #4]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	f040 80f2 	bne.w	800a1aa <ai_platform_network_process+0x28e>
 8009fc6:	69ab      	ldr	r3, [r5, #24]
 8009fc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009fcc:	f002 fdea 	bl	800cba4 <ai_array_get_data_byte_size>
 8009fd0:	9001      	str	r0, [sp, #4]
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	f002 fdfe 	bl	800cbd4 <get_tensor_byte_size>
 8009fd8:	9b01      	ldr	r3, [sp, #4]
 8009fda:	4283      	cmp	r3, r0
 8009fdc:	f0c0 80e5 	bcc.w	800a1aa <ai_platform_network_process+0x28e>
 8009fe0:	69ab      	ldr	r3, [r5, #24]
 8009fe2:	6818      	ldr	r0, [r3, #0]
 8009fe4:	f002 fd50 	bl	800ca88 <ai_array_to_buffer_fmt>
 8009fe8:	6823      	ldr	r3, [r4, #0]
 8009fea:	4058      	eors	r0, r3
 8009fec:	f030 437e 	bics.w	r3, r0, #4261412864	@ 0xfe000000
 8009ff0:	f040 8193 	bne.w	800a31a <ai_platform_network_process+0x3fe>
 8009ff4:	6863      	ldr	r3, [r4, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f000 8185 	beq.w	800a306 <ai_platform_network_process+0x3ea>
 8009ffc:	69a3      	ldr	r3, [r4, #24]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	f000 8182 	beq.w	800a30a <ai_platform_network_process+0x3ee>
 800a006:	459b      	cmp	fp, r3
 800a008:	4628      	mov	r0, r5
 800a00a:	bf38      	it	cc
 800a00c:	469b      	movcc	fp, r3
 800a00e:	f002 fde1 	bl	800cbd4 <get_tensor_byte_size>
 800a012:	f8c8 0008 	str.w	r0, [r8, #8]
 800a016:	69a3      	ldr	r3, [r4, #24]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	fb00 f303 	mul.w	r3, r0, r3
 800a01e:	f8c8 300c 	str.w	r3, [r8, #12]
 800a022:	6861      	ldr	r1, [r4, #4]
 800a024:	f8c8 1004 	str.w	r1, [r8, #4]
 800a028:	0132      	lsls	r2, r6, #4
 800a02a:	440b      	add	r3, r1
 800a02c:	f84a 3002 	str.w	r3, [sl, r2]
 800a030:	69a8      	ldr	r0, [r5, #24]
 800a032:	6803      	ldr	r3, [r0, #0]
 800a034:	009a      	lsls	r2, r3, #2
 800a036:	f106 0601 	add.w	r6, r6, #1
 800a03a:	f104 041c 	add.w	r4, r4, #28
 800a03e:	f100 80a7 	bmi.w	800a190 <ai_platform_network_process+0x274>
 800a042:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a046:	1a9b      	subs	r3, r3, r2
 800a048:	4419      	add	r1, r3
 800a04a:	6081      	str	r1, [r0, #8]
 800a04c:	69ab      	ldr	r3, [r5, #24]
 800a04e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a052:	60da      	str	r2, [r3, #12]
 800a054:	f8b9 3000 	ldrh.w	r3, [r9]
 800a058:	42b3      	cmp	r3, r6
 800a05a:	d888      	bhi.n	8009f6e <ai_platform_network_process+0x52>
 800a05c:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
 800a060:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a062:	f1b8 0f00 	cmp.w	r8, #0
 800a066:	f000 80b5 	beq.w	800a1d4 <ai_platform_network_process+0x2b8>
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	f240 80a5 	bls.w	800a1ba <ai_platform_network_process+0x29e>
 800a070:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 800a074:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f000 809e 	beq.w	800a1ba <ai_platform_network_process+0x29e>
 800a07e:	4645      	mov	r5, r8
 800a080:	2600      	movs	r6, #0
 800a082:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a086:	2b00      	cmp	r3, #0
 800a088:	f000 80a3 	beq.w	800a1d2 <ai_platform_network_process+0x2b6>
 800a08c:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800a090:	2c00      	cmp	r4, #0
 800a092:	f000 809e 	beq.w	800a1d2 <ai_platform_network_process+0x2b6>
 800a096:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a09a:	f8d3 a000 	ldr.w	sl, [r3]
 800a09e:	0133      	lsls	r3, r6, #4
 800a0a0:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 800a0a4:	9301      	str	r3, [sp, #4]
 800a0a6:	f000 8140 	beq.w	800a32a <ai_platform_network_process+0x40e>
 800a0aa:	69a3      	ldr	r3, [r4, #24]
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	9301      	str	r3, [sp, #4]
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	f7ff fc4e 	bl	8009954 <ai_buffer_get_size>
 800a0b8:	9b01      	ldr	r3, [sp, #4]
 800a0ba:	4283      	cmp	r3, r0
 800a0bc:	d37d      	bcc.n	800a1ba <ai_platform_network_process+0x29e>
 800a0be:	68e0      	ldr	r0, [r4, #12]
 800a0c0:	69a9      	ldr	r1, [r5, #24]
 800a0c2:	68c2      	ldr	r2, [r0, #12]
 800a0c4:	68cb      	ldr	r3, [r1, #12]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d177      	bne.n	800a1ba <ai_platform_network_process+0x29e>
 800a0ca:	6882      	ldr	r2, [r0, #8]
 800a0cc:	688b      	ldr	r3, [r1, #8]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d173      	bne.n	800a1ba <ai_platform_network_process+0x29e>
 800a0d2:	6842      	ldr	r2, [r0, #4]
 800a0d4:	684b      	ldr	r3, [r1, #4]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d16f      	bne.n	800a1ba <ai_platform_network_process+0x29e>
 800a0da:	69a3      	ldr	r3, [r4, #24]
 800a0dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a0e0:	f002 fd60 	bl	800cba4 <ai_array_get_data_byte_size>
 800a0e4:	9001      	str	r0, [sp, #4]
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	f002 fd74 	bl	800cbd4 <get_tensor_byte_size>
 800a0ec:	9b01      	ldr	r3, [sp, #4]
 800a0ee:	4283      	cmp	r3, r0
 800a0f0:	d363      	bcc.n	800a1ba <ai_platform_network_process+0x29e>
 800a0f2:	69a3      	ldr	r3, [r4, #24]
 800a0f4:	6818      	ldr	r0, [r3, #0]
 800a0f6:	f002 fcc7 	bl	800ca88 <ai_array_to_buffer_fmt>
 800a0fa:	682b      	ldr	r3, [r5, #0]
 800a0fc:	4043      	eors	r3, r0
 800a0fe:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 800a102:	f040 8119 	bne.w	800a338 <ai_platform_network_process+0x41c>
 800a106:	686b      	ldr	r3, [r5, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 810e 	beq.w	800a32a <ai_platform_network_process+0x40e>
 800a10e:	69ab      	ldr	r3, [r5, #24]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	f000 8117 	beq.w	800a346 <ai_platform_network_process+0x42a>
 800a118:	459b      	cmp	fp, r3
 800a11a:	4620      	mov	r0, r4
 800a11c:	bf38      	it	cc
 800a11e:	469b      	movcc	fp, r3
 800a120:	f002 fd58 	bl	800cbd4 <get_tensor_byte_size>
 800a124:	f8c8 0008 	str.w	r0, [r8, #8]
 800a128:	69aa      	ldr	r2, [r5, #24]
 800a12a:	6812      	ldr	r2, [r2, #0]
 800a12c:	4603      	mov	r3, r0
 800a12e:	fb02 f303 	mul.w	r3, r2, r3
 800a132:	f8c8 300c 	str.w	r3, [r8, #12]
 800a136:	6869      	ldr	r1, [r5, #4]
 800a138:	f8c8 1004 	str.w	r1, [r8, #4]
 800a13c:	0132      	lsls	r2, r6, #4
 800a13e:	440b      	add	r3, r1
 800a140:	f84a 3002 	str.w	r3, [sl, r2]
 800a144:	69a0      	ldr	r0, [r4, #24]
 800a146:	6803      	ldr	r3, [r0, #0]
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	f106 0601 	add.w	r6, r6, #1
 800a14e:	f105 051c 	add.w	r5, r5, #28
 800a152:	d439      	bmi.n	800a1c8 <ai_platform_network_process+0x2ac>
 800a154:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a158:	1a9b      	subs	r3, r3, r2
 800a15a:	4419      	add	r1, r3
 800a15c:	6081      	str	r1, [r0, #8]
 800a15e:	69a3      	ldr	r3, [r4, #24]
 800a160:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a164:	60da      	str	r2, [r3, #12]
 800a166:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a16a:	429e      	cmp	r6, r3
 800a16c:	d389      	bcc.n	800a082 <ai_platform_network_process+0x166>
 800a16e:	e030      	b.n	800a1d2 <ai_platform_network_process+0x2b6>
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	61bb      	str	r3, [r7, #24]
 800a174:	f002 0203 	and.w	r2, r2, #3
 800a178:	2a03      	cmp	r2, #3
 800a17a:	d10f      	bne.n	800a19c <ai_platform_network_process+0x280>
 800a17c:	2217      	movs	r2, #23
 800a17e:	2112      	movs	r1, #18
 800a180:	f107 000c 	add.w	r0, r7, #12
 800a184:	f000 f8ee 	bl	800a364 <core_set_error>
 800a188:	2000      	movs	r0, #0
 800a18a:	b005      	add	sp, #20
 800a18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a190:	f8b9 3000 	ldrh.w	r3, [r9]
 800a194:	429e      	cmp	r6, r3
 800a196:	f4ff aeea 	bcc.w	8009f6e <ai_platform_network_process+0x52>
 800a19a:	e75f      	b.n	800a05c <ai_platform_network_process+0x140>
 800a19c:	2230      	movs	r2, #48	@ 0x30
 800a19e:	2111      	movs	r1, #17
 800a1a0:	f107 000c 	add.w	r0, r7, #12
 800a1a4:	f000 f8de 	bl	800a364 <core_set_error>
 800a1a8:	e7ee      	b.n	800a188 <ai_platform_network_process+0x26c>
 800a1aa:	9f02      	ldr	r7, [sp, #8]
 800a1ac:	2218      	movs	r2, #24
 800a1ae:	2112      	movs	r1, #18
 800a1b0:	f107 000c 	add.w	r0, r7, #12
 800a1b4:	f000 f8d6 	bl	800a364 <core_set_error>
 800a1b8:	e7e6      	b.n	800a188 <ai_platform_network_process+0x26c>
 800a1ba:	2218      	movs	r2, #24
 800a1bc:	2113      	movs	r1, #19
 800a1be:	f107 000c 	add.w	r0, r7, #12
 800a1c2:	f000 f8cf 	bl	800a364 <core_set_error>
 800a1c6:	e7df      	b.n	800a188 <ai_platform_network_process+0x26c>
 800a1c8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a1cc:	429e      	cmp	r6, r3
 800a1ce:	f4ff af58 	bcc.w	800a082 <ai_platform_network_process+0x166>
 800a1d2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a1d4:	fa1f fb8b 	uxth.w	fp, fp
 800a1d8:	f8a7 b018 	strh.w	fp, [r7, #24]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	f000 808c 	beq.w	800a2fa <ai_platform_network_process+0x3de>
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 800a1e6:	f000 808b 	beq.w	800a300 <ai_platform_network_process+0x3e4>
 800a1ea:	f106 080c 	add.w	r8, r6, #12
 800a1ee:	8b78      	ldrh	r0, [r7, #26]
 800a1f0:	4583      	cmp	fp, r0
 800a1f2:	d9ca      	bls.n	800a18a <ai_platform_network_process+0x26e>
 800a1f4:	4645      	mov	r5, r8
 800a1f6:	46bb      	mov	fp, r7
 800a1f8:	f04f 0800 	mov.w	r8, #0
 800a1fc:	b9ae      	cbnz	r6, 800a22a <ai_platform_network_process+0x30e>
 800a1fe:	e02d      	b.n	800a25c <ai_platform_network_process+0x340>
 800a200:	a1c00100 	.word	0xa1c00100
 800a204:	68df      	ldr	r7, [r3, #12]
 800a206:	1bc9      	subs	r1, r1, r7
 800a208:	4408      	add	r0, r1
 800a20a:	6098      	str	r0, [r3, #8]
 800a20c:	6993      	ldr	r3, [r2, #24]
 800a20e:	6862      	ldr	r2, [r4, #4]
 800a210:	60da      	str	r2, [r3, #12]
 800a212:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800a216:	f859 200a 	ldr.w	r2, [r9, sl]
 800a21a:	440b      	add	r3, r1
 800a21c:	4293      	cmp	r3, r2
 800a21e:	bf24      	itt	cs
 800a220:	68e3      	ldrcs	r3, [r4, #12]
 800a222:	1ad3      	subcs	r3, r2, r3
 800a224:	6063      	str	r3, [r4, #4]
 800a226:	f108 0801 	add.w	r8, r8, #1
 800a22a:	8833      	ldrh	r3, [r6, #0]
 800a22c:	4543      	cmp	r3, r8
 800a22e:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800a232:	d913      	bls.n	800a25c <ai_platform_network_process+0x340>
 800a234:	6873      	ldr	r3, [r6, #4]
 800a236:	b18b      	cbz	r3, 800a25c <ai_platform_network_process+0x340>
 800a238:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 800a23c:	b172      	cbz	r2, 800a25c <ai_platform_network_process+0x340>
 800a23e:	68b1      	ldr	r1, [r6, #8]
 800a240:	6993      	ldr	r3, [r2, #24]
 800a242:	f8d1 9000 	ldr.w	r9, [r1]
 800a246:	681f      	ldr	r7, [r3, #0]
 800a248:	6899      	ldr	r1, [r3, #8]
 800a24a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800a24e:	00bf      	lsls	r7, r7, #2
 800a250:	6860      	ldr	r0, [r4, #4]
 800a252:	d5d7      	bpl.n	800a204 <ai_platform_network_process+0x2e8>
 800a254:	68a2      	ldr	r2, [r4, #8]
 800a256:	f002 fb79 	bl	800c94c <st_int8_copy>
 800a25a:	e7da      	b.n	800a212 <ai_platform_network_process+0x2f6>
 800a25c:	4658      	mov	r0, fp
 800a25e:	f000 f8e5 	bl	800a42c <ai_layers_forward_all>
 800a262:	2400      	movs	r4, #0
 800a264:	b9b5      	cbnz	r5, 800a294 <ai_platform_network_process+0x378>
 800a266:	e03b      	b.n	800a2e0 <ai_platform_network_process+0x3c4>
 800a268:	f859 300a 	ldr.w	r3, [r9, sl]
 800a26c:	eb01 020c 	add.w	r2, r1, ip
 800a270:	429a      	cmp	r2, r3
 800a272:	bf24      	itt	cs
 800a274:	f8d8 200c 	ldrcs.w	r2, [r8, #12]
 800a278:	1a9a      	subcs	r2, r3, r2
 800a27a:	f8c8 2004 	str.w	r2, [r8, #4]
 800a27e:	6981      	ldr	r1, [r0, #24]
 800a280:	e9d1 3702 	ldrd	r3, r7, [r1, #8]
 800a284:	1bdb      	subs	r3, r3, r7
 800a286:	441a      	add	r2, r3
 800a288:	608a      	str	r2, [r1, #8]
 800a28a:	6983      	ldr	r3, [r0, #24]
 800a28c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a290:	60da      	str	r2, [r3, #12]
 800a292:	3401      	adds	r4, #1
 800a294:	882b      	ldrh	r3, [r5, #0]
 800a296:	42a3      	cmp	r3, r4
 800a298:	d922      	bls.n	800a2e0 <ai_platform_network_process+0x3c4>
 800a29a:	686b      	ldr	r3, [r5, #4]
 800a29c:	b303      	cbz	r3, 800a2e0 <ai_platform_network_process+0x3c4>
 800a29e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a2a2:	b1e8      	cbz	r0, 800a2e0 <ai_platform_network_process+0x3c4>
 800a2a4:	68ab      	ldr	r3, [r5, #8]
 800a2a6:	6982      	ldr	r2, [r0, #24]
 800a2a8:	f8d3 9000 	ldr.w	r9, [r3]
 800a2ac:	6813      	ldr	r3, [r2, #0]
 800a2ae:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	e9d8 1c01 	ldrd	r1, ip, [r8, #4]
 800a2b8:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800a2bc:	d5d4      	bpl.n	800a268 <ai_platform_network_process+0x34c>
 800a2be:	6890      	ldr	r0, [r2, #8]
 800a2c0:	4662      	mov	r2, ip
 800a2c2:	f002 fb43 	bl	800c94c <st_int8_copy>
 800a2c6:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800a2ca:	f859 200a 	ldr.w	r2, [r9, sl]
 800a2ce:	440b      	add	r3, r1
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	bf24      	itt	cs
 800a2d4:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800a2d8:	1ad3      	subcs	r3, r2, r3
 800a2da:	f8c8 3004 	str.w	r3, [r8, #4]
 800a2de:	e7d8      	b.n	800a292 <ai_platform_network_process+0x376>
 800a2e0:	f8bb 001a 	ldrh.w	r0, [fp, #26]
 800a2e4:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800a2e8:	3001      	adds	r0, #1
 800a2ea:	b280      	uxth	r0, r0
 800a2ec:	4283      	cmp	r3, r0
 800a2ee:	f8ab 001a 	strh.w	r0, [fp, #26]
 800a2f2:	d881      	bhi.n	800a1f8 <ai_platform_network_process+0x2dc>
 800a2f4:	b005      	add	sp, #20
 800a2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fa:	461e      	mov	r6, r3
 800a2fc:	4698      	mov	r8, r3
 800a2fe:	e776      	b.n	800a1ee <ai_platform_network_process+0x2d2>
 800a300:	f04f 0800 	mov.w	r8, #0
 800a304:	e773      	b.n	800a1ee <ai_platform_network_process+0x2d2>
 800a306:	9f02      	ldr	r7, [sp, #8]
 800a308:	e738      	b.n	800a17c <ai_platform_network_process+0x260>
 800a30a:	9f02      	ldr	r7, [sp, #8]
 800a30c:	2221      	movs	r2, #33	@ 0x21
 800a30e:	2112      	movs	r1, #18
 800a310:	f107 000c 	add.w	r0, r7, #12
 800a314:	f000 f826 	bl	800a364 <core_set_error>
 800a318:	e736      	b.n	800a188 <ai_platform_network_process+0x26c>
 800a31a:	9f02      	ldr	r7, [sp, #8]
 800a31c:	2219      	movs	r2, #25
 800a31e:	2112      	movs	r1, #18
 800a320:	f107 000c 	add.w	r0, r7, #12
 800a324:	f000 f81e 	bl	800a364 <core_set_error>
 800a328:	e72e      	b.n	800a188 <ai_platform_network_process+0x26c>
 800a32a:	2217      	movs	r2, #23
 800a32c:	2113      	movs	r1, #19
 800a32e:	f107 000c 	add.w	r0, r7, #12
 800a332:	f000 f817 	bl	800a364 <core_set_error>
 800a336:	e727      	b.n	800a188 <ai_platform_network_process+0x26c>
 800a338:	2219      	movs	r2, #25
 800a33a:	2113      	movs	r1, #19
 800a33c:	f107 000c 	add.w	r0, r7, #12
 800a340:	f000 f810 	bl	800a364 <core_set_error>
 800a344:	e720      	b.n	800a188 <ai_platform_network_process+0x26c>
 800a346:	2221      	movs	r2, #33	@ 0x21
 800a348:	2113      	movs	r1, #19
 800a34a:	f107 000c 	add.w	r0, r7, #12
 800a34e:	f000 f809 	bl	800a364 <core_set_error>
 800a352:	e719      	b.n	800a188 <ai_platform_network_process+0x26c>

0800a354 <core_init>:
 800a354:	2001      	movs	r0, #1
 800a356:	4770      	bx	lr

0800a358 <core_get_error>:
 800a358:	4603      	mov	r3, r0
 800a35a:	2200      	movs	r2, #0
 800a35c:	6800      	ldr	r0, [r0, #0]
 800a35e:	601a      	str	r2, [r3, #0]
 800a360:	4770      	bx	lr
 800a362:	bf00      	nop

0800a364 <core_set_error>:
 800a364:	4603      	mov	r3, r0
 800a366:	7800      	ldrb	r0, [r0, #0]
 800a368:	b108      	cbz	r0, 800a36e <core_set_error+0xa>
 800a36a:	2000      	movs	r0, #0
 800a36c:	4770      	bx	lr
 800a36e:	7019      	strb	r1, [r3, #0]
 800a370:	6819      	ldr	r1, [r3, #0]
 800a372:	f362 211f 	bfi	r1, r2, #8, #24
 800a376:	2001      	movs	r0, #1
 800a378:	6019      	str	r1, [r3, #0]
 800a37a:	4770      	bx	lr

0800a37c <ai_check_custom_types>:
 800a37c:	b082      	sub	sp, #8
 800a37e:	4b13      	ldr	r3, [pc, #76]	@ (800a3cc <ai_check_custom_types+0x50>)
 800a380:	9301      	str	r3, [sp, #4]
 800a382:	b118      	cbz	r0, 800a38c <ai_check_custom_types+0x10>
 800a384:	7803      	ldrb	r3, [r0, #0]
 800a386:	2b03      	cmp	r3, #3
 800a388:	d002      	beq.n	800a390 <ai_check_custom_types+0x14>
 800a38a:	2000      	movs	r0, #0
 800a38c:	b002      	add	sp, #8
 800a38e:	4770      	bx	lr
 800a390:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a394:	4293      	cmp	r3, r2
 800a396:	d004      	beq.n	800a3a2 <ai_check_custom_types+0x26>
 800a398:	2001      	movs	r0, #1
 800a39a:	f080 0001 	eor.w	r0, r0, #1
 800a39e:	b002      	add	sp, #8
 800a3a0:	4770      	bx	lr
 800a3a2:	7842      	ldrb	r2, [r0, #1]
 800a3a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	f100 0001 	add.w	r0, r0, #1
 800a3ae:	d1f3      	bne.n	800a398 <ai_check_custom_types+0x1c>
 800a3b0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800a3b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d1ed      	bne.n	800a398 <ai_check_custom_types+0x1c>
 800a3bc:	7842      	ldrb	r2, [r0, #1]
 800a3be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d1e8      	bne.n	800a398 <ai_check_custom_types+0x1c>
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	e7e7      	b.n	800a39a <ai_check_custom_types+0x1e>
 800a3ca:	bf00      	nop
 800a3cc:	84048403 	.word	0x84048403

0800a3d0 <ai_layers_init_all>:
 800a3d0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a3d2:	4601      	mov	r1, r0
 800a3d4:	b153      	cbz	r3, 800a3ec <ai_layers_init_all+0x1c>
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	461a      	mov	r2, r3
 800a3da:	60d9      	str	r1, [r3, #12]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	f100 0001 	add.w	r0, r0, #1
 800a3e4:	d003      	beq.n	800a3ee <ai_layers_init_all+0x1e>
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1f6      	bne.n	800a3d8 <ai_layers_init_all+0x8>
 800a3ea:	4770      	bx	lr
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	4770      	bx	lr

0800a3f0 <ai_layers_post_init_all>:
 800a3f0:	b538      	push	{r3, r4, r5, lr}
 800a3f2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800a3f4:	b1b4      	cbz	r4, 800a424 <ai_layers_post_init_all+0x34>
 800a3f6:	6863      	ldr	r3, [r4, #4]
 800a3f8:	07db      	lsls	r3, r3, #31
 800a3fa:	f04f 0500 	mov.w	r5, #0
 800a3fe:	d504      	bpl.n	800a40a <ai_layers_post_init_all+0x1a>
 800a400:	6a23      	ldr	r3, [r4, #32]
 800a402:	4620      	mov	r0, r4
 800a404:	b10b      	cbz	r3, 800a40a <ai_layers_post_init_all+0x1a>
 800a406:	4798      	blx	r3
 800a408:	3501      	adds	r5, #1
 800a40a:	6923      	ldr	r3, [r4, #16]
 800a40c:	42a3      	cmp	r3, r4
 800a40e:	d007      	beq.n	800a420 <ai_layers_post_init_all+0x30>
 800a410:	b133      	cbz	r3, 800a420 <ai_layers_post_init_all+0x30>
 800a412:	461c      	mov	r4, r3
 800a414:	6863      	ldr	r3, [r4, #4]
 800a416:	07db      	lsls	r3, r3, #31
 800a418:	d4f2      	bmi.n	800a400 <ai_layers_post_init_all+0x10>
 800a41a:	6923      	ldr	r3, [r4, #16]
 800a41c:	42a3      	cmp	r3, r4
 800a41e:	d1f7      	bne.n	800a410 <ai_layers_post_init_all+0x20>
 800a420:	4628      	mov	r0, r5
 800a422:	bd38      	pop	{r3, r4, r5, pc}
 800a424:	4625      	mov	r5, r4
 800a426:	4628      	mov	r0, r5
 800a428:	bd38      	pop	{r3, r4, r5, pc}
 800a42a:	bf00      	nop

0800a42c <ai_layers_forward_all>:
 800a42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a430:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 800a434:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800a436:	63c5      	str	r5, [r0, #60]	@ 0x3c
 800a438:	4604      	mov	r4, r0
 800a43a:	f1b8 0f00 	cmp.w	r8, #0
 800a43e:	d02a      	beq.n	800a496 <ai_layers_forward_all+0x6a>
 800a440:	b32d      	cbz	r5, 800a48e <ai_layers_forward_all+0x62>
 800a442:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800a444:	4629      	mov	r1, r5
 800a446:	2001      	movs	r0, #1
 800a448:	47c0      	blx	r8
 800a44a:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800a44c:	b1fe      	cbz	r6, 800a48e <ai_layers_forward_all+0x62>
 800a44e:	2700      	movs	r7, #0
 800a450:	4631      	mov	r1, r6
 800a452:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800a454:	2002      	movs	r0, #2
 800a456:	47c0      	blx	r8
 800a458:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800a45a:	4628      	mov	r0, r5
 800a45c:	696b      	ldr	r3, [r5, #20]
 800a45e:	4798      	blx	r3
 800a460:	692e      	ldr	r6, [r5, #16]
 800a462:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800a464:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800a466:	42b5      	cmp	r5, r6
 800a468:	f04f 0003 	mov.w	r0, #3
 800a46c:	d007      	beq.n	800a47e <ai_layers_forward_all+0x52>
 800a46e:	47c0      	blx	r8
 800a470:	3701      	adds	r7, #1
 800a472:	63e6      	str	r6, [r4, #60]	@ 0x3c
 800a474:	2e00      	cmp	r6, #0
 800a476:	d1eb      	bne.n	800a450 <ai_layers_forward_all+0x24>
 800a478:	4638      	mov	r0, r7
 800a47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a47e:	2003      	movs	r0, #3
 800a480:	47c0      	blx	r8
 800a482:	2300      	movs	r3, #0
 800a484:	3701      	adds	r7, #1
 800a486:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800a488:	4638      	mov	r0, r7
 800a48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a48e:	2700      	movs	r7, #0
 800a490:	4638      	mov	r0, r7
 800a492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a496:	2d00      	cmp	r5, #0
 800a498:	d0f9      	beq.n	800a48e <ai_layers_forward_all+0x62>
 800a49a:	4647      	mov	r7, r8
 800a49c:	696b      	ldr	r3, [r5, #20]
 800a49e:	4628      	mov	r0, r5
 800a4a0:	4798      	blx	r3
 800a4a2:	462b      	mov	r3, r5
 800a4a4:	692d      	ldr	r5, [r5, #16]
 800a4a6:	429d      	cmp	r5, r3
 800a4a8:	d004      	beq.n	800a4b4 <ai_layers_forward_all+0x88>
 800a4aa:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800a4ac:	3701      	adds	r7, #1
 800a4ae:	2d00      	cmp	r5, #0
 800a4b0:	d1f4      	bne.n	800a49c <ai_layers_forward_all+0x70>
 800a4b2:	e7e1      	b.n	800a478 <ai_layers_forward_all+0x4c>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800a4b8:	3701      	adds	r7, #1
 800a4ba:	e7dd      	b.n	800a478 <ai_layers_forward_all+0x4c>

0800a4bc <forward_conv2d_if32of32wf32>:
 800a4bc:	6982      	ldr	r2, [r0, #24]
 800a4be:	8813      	ldrh	r3, [r2, #0]
 800a4c0:	b90b      	cbnz	r3, 800a4c6 <forward_conv2d_if32of32wf32+0xa>
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	deff      	udf	#255	@ 0xff
 800a4c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ca:	6857      	ldr	r7, [r2, #4]
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	b0a3      	sub	sp, #140	@ 0x8c
 800a4d0:	4686      	mov	lr, r0
 800a4d2:	b102      	cbz	r2, 800a4d6 <forward_conv2d_if32of32wf32+0x1a>
 800a4d4:	6812      	ldr	r2, [r2, #0]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	f000 80bf 	beq.w	800a65a <forward_conv2d_if32of32wf32+0x19e>
 800a4dc:	6938      	ldr	r0, [r7, #16]
 800a4de:	b100      	cbz	r0, 800a4e2 <forward_conv2d_if32of32wf32+0x26>
 800a4e0:	6800      	ldr	r0, [r0, #0]
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	f000 80b4 	beq.w	800a650 <forward_conv2d_if32of32wf32+0x194>
 800a4e8:	69fe      	ldr	r6, [r7, #28]
 800a4ea:	2e00      	cmp	r6, #0
 800a4ec:	f000 80b3 	beq.w	800a656 <forward_conv2d_if32of32wf32+0x19a>
 800a4f0:	8b39      	ldrh	r1, [r7, #24]
 800a4f2:	6834      	ldr	r4, [r6, #0]
 800a4f4:	2901      	cmp	r1, #1
 800a4f6:	f240 80b3 	bls.w	800a660 <forward_conv2d_if32of32wf32+0x1a4>
 800a4fa:	6876      	ldr	r6, [r6, #4]
 800a4fc:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800a500:	6992      	ldr	r2, [r2, #24]
 800a502:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800a506:	6892      	ldr	r2, [r2, #8]
 800a508:	68e1      	ldr	r1, [r4, #12]
 800a50a:	9220      	str	r2, [sp, #128]	@ 0x80
 800a50c:	69a2      	ldr	r2, [r4, #24]
 800a50e:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a512:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a514:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800a518:	9415      	str	r4, [sp, #84]	@ 0x54
 800a51a:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800a51e:	9416      	str	r4, [sp, #88]	@ 0x58
 800a520:	f8d9 4008 	ldr.w	r4, [r9, #8]
 800a524:	9417      	str	r4, [sp, #92]	@ 0x5c
 800a526:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800a52a:	9418      	str	r4, [sp, #96]	@ 0x60
 800a52c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a530:	f8de c03c 	ldr.w	ip, [lr, #60]	@ 0x3c
 800a534:	9419      	str	r4, [sp, #100]	@ 0x64
 800a536:	f8be 402c 	ldrh.w	r4, [lr, #44]	@ 0x2c
 800a53a:	941a      	str	r4, [sp, #104]	@ 0x68
 800a53c:	e9de 5a0c 	ldrd	r5, sl, [lr, #48]	@ 0x30
 800a540:	f8de 401c 	ldr.w	r4, [lr, #28]
 800a544:	941f      	str	r4, [sp, #124]	@ 0x7c
 800a546:	f8bc 4000 	ldrh.w	r4, [ip]
 800a54a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a54c:	f8bc 4004 	ldrh.w	r4, [ip, #4]
 800a550:	941c      	str	r4, [sp, #112]	@ 0x70
 800a552:	b2ac      	uxth	r4, r5
 800a554:	f8be b028 	ldrh.w	fp, [lr, #40]	@ 0x28
 800a558:	e9d1 9801 	ldrd	r9, r8, [r1, #4]
 800a55c:	941d      	str	r4, [sp, #116]	@ 0x74
 800a55e:	fa1f f48a 	uxth.w	r4, sl
 800a562:	6891      	ldr	r1, [r2, #8]
 800a564:	941e      	str	r4, [sp, #120]	@ 0x78
 800a566:	b10e      	cbz	r6, 800a56c <forward_conv2d_if32of32wf32+0xb0>
 800a568:	69b6      	ldr	r6, [r6, #24]
 800a56a:	68b6      	ldr	r6, [r6, #8]
 800a56c:	6980      	ldr	r0, [r0, #24]
 800a56e:	fa1f f48a 	uxth.w	r4, sl
 800a572:	6880      	ldr	r0, [r0, #8]
 800a574:	9014      	str	r0, [sp, #80]	@ 0x50
 800a576:	b2ad      	uxth	r5, r5
 800a578:	f108 30ff 	add.w	r0, r8, #4294967295
 800a57c:	3c01      	subs	r4, #1
 800a57e:	3d01      	subs	r5, #1
 800a580:	fb00 8404 	mla	r4, r0, r4, r8
 800a584:	2b03      	cmp	r3, #3
 800a586:	f109 30ff 	add.w	r0, r9, #4294967295
 800a58a:	fb00 9505 	mla	r5, r0, r5, r9
 800a58e:	d074      	beq.n	800a67a <forward_conv2d_if32of32wf32+0x1be>
 800a590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a592:	2b00      	cmp	r3, #0
 800a594:	d03e      	beq.n	800a614 <forward_conv2d_if32of32wf32+0x158>
 800a596:	f8d3 a000 	ldr.w	sl, [r3]
 800a59a:	f1ba 0f00 	cmp.w	sl, #0
 800a59e:	d003      	beq.n	800a5a8 <forward_conv2d_if32of32wf32+0xec>
 800a5a0:	f8da 0018 	ldr.w	r0, [sl, #24]
 800a5a4:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800a5a8:	6858      	ldr	r0, [r3, #4]
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d033      	beq.n	800a616 <forward_conv2d_if32of32wf32+0x15a>
 800a5ae:	6983      	ldr	r3, [r0, #24]
 800a5b0:	f8d2 c000 	ldr.w	ip, [r2]
 800a5b4:	689f      	ldr	r7, [r3, #8]
 800a5b6:	f3cc 4343 	ubfx	r3, ip, #17, #4
 800a5ba:	2b08      	cmp	r3, #8
 800a5bc:	d052      	beq.n	800a664 <forward_conv2d_if32of32wf32+0x1a8>
 800a5be:	2f00      	cmp	r7, #0
 800a5c0:	bf08      	it	eq
 800a5c2:	460f      	moveq	r7, r1
 800a5c4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800a5c6:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800a5c8:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800a5ca:	940d      	str	r4, [sp, #52]	@ 0x34
 800a5cc:	e9cd b30b 	strd	fp, r3, [sp, #44]	@ 0x2c
 800a5d0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a5d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5d4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800a5d6:	f8cd 901c 	str.w	r9, [sp, #28]
 800a5da:	e9cd 8308 	strd	r8, r3, [sp, #32]
 800a5de:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a5e0:	9306      	str	r3, [sp, #24]
 800a5e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a5e4:	9305      	str	r3, [sp, #20]
 800a5e6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800a5e8:	9304      	str	r3, [sp, #16]
 800a5ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5ec:	9303      	str	r3, [sp, #12]
 800a5ee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a5f0:	9302      	str	r3, [sp, #8]
 800a5f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a5f4:	950e      	str	r5, [sp, #56]	@ 0x38
 800a5f6:	e9cd a300 	strd	sl, r3, [sp]
 800a5fa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800a5fc:	9311      	str	r3, [sp, #68]	@ 0x44
 800a5fe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a600:	9310      	str	r3, [sp, #64]	@ 0x40
 800a602:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a604:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a606:	463a      	mov	r2, r7
 800a608:	4633      	mov	r3, r6
 800a60a:	f000 faff 	bl	800ac0c <forward_lite_conv2d_if32of32wf32>
 800a60e:	b023      	add	sp, #140	@ 0x8c
 800a610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a614:	469a      	mov	sl, r3
 800a616:	6810      	ldr	r0, [r2, #0]
 800a618:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800a61c:	2b08      	cmp	r3, #8
 800a61e:	d001      	beq.n	800a624 <forward_conv2d_if32of32wf32+0x168>
 800a620:	460f      	mov	r7, r1
 800a622:	e7cf      	b.n	800a5c4 <forward_conv2d_if32of32wf32+0x108>
 800a624:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800a628:	68d2      	ldr	r2, [r2, #12]
 800a62a:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800a62e:	4103      	asrs	r3, r0
 800a630:	b29b      	uxth	r3, r3
 800a632:	2a00      	cmp	r2, #0
 800a634:	d0f4      	beq.n	800a620 <forward_conv2d_if32of32wf32+0x164>
 800a636:	2700      	movs	r7, #0
 800a638:	4638      	mov	r0, r7
 800a63a:	6980      	ldr	r0, [r0, #24]
 800a63c:	9121      	str	r1, [sp, #132]	@ 0x84
 800a63e:	6840      	ldr	r0, [r0, #4]
 800a640:	9001      	str	r0, [sp, #4]
 800a642:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800a644:	9000      	str	r0, [sp, #0]
 800a646:	4638      	mov	r0, r7
 800a648:	f001 fcf0 	bl	800c02c <lite_decompress_ilutof32>
 800a64c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800a64e:	e7b6      	b.n	800a5be <forward_conv2d_if32of32wf32+0x102>
 800a650:	2300      	movs	r3, #0
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	deff      	udf	#255	@ 0xff
 800a656:	4634      	mov	r4, r6
 800a658:	e750      	b.n	800a4fc <forward_conv2d_if32of32wf32+0x40>
 800a65a:	2300      	movs	r3, #0
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	deff      	udf	#255	@ 0xff
 800a660:	2600      	movs	r6, #0
 800a662:	e74b      	b.n	800a4fc <forward_conv2d_if32of32wf32+0x40>
 800a664:	68d2      	ldr	r2, [r2, #12]
 800a666:	2a00      	cmp	r2, #0
 800a668:	d0a9      	beq.n	800a5be <forward_conv2d_if32of32wf32+0x102>
 800a66a:	f3cc 13c6 	ubfx	r3, ip, #7, #7
 800a66e:	f3cc 5c41 	ubfx	ip, ip, #21, #2
 800a672:	fa43 f30c 	asr.w	r3, r3, ip
 800a676:	b29b      	uxth	r3, r3
 800a678:	e7df      	b.n	800a63a <forward_conv2d_if32of32wf32+0x17e>
 800a67a:	2300      	movs	r3, #0
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	deff      	udf	#255	@ 0xff

0800a680 <forward_conv2d_if32of32wf32_nl_pool>:
 800a680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a684:	f8d0 c018 	ldr.w	ip, [r0, #24]
 800a688:	b0c3      	sub	sp, #268	@ 0x10c
 800a68a:	f8bc 3000 	ldrh.w	r3, [ip]
 800a68e:	9321      	str	r3, [sp, #132]	@ 0x84
 800a690:	2b00      	cmp	r3, #0
 800a692:	f000 8137 	beq.w	800a904 <forward_conv2d_if32of32wf32_nl_pool+0x284>
 800a696:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800a69a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800a69e:	4604      	mov	r4, r0
 800a6a0:	f1b9 0f00 	cmp.w	r9, #0
 800a6a4:	d001      	beq.n	800a6aa <forward_conv2d_if32of32wf32_nl_pool+0x2a>
 800a6a6:	f8d9 9000 	ldr.w	r9, [r9]
 800a6aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a6ac:	2a01      	cmp	r2, #1
 800a6ae:	f000 8128 	beq.w	800a902 <forward_conv2d_if32of32wf32_nl_pool+0x282>
 800a6b2:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800a6b6:	f1b8 0f00 	cmp.w	r8, #0
 800a6ba:	d001      	beq.n	800a6c0 <forward_conv2d_if32of32wf32_nl_pool+0x40>
 800a6bc:	f8d8 8000 	ldr.w	r8, [r8]
 800a6c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a6c2:	2a02      	cmp	r2, #2
 800a6c4:	f000 811d 	beq.w	800a902 <forward_conv2d_if32of32wf32_nl_pool+0x282>
 800a6c8:	69da      	ldr	r2, [r3, #28]
 800a6ca:	2a00      	cmp	r2, #0
 800a6cc:	f000 8140 	beq.w	800a950 <forward_conv2d_if32of32wf32_nl_pool+0x2d0>
 800a6d0:	8b1b      	ldrh	r3, [r3, #24]
 800a6d2:	f8d2 b000 	ldr.w	fp, [r2]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	f240 8128 	bls.w	800a92c <forward_conv2d_if32of32wf32_nl_pool+0x2ac>
 800a6dc:	6853      	ldr	r3, [r2, #4]
 800a6de:	9341      	str	r3, [sp, #260]	@ 0x104
 800a6e0:	f8d2 a008 	ldr.w	sl, [r2, #8]
 800a6e4:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800a6e8:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800a6ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6ee:	f8db e00c 	ldr.w	lr, [fp, #12]
 800a6f2:	9022      	str	r0, [sp, #136]	@ 0x88
 800a6f4:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 800a6f8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a6fa:	9031      	str	r0, [sp, #196]	@ 0xc4
 800a6fc:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 800a700:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800a702:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a704:	f8de 7004 	ldr.w	r7, [lr, #4]
 800a708:	9032      	str	r0, [sp, #200]	@ 0xc8
 800a70a:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800a70e:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800a712:	9527      	str	r5, [sp, #156]	@ 0x9c
 800a714:	9628      	str	r6, [sp, #160]	@ 0xa0
 800a716:	681d      	ldr	r5, [r3, #0]
 800a718:	685e      	ldr	r6, [r3, #4]
 800a71a:	972b      	str	r7, [sp, #172]	@ 0xac
 800a71c:	9134      	str	r1, [sp, #208]	@ 0xd0
 800a71e:	f8de 7008 	ldr.w	r7, [lr, #8]
 800a722:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 800a726:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800a72a:	9529      	str	r5, [sp, #164]	@ 0xa4
 800a72c:	962a      	str	r6, [sp, #168]	@ 0xa8
 800a72e:	9730      	str	r7, [sp, #192]	@ 0xc0
 800a730:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 800a734:	9033      	str	r0, [sp, #204]	@ 0xcc
 800a736:	9123      	str	r1, [sp, #140]	@ 0x8c
 800a738:	9224      	str	r2, [sp, #144]	@ 0x90
 800a73a:	689a      	ldr	r2, [r3, #8]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	932f      	str	r3, [sp, #188]	@ 0xbc
 800a740:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 800a744:	9339      	str	r3, [sp, #228]	@ 0xe4
 800a746:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 800a74a:	922e      	str	r2, [sp, #184]	@ 0xb8
 800a74c:	933c      	str	r3, [sp, #240]	@ 0xf0
 800a74e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a750:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 800a754:	933d      	str	r3, [sp, #244]	@ 0xf4
 800a756:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 800a75a:	933e      	str	r3, [sp, #248]	@ 0xf8
 800a75c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800a760:	933f      	str	r3, [sp, #252]	@ 0xfc
 800a762:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800a766:	9340      	str	r3, [sp, #256]	@ 0x100
 800a768:	6a23      	ldr	r3, [r4, #32]
 800a76a:	9322      	str	r3, [sp, #136]	@ 0x88
 800a76c:	f8bd 309c 	ldrh.w	r3, [sp, #156]	@ 0x9c
 800a770:	9335      	str	r3, [sp, #212]	@ 0xd4
 800a772:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	@ 0xa0
 800a776:	9336      	str	r3, [sp, #216]	@ 0xd8
 800a778:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	@ 0xa4
 800a77c:	9337      	str	r3, [sp, #220]	@ 0xdc
 800a77e:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	@ 0xa8
 800a782:	9338      	str	r3, [sp, #224]	@ 0xe0
 800a784:	b2ab      	uxth	r3, r5
 800a786:	933a      	str	r3, [sp, #232]	@ 0xe8
 800a788:	b2b3      	uxth	r3, r6
 800a78a:	933b      	str	r3, [sp, #236]	@ 0xec
 800a78c:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	@ 0xac
 800a790:	9325      	str	r3, [sp, #148]	@ 0x94
 800a792:	b23b      	sxth	r3, r7
 800a794:	9326      	str	r3, [sp, #152]	@ 0x98
 800a796:	f1ba 0f00 	cmp.w	sl, #0
 800a79a:	f000 80b5 	beq.w	800a908 <forward_conv2d_if32of32wf32_nl_pool+0x288>
 800a79e:	f8da 2018 	ldr.w	r2, [sl, #24]
 800a7a2:	2a00      	cmp	r2, #0
 800a7a4:	f000 80b9 	beq.w	800a91a <forward_conv2d_if32of32wf32_nl_pool+0x29a>
 800a7a8:	6893      	ldr	r3, [r2, #8]
 800a7aa:	9322      	str	r3, [sp, #136]	@ 0x88
 800a7ac:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a7b0:	f002 f9da 	bl	800cb68 <ai_array_get_byte_size>
 800a7b4:	f8da 2018 	ldr.w	r2, [sl, #24]
 800a7b8:	902c      	str	r0, [sp, #176]	@ 0xb0
 800a7ba:	2a00      	cmp	r2, #0
 800a7bc:	f000 80bd 	beq.w	800a93a <forward_conv2d_if32of32wf32_nl_pool+0x2ba>
 800a7c0:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a7c4:	f002 f9d0 	bl	800cb68 <ai_array_get_byte_size>
 800a7c8:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800a7cc:	902d      	str	r0, [sp, #180]	@ 0xb4
 800a7ce:	f8bc 3000 	ldrh.w	r3, [ip]
 800a7d2:	9321      	str	r3, [sp, #132]	@ 0x84
 800a7d4:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a7d6:	f8d9 1018 	ldr.w	r1, [r9, #24]
 800a7da:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800a7dc:	f8d8 9018 	ldr.w	r9, [r8, #24]
 800a7e0:	f8d0 8018 	ldr.w	r8, [r0, #24]
 800a7e4:	6888      	ldr	r0, [r1, #8]
 800a7e6:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800a7ea:	f8d8 9008 	ldr.w	r9, [r8, #8]
 800a7ee:	f8bd a09c 	ldrh.w	sl, [sp, #156]	@ 0x9c
 800a7f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a7f4:	f8db 2018 	ldr.w	r2, [fp, #24]
 800a7f8:	f8bd e0a0 	ldrh.w	lr, [sp, #160]	@ 0xa0
 800a7fc:	f8d4 b05c 	ldr.w	fp, [r4, #92]	@ 0x5c
 800a800:	6892      	ldr	r2, [r2, #8]
 800a802:	f107 38ff 	add.w	r8, r7, #4294967295
 800a806:	b2ad      	uxth	r5, r5
 800a808:	9f2b      	ldr	r7, [sp, #172]	@ 0xac
 800a80a:	3d01      	subs	r5, #1
 800a80c:	fb15 7508 	smlabb	r5, r5, r8, r7
 800a810:	fa0f f885 	sxth.w	r8, r5
 800a814:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 800a816:	9f30      	ldr	r7, [sp, #192]	@ 0xc0
 800a818:	b2b6      	uxth	r6, r6
 800a81a:	3d01      	subs	r5, #1
 800a81c:	3e01      	subs	r6, #1
 800a81e:	fb16 7605 	smlabb	r6, r6, r5, r7
 800a822:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 800a824:	9f2a      	ldr	r7, [sp, #168]	@ 0xa8
 800a826:	eba5 0508 	sub.w	r5, r5, r8
 800a82a:	fa15 f587 	uxtah	r5, r5, r7
 800a82e:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
 800a830:	fa15 f587 	uxtah	r5, r5, r7
 800a834:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 800a836:	fb95 f5fa 	sdiv	r5, r5, sl
 800a83a:	b236      	sxth	r6, r6
 800a83c:	eba7 0a06 	sub.w	sl, r7, r6
 800a840:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 800a842:	fa1a fa87 	uxtah	sl, sl, r7
 800a846:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800a848:	3501      	adds	r5, #1
 800a84a:	2b03      	cmp	r3, #3
 800a84c:	fa1a fa87 	uxtah	sl, sl, r7
 800a850:	b22d      	sxth	r5, r5
 800a852:	fb9a fefe 	sdiv	lr, sl, lr
 800a856:	f8d4 a024 	ldr.w	sl, [r4, #36]	@ 0x24
 800a85a:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 800a85e:	f10e 0e01 	add.w	lr, lr, #1
 800a862:	d94e      	bls.n	800a902 <forward_conv2d_if32of32wf32_nl_pool+0x282>
 800a864:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800a868:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 800a86c:	f1bc 0f00 	cmp.w	ip, #0
 800a870:	d06b      	beq.n	800a94a <forward_conv2d_if32of32wf32_nl_pool+0x2ca>
 800a872:	f8dc 7000 	ldr.w	r7, [ip]
 800a876:	b10f      	cbz	r7, 800a87c <forward_conv2d_if32of32wf32_nl_pool+0x1fc>
 800a878:	69bf      	ldr	r7, [r7, #24]
 800a87a:	68bf      	ldr	r7, [r7, #8]
 800a87c:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 800a87e:	931f      	str	r3, [sp, #124]	@ 0x7c
 800a880:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 800a882:	931e      	str	r3, [sp, #120]	@ 0x78
 800a884:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 800a886:	931d      	str	r3, [sp, #116]	@ 0x74
 800a888:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 800a88a:	9513      	str	r5, [sp, #76]	@ 0x4c
 800a88c:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
 800a890:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 800a892:	960e      	str	r6, [sp, #56]	@ 0x38
 800a894:	e9cd b319 	strd	fp, r3, [sp, #100]	@ 0x64
 800a898:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800a89a:	9318      	str	r3, [sp, #96]	@ 0x60
 800a89c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800a89e:	9317      	str	r3, [sp, #92]	@ 0x5c
 800a8a0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a8a2:	e9cd a315 	strd	sl, r3, [sp, #84]	@ 0x54
 800a8a6:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800a8a8:	9312      	str	r3, [sp, #72]	@ 0x48
 800a8aa:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 800a8ac:	9311      	str	r3, [sp, #68]	@ 0x44
 800a8ae:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 800a8b0:	e9cd 830f 	strd	r8, r3, [sp, #60]	@ 0x3c
 800a8b4:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 800a8b6:	930d      	str	r3, [sp, #52]	@ 0x34
 800a8b8:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800a8ba:	930c      	str	r3, [sp, #48]	@ 0x30
 800a8bc:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 800a8be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8c0:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800a8c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8c4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a8c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8c8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800a8ca:	9308      	str	r3, [sp, #32]
 800a8cc:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800a8ce:	9307      	str	r3, [sp, #28]
 800a8d0:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 800a8d2:	9306      	str	r3, [sp, #24]
 800a8d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a8d6:	9305      	str	r3, [sp, #20]
 800a8d8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a8da:	9304      	str	r3, [sp, #16]
 800a8dc:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800a8de:	9303      	str	r3, [sp, #12]
 800a8e0:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800a8e2:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800a8e6:	fa0f f38e 	sxth.w	r3, lr
 800a8ea:	9314      	str	r3, [sp, #80]	@ 0x50
 800a8ec:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800a8f0:	69a4      	ldr	r4, [r4, #24]
 800a8f2:	68a4      	ldr	r4, [r4, #8]
 800a8f4:	9400      	str	r4, [sp, #0]
 800a8f6:	464b      	mov	r3, r9
 800a8f8:	f000 fc5c 	bl	800b1b4 <forward_lite_conv2d_if32of32wf32_pool>
 800a8fc:	b043      	add	sp, #268	@ 0x10c
 800a8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a902:	2300      	movs	r3, #0
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	deff      	udf	#255	@ 0xff
 800a908:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a90a:	b193      	cbz	r3, 800a932 <forward_conv2d_if32of32wf32_nl_pool+0x2b2>
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	9322      	str	r3, [sp, #136]	@ 0x88
 800a910:	2301      	movs	r3, #1
 800a912:	f8cd a0b0 	str.w	sl, [sp, #176]	@ 0xb0
 800a916:	932d      	str	r3, [sp, #180]	@ 0xb4
 800a918:	e75c      	b.n	800a7d4 <forward_conv2d_if32of32wf32_nl_pool+0x154>
 800a91a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a91c:	b10b      	cbz	r3, 800a922 <forward_conv2d_if32of32wf32_nl_pool+0x2a2>
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	9322      	str	r3, [sp, #136]	@ 0x88
 800a922:	2200      	movs	r2, #0
 800a924:	2301      	movs	r3, #1
 800a926:	e9cd 232c 	strd	r2, r3, [sp, #176]	@ 0xb0
 800a92a:	e753      	b.n	800a7d4 <forward_conv2d_if32of32wf32_nl_pool+0x154>
 800a92c:	2300      	movs	r3, #0
 800a92e:	9341      	str	r3, [sp, #260]	@ 0x104
 800a930:	e6d6      	b.n	800a6e0 <forward_conv2d_if32of32wf32_nl_pool+0x60>
 800a932:	932c      	str	r3, [sp, #176]	@ 0xb0
 800a934:	2301      	movs	r3, #1
 800a936:	932d      	str	r3, [sp, #180]	@ 0xb4
 800a938:	e74c      	b.n	800a7d4 <forward_conv2d_if32of32wf32_nl_pool+0x154>
 800a93a:	2301      	movs	r3, #1
 800a93c:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800a940:	932d      	str	r3, [sp, #180]	@ 0xb4
 800a942:	f8bc 3000 	ldrh.w	r3, [ip]
 800a946:	9321      	str	r3, [sp, #132]	@ 0x84
 800a948:	e744      	b.n	800a7d4 <forward_conv2d_if32of32wf32_nl_pool+0x154>
 800a94a:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800a94e:	deff      	udf	#255	@ 0xff
 800a950:	68d3      	ldr	r3, [r2, #12]
 800a952:	deff      	udf	#255	@ 0xff

0800a954 <forward_dense>:
 800a954:	6982      	ldr	r2, [r0, #24]
 800a956:	8813      	ldrh	r3, [r2, #0]
 800a958:	b90b      	cbnz	r3, 800a95e <forward_dense+0xa>
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	deff      	udf	#255	@ 0xff
 800a95e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a962:	f8d2 a004 	ldr.w	sl, [r2, #4]
 800a966:	f8da 0004 	ldr.w	r0, [sl, #4]
 800a96a:	b08e      	sub	sp, #56	@ 0x38
 800a96c:	b100      	cbz	r0, 800a970 <forward_dense+0x1c>
 800a96e:	6800      	ldr	r0, [r0, #0]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d061      	beq.n	800aa38 <forward_dense+0xe4>
 800a974:	f8da 2010 	ldr.w	r2, [sl, #16]
 800a978:	b102      	cbz	r2, 800a97c <forward_dense+0x28>
 800a97a:	6812      	ldr	r2, [r2, #0]
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	d035      	beq.n	800a9ec <forward_dense+0x98>
 800a980:	f8da 501c 	ldr.w	r5, [sl, #28]
 800a984:	2d00      	cmp	r5, #0
 800a986:	d055      	beq.n	800aa34 <forward_dense+0xe0>
 800a988:	f8ba 4018 	ldrh.w	r4, [sl, #24]
 800a98c:	6829      	ldr	r1, [r5, #0]
 800a98e:	2c01      	cmp	r4, #1
 800a990:	d955      	bls.n	800aa3e <forward_dense+0xea>
 800a992:	686d      	ldr	r5, [r5, #4]
 800a994:	698e      	ldr	r6, [r1, #24]
 800a996:	68c4      	ldr	r4, [r0, #12]
 800a998:	68d1      	ldr	r1, [r2, #12]
 800a99a:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800a99e:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800a9a2:	e9d1 4702 	ldrd	r4, r7, [r1, #8]
 800a9a6:	6831      	ldr	r1, [r6, #0]
 800a9a8:	2b03      	cmp	r3, #3
 800a9aa:	fb07 f804 	mul.w	r8, r7, r4
 800a9ae:	f021 4c7e 	bic.w	ip, r1, #4261412864	@ 0xfe000000
 800a9b2:	d046      	beq.n	800aa42 <forward_dense+0xee>
 800a9b4:	f8da 4028 	ldr.w	r4, [sl, #40]	@ 0x28
 800a9b8:	b11c      	cbz	r4, 800a9c2 <forward_dense+0x6e>
 800a9ba:	6824      	ldr	r4, [r4, #0]
 800a9bc:	b10c      	cbz	r4, 800a9c2 <forward_dense+0x6e>
 800a9be:	69a3      	ldr	r3, [r4, #24]
 800a9c0:	689c      	ldr	r4, [r3, #8]
 800a9c2:	6983      	ldr	r3, [r0, #24]
 800a9c4:	6992      	ldr	r2, [r2, #24]
 800a9c6:	6899      	ldr	r1, [r3, #8]
 800a9c8:	6890      	ldr	r0, [r2, #8]
 800a9ca:	b10d      	cbz	r5, 800a9d0 <forward_dense+0x7c>
 800a9cc:	69ab      	ldr	r3, [r5, #24]
 800a9ce:	689d      	ldr	r5, [r3, #8]
 800a9d0:	4f1d      	ldr	r7, [pc, #116]	@ (800aa48 <forward_dense+0xf4>)
 800a9d2:	45bc      	cmp	ip, r7
 800a9d4:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 800a9d8:	d022      	beq.n	800aa20 <forward_dense+0xcc>
 800a9da:	4e1c      	ldr	r6, [pc, #112]	@ (800aa4c <forward_dense+0xf8>)
 800a9dc:	45b4      	cmp	ip, r6
 800a9de:	d015      	beq.n	800aa0c <forward_dense+0xb8>
 800a9e0:	4b1b      	ldr	r3, [pc, #108]	@ (800aa50 <forward_dense+0xfc>)
 800a9e2:	459c      	cmp	ip, r3
 800a9e4:	d005      	beq.n	800a9f2 <forward_dense+0x9e>
 800a9e6:	b00e      	add	sp, #56	@ 0x38
 800a9e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	deff      	udf	#255	@ 0xff
 800a9f2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800a9f6:	a807      	add	r0, sp, #28
 800a9f8:	e9cd 5e0a 	strd	r5, lr, [sp, #40]	@ 0x28
 800a9fc:	e9cd 980c 	strd	r9, r8, [sp, #48]	@ 0x30
 800aa00:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa02:	f001 fb69 	bl	800c0d8 <forward_lite_dense_if32of32wf32>
 800aa06:	b00e      	add	sp, #56	@ 0x38
 800aa08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa0c:	e9cd 9803 	strd	r9, r8, [sp, #12]
 800aa10:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 800aa14:	9400      	str	r4, [sp, #0]
 800aa16:	f001 fcb5 	bl	800c384 <forward_lite_dense_if32of32wf32_lut4>
 800aa1a:	b00e      	add	sp, #56	@ 0x38
 800aa1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa20:	e9cd 9803 	strd	r9, r8, [sp, #12]
 800aa24:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 800aa28:	9400      	str	r4, [sp, #0]
 800aa2a:	f001 fdef 	bl	800c60c <forward_lite_dense_if32of32wf32_lut8>
 800aa2e:	b00e      	add	sp, #56	@ 0x38
 800aa30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa34:	4629      	mov	r1, r5
 800aa36:	e7ad      	b.n	800a994 <forward_dense+0x40>
 800aa38:	2300      	movs	r3, #0
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	deff      	udf	#255	@ 0xff
 800aa3e:	2500      	movs	r5, #0
 800aa40:	e7a8      	b.n	800a994 <forward_dense+0x40>
 800aa42:	2300      	movs	r3, #0
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	deff      	udf	#255	@ 0xff
 800aa48:	00d01040 	.word	0x00d01040
 800aa4c:	00f01040 	.word	0x00f01040
 800aa50:	00821040 	.word	0x00821040

0800aa54 <forward_relu>:
 800aa54:	6982      	ldr	r2, [r0, #24]
 800aa56:	8813      	ldrh	r3, [r2, #0]
 800aa58:	b90b      	cbnz	r3, 800aa5e <forward_relu+0xa>
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	deff      	udf	#255	@ 0xff
 800aa5e:	b470      	push	{r4, r5, r6}
 800aa60:	6852      	ldr	r2, [r2, #4]
 800aa62:	6854      	ldr	r4, [r2, #4]
 800aa64:	b104      	cbz	r4, 800aa68 <forward_relu+0x14>
 800aa66:	6824      	ldr	r4, [r4, #0]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	f000 8088 	beq.w	800ab7e <forward_relu+0x12a>
 800aa6e:	6913      	ldr	r3, [r2, #16]
 800aa70:	b103      	cbz	r3, 800aa74 <forward_relu+0x20>
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	6999      	ldr	r1, [r3, #24]
 800aa76:	69a2      	ldr	r2, [r4, #24]
 800aa78:	68a3      	ldr	r3, [r4, #8]
 800aa7a:	69c6      	ldr	r6, [r0, #28]
 800aa7c:	6888      	ldr	r0, [r1, #8]
 800aa7e:	6891      	ldr	r1, [r2, #8]
 800aa80:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800aa84:	b196      	cbz	r6, 800aaac <forward_relu+0x58>
 800aa86:	6872      	ldr	r2, [r6, #4]
 800aa88:	2a01      	cmp	r2, #1
 800aa8a:	d03b      	beq.n	800ab04 <forward_relu+0xb0>
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d06d      	beq.n	800ab6c <forward_relu+0x118>
 800aa90:	68e5      	ldr	r5, [r4, #12]
 800aa92:	2201      	movs	r2, #1
 800aa94:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800aa98:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800aa9c:	429d      	cmp	r5, r3
 800aa9e:	fb04 f202 	mul.w	r2, r4, r2
 800aaa2:	d1f9      	bne.n	800aa98 <forward_relu+0x44>
 800aaa4:	68b3      	ldr	r3, [r6, #8]
 800aaa6:	bc70      	pop	{r4, r5, r6}
 800aaa8:	f001 b814 	b.w	800bad4 <forward_lite_nl_relu_generic_if32of32_kernel>
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d05f      	beq.n	800ab70 <forward_relu+0x11c>
 800aab0:	68e5      	ldr	r5, [r4, #12]
 800aab2:	2201      	movs	r2, #1
 800aab4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800aab8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800aabc:	429d      	cmp	r5, r3
 800aabe:	fb04 f202 	mul.w	r2, r4, r2
 800aac2:	d1f9      	bne.n	800aab8 <forward_relu+0x64>
 800aac4:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800aac8:	3a01      	subs	r2, #1
 800aaca:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800aace:	428c      	cmp	r4, r1
 800aad0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800aad4:	d314      	bcc.n	800ab00 <forward_relu+0xac>
 800aad6:	1a61      	subs	r1, r4, r1
 800aad8:	f021 0103 	bic.w	r1, r1, #3
 800aadc:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800ab84 <forward_relu+0x130>
 800aae0:	1d23      	adds	r3, r4, #4
 800aae2:	3004      	adds	r0, #4
 800aae4:	1a62      	subs	r2, r4, r1
 800aae6:	ed73 7a01 	vldmdb	r3!, {s15}
 800aaea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aaee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaf2:	bfb8      	it	lt
 800aaf4:	eef0 7a47 	vmovlt.f32	s15, s14
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	ed60 7a01 	vstmdb	r0!, {s15}
 800aafe:	d1f2      	bne.n	800aae6 <forward_relu+0x92>
 800ab00:	bc70      	pop	{r4, r5, r6}
 800ab02:	4770      	bx	lr
 800ab04:	b3b3      	cbz	r3, 800ab74 <forward_relu+0x120>
 800ab06:	68e5      	ldr	r5, [r4, #12]
 800ab08:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ab0c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800ab10:	429d      	cmp	r5, r3
 800ab12:	fb04 f202 	mul.w	r2, r4, r2
 800ab16:	d1f9      	bne.n	800ab0c <forward_relu+0xb8>
 800ab18:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800ab1c:	3a01      	subs	r2, #1
 800ab1e:	68b3      	ldr	r3, [r6, #8]
 800ab20:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800ab24:	428c      	cmp	r4, r1
 800ab26:	ed93 7a00 	vldr	s14, [r3]
 800ab2a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800ab2e:	d3e7      	bcc.n	800ab00 <forward_relu+0xac>
 800ab30:	1a61      	subs	r1, r4, r1
 800ab32:	f021 0103 	bic.w	r1, r1, #3
 800ab36:	2500      	movs	r5, #0
 800ab38:	1d23      	adds	r3, r4, #4
 800ab3a:	1a62      	subs	r2, r4, r1
 800ab3c:	3004      	adds	r0, #4
 800ab3e:	ed73 7a01 	vldmdb	r3!, {s15}
 800ab42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ab46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab4a:	d50a      	bpl.n	800ab62 <forward_relu+0x10e>
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	ed60 7a01 	vstmdb	r0!, {s15}
 800ab52:	d0d5      	beq.n	800ab00 <forward_relu+0xac>
 800ab54:	ed73 7a01 	vldmdb	r3!, {s15}
 800ab58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ab5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab60:	d4f4      	bmi.n	800ab4c <forward_relu+0xf8>
 800ab62:	429a      	cmp	r2, r3
 800ab64:	f840 5d04 	str.w	r5, [r0, #-4]!
 800ab68:	d1e9      	bne.n	800ab3e <forward_relu+0xea>
 800ab6a:	e7c9      	b.n	800ab00 <forward_relu+0xac>
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	e799      	b.n	800aaa4 <forward_relu+0x50>
 800ab70:	460c      	mov	r4, r1
 800ab72:	e7b0      	b.n	800aad6 <forward_relu+0x82>
 800ab74:	68b3      	ldr	r3, [r6, #8]
 800ab76:	460c      	mov	r4, r1
 800ab78:	ed93 7a00 	vldr	s14, [r3]
 800ab7c:	e7d8      	b.n	800ab30 <forward_relu+0xdc>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	deff      	udf	#255	@ 0xff
 800ab84:	00000000 	.word	0x00000000

0800ab88 <forward_sm>:
 800ab88:	6982      	ldr	r2, [r0, #24]
 800ab8a:	8813      	ldrh	r3, [r2, #0]
 800ab8c:	b90b      	cbnz	r3, 800ab92 <forward_sm+0xa>
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	deff      	udf	#255	@ 0xff
 800ab92:	b570      	push	{r4, r5, r6, lr}
 800ab94:	6852      	ldr	r2, [r2, #4]
 800ab96:	6855      	ldr	r5, [r2, #4]
 800ab98:	b082      	sub	sp, #8
 800ab9a:	b105      	cbz	r5, 800ab9e <forward_sm+0x16>
 800ab9c:	682d      	ldr	r5, [r5, #0]
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d030      	beq.n	800ac04 <forward_sm+0x7c>
 800aba2:	6916      	ldr	r6, [r2, #16]
 800aba4:	b106      	cbz	r6, 800aba8 <forward_sm+0x20>
 800aba6:	6836      	ldr	r6, [r6, #0]
 800aba8:	68ab      	ldr	r3, [r5, #8]
 800abaa:	ea5f 2c13 	movs.w	ip, r3, lsr #8
 800abae:	d027      	beq.n	800ac00 <forward_sm+0x78>
 800abb0:	68ec      	ldr	r4, [r5, #12]
 800abb2:	2201      	movs	r2, #1
 800abb4:	eb04 038c 	add.w	r3, r4, ip, lsl #2
 800abb8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abbc:	429c      	cmp	r4, r3
 800abbe:	fb01 f202 	mul.w	r2, r1, r2
 800abc2:	d1f9      	bne.n	800abb8 <forward_sm+0x30>
 800abc4:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800abc8:	69b0      	ldr	r0, [r6, #24]
 800abca:	4563      	cmp	r3, ip
 800abcc:	bfb8      	it	lt
 800abce:	68e9      	ldrlt	r1, [r5, #12]
 800abd0:	6880      	ldr	r0, [r0, #8]
 800abd2:	bfb8      	it	lt
 800abd4:	f851 4023 	ldrlt.w	r4, [r1, r3, lsl #2]
 800abd8:	6929      	ldr	r1, [r5, #16]
 800abda:	bfa8      	it	ge
 800abdc:	2401      	movge	r4, #1
 800abde:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800abe2:	bfbc      	itt	lt
 800abe4:	6969      	ldrlt	r1, [r5, #20]
 800abe6:	f851 3023 	ldrlt.w	r3, [r1, r3, lsl #2]
 800abea:	69a9      	ldr	r1, [r5, #24]
 800abec:	bfb8      	it	lt
 800abee:	089b      	lsrlt	r3, r3, #2
 800abf0:	6889      	ldr	r1, [r1, #8]
 800abf2:	9400      	str	r4, [sp, #0]
 800abf4:	bfa8      	it	ge
 800abf6:	2300      	movge	r3, #0
 800abf8:	f001 fe76 	bl	800c8e8 <forward_lite_nl_softmax_if32of32>
 800abfc:	b002      	add	sp, #8
 800abfe:	bd70      	pop	{r4, r5, r6, pc}
 800ac00:	2201      	movs	r2, #1
 800ac02:	e7df      	b.n	800abc4 <forward_sm+0x3c>
 800ac04:	2300      	movs	r3, #0
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	deff      	udf	#255	@ 0xff
 800ac0a:	bf00      	nop

0800ac0c <forward_lite_conv2d_if32of32wf32>:
 800ac0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac10:	ed2d 8b02 	vpush	{d8}
 800ac14:	b0a1      	sub	sp, #132	@ 0x84
 800ac16:	4680      	mov	r8, r0
 800ac18:	9d32      	ldr	r5, [sp, #200]	@ 0xc8
 800ac1a:	f8bd 60d4 	ldrh.w	r6, [sp, #212]	@ 0xd4
 800ac1e:	f8bd 70dc 	ldrh.w	r7, [sp, #220]	@ 0xdc
 800ac22:	9018      	str	r0, [sp, #96]	@ 0x60
 800ac24:	460c      	mov	r4, r1
 800ac26:	4694      	mov	ip, r2
 800ac28:	9211      	str	r2, [sp, #68]	@ 0x44
 800ac2a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac2c:	f8bd 20d8 	ldrh.w	r2, [sp, #216]	@ 0xd8
 800ac30:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 800ac32:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 800ac34:	f8bd 10e0 	ldrh.w	r1, [sp, #224]	@ 0xe0
 800ac38:	9612      	str	r6, [sp, #72]	@ 0x48
 800ac3a:	9705      	str	r7, [sp, #20]
 800ac3c:	2d00      	cmp	r5, #0
 800ac3e:	f000 817e 	beq.w	800af3e <forward_lite_conv2d_if32of32wf32+0x332>
 800ac42:	9d33      	ldr	r5, [sp, #204]	@ 0xcc
 800ac44:	ed9f 8ac5 	vldr	s16, [pc, #788]	@ 800af5c <forward_lite_conv2d_if32of32wf32+0x350>
 800ac48:	fb05 f303 	mul.w	r3, r5, r3
 800ac4c:	9d2d      	ldr	r5, [sp, #180]	@ 0xb4
 800ac4e:	fb05 f303 	mul.w	r3, r5, r3
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	f1c2 0e00 	rsb	lr, r2, #0
 800ac58:	930d      	str	r3, [sp, #52]	@ 0x34
 800ac5a:	4615      	mov	r5, r2
 800ac5c:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 800ac5e:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800ac60:	fb02 f303 	mul.w	r3, r2, r3
 800ac64:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 800ac66:	fb02 f200 	mul.w	r2, r2, r0
 800ac6a:	0092      	lsls	r2, r2, #2
 800ac6c:	0080      	lsls	r0, r0, #2
 800ac6e:	9214      	str	r2, [sp, #80]	@ 0x50
 800ac70:	fb01 f203 	mul.w	r2, r1, r3
 800ac74:	fb03 f30e 	mul.w	r3, r3, lr
 800ac78:	9002      	str	r0, [sp, #8]
 800ac7a:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 800ac7e:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800ac80:	fb07 f303 	mul.w	r3, r7, r3
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	9304      	str	r3, [sp, #16]
 800ac88:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800ac8a:	4276      	negs	r6, r6
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	0092      	lsls	r2, r2, #2
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	fb03 f306 	mul.w	r3, r3, r6
 800ac96:	9216      	str	r2, [sp, #88]	@ 0x58
 800ac98:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac9a:	f10c 4278 	add.w	r2, ip, #4160749568	@ 0xf8000000
 800ac9e:	2300      	movs	r3, #0
 800aca0:	960f      	str	r6, [sp, #60]	@ 0x3c
 800aca2:	9213      	str	r2, [sp, #76]	@ 0x4c
 800aca4:	930e      	str	r3, [sp, #56]	@ 0x38
 800aca6:	4677      	mov	r7, lr
 800aca8:	4606      	mov	r6, r0
 800acaa:	4688      	mov	r8, r1
 800acac:	2f00      	cmp	r7, #0
 800acae:	f2c0 827d 	blt.w	800b1ac <forward_lite_conv2d_if32of32wf32+0x5a0>
 800acb2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800acb4:	2300      	movs	r3, #0
 800acb6:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 800acb8:	9939      	ldr	r1, [sp, #228]	@ 0xe4
 800acba:	442a      	add	r2, r5
 800acbc:	428a      	cmp	r2, r1
 800acbe:	bf94      	ite	ls
 800acc0:	ebc3 0202 	rsbls	r2, r3, r2
 800acc4:	ebc3 0201 	rsbhi	r2, r3, r1
 800acc8:	4610      	mov	r0, r2
 800acca:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 800accc:	2a00      	cmp	r2, #0
 800acce:	f000 8147 	beq.w	800af60 <forward_lite_conv2d_if32of32wf32+0x354>
 800acd2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800acd4:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800acd8:	f0c0 8142 	bcc.w	800af60 <forward_lite_conv2d_if32of32wf32+0x354>
 800acdc:	9a02      	ldr	r2, [sp, #8]
 800acde:	18a2      	adds	r2, r4, r2
 800ace0:	4294      	cmp	r4, r2
 800ace2:	9215      	str	r2, [sp, #84]	@ 0x54
 800ace4:	f080 811d 	bcs.w	800af22 <forward_lite_conv2d_if32of32wf32+0x316>
 800ace8:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 800acea:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 800acee:	f8cd 8074 	str.w	r8, [sp, #116]	@ 0x74
 800acf2:	fb02 f303 	mul.w	r3, r2, r3
 800acf6:	9309      	str	r3, [sp, #36]	@ 0x24
 800acf8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800acfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acfc:	e9cd 7619 	strd	r7, r6, [sp, #100]	@ 0x64
 800ad00:	4413      	add	r3, r2
 800ad02:	e9cd 541b 	strd	r5, r4, [sp, #108]	@ 0x6c
 800ad06:	9317      	str	r3, [sp, #92]	@ 0x5c
 800ad08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad0c:	46a1      	mov	r9, r4
 800ad0e:	4680      	mov	r8, r0
 800ad10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ad12:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800ad14:	4650      	mov	r0, sl
 800ad16:	f001 fe19 	bl	800c94c <st_int8_copy>
 800ad1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 8119 	beq.w	800af54 <forward_lite_conv2d_if32of32wf32+0x348>
 800ad22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad24:	ecf3 6a01 	vldmia	r3!, {s13}
 800ad28:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad2a:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f000 80ea 	beq.w	800af06 <forward_lite_conv2d_if32of32wf32+0x2fa>
 800ad32:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ad34:	9201      	str	r2, [sp, #4]
 800ad36:	2000      	movs	r0, #0
 800ad38:	e9cd a91e 	strd	sl, r9, [sp, #120]	@ 0x78
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad40:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800ad42:	4648      	mov	r0, r9
 800ad44:	4614      	mov	r4, r2
 800ad46:	2d00      	cmp	r5, #0
 800ad48:	f2c0 80fe 	blt.w	800af48 <forward_lite_conv2d_if32of32wf32+0x33c>
 800ad4c:	9a01      	ldr	r2, [sp, #4]
 800ad4e:	9203      	str	r2, [sp, #12]
 800ad50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad52:	2600      	movs	r6, #0
 800ad54:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800ad56:	9f00      	ldr	r7, [sp, #0]
 800ad58:	fb02 1207 	mla	r2, r2, r7, r1
 800ad5c:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 800ad5e:	18cf      	adds	r7, r1, r3
 800ad60:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 800ad62:	428f      	cmp	r7, r1
 800ad64:	bf94      	ite	ls
 800ad66:	ebc6 0607 	rsbls	r6, r6, r7
 800ad6a:	ebc6 0601 	rsbhi	r6, r6, r1
 800ad6e:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 800ad70:	eba1 0b06 	sub.w	fp, r1, r6
 800ad74:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 800ad76:	eba1 0a06 	sub.w	sl, r1, r6
 800ad7a:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800ad7c:	f1b8 0f00 	cmp.w	r8, #0
 800ad80:	fb01 f606 	mul.w	r6, r1, r6
 800ad84:	eeb0 7a66 	vmov.f32	s14, s13
 800ad88:	f340 80ab 	ble.w	800aee2 <forward_lite_conv2d_if32of32wf32+0x2d6>
 800ad8c:	9f00      	ldr	r7, [sp, #0]
 800ad8e:	9903      	ldr	r1, [sp, #12]
 800ad90:	9408      	str	r4, [sp, #32]
 800ad92:	fb07 fb0b 	mul.w	fp, r7, fp
 800ad96:	fb07 fa0a 	mul.w	sl, r7, sl
 800ad9a:	f026 070f 	bic.w	r7, r6, #15
 800ad9e:	f107 39ff 	add.w	r9, r7, #4294967295
 800ada2:	ea4f 1919 	mov.w	r9, r9, lsr #4
 800ada6:	e9cd 0506 	strd	r0, r5, [sp, #24]
 800adaa:	f109 0901 	add.w	r9, r9, #1
 800adae:	ea4f 1e89 	mov.w	lr, r9, lsl #6
 800adb2:	f04f 0c00 	mov.w	ip, #0
 800adb6:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800adba:	9303      	str	r3, [sp, #12]
 800adbc:	2f00      	cmp	r7, #0
 800adbe:	bfd8      	it	le
 800adc0:	2000      	movle	r0, #0
 800adc2:	dd70      	ble.n	800aea6 <forward_lite_conv2d_if32of32wf32+0x29a>
 800adc4:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 800adc8:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 800adcc:	2400      	movs	r4, #0
 800adce:	ed50 5a0f 	vldr	s11, [r0, #-60]	@ 0xffffffc4
 800add2:	ed53 7a0f 	vldr	s15, [r3, #-60]	@ 0xffffffc4
 800add6:	ed13 5a10 	vldr	s10, [r3, #-64]	@ 0xffffffc0
 800adda:	ed10 6a10 	vldr	s12, [r0, #-64]	@ 0xffffffc0
 800adde:	ed13 4a0d 	vldr	s8, [r3, #-52]	@ 0xffffffcc
 800ade2:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 800ade6:	ed50 2a0a 	vldr	s5, [r0, #-40]	@ 0xffffffd8
 800adea:	ed13 3a0a 	vldr	s6, [r3, #-40]	@ 0xffffffd8
 800adee:	ed50 3a09 	vldr	s7, [r0, #-36]	@ 0xffffffdc
 800adf2:	ed10 1a06 	vldr	s2, [r0, #-24]	@ 0xffffffe8
 800adf6:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800adfa:	ed10 2a05 	vldr	s4, [r0, #-20]	@ 0xffffffec
 800adfe:	ed53 0a01 	vldr	s1, [r3, #-4]
 800ae02:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ae06:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 800ae0a:	eee5 7a06 	vfma.f32	s15, s10, s12
 800ae0e:	3410      	adds	r4, #16
 800ae10:	42bc      	cmp	r4, r7
 800ae12:	ed13 5a0e 	vldr	s10, [r3, #-56]	@ 0xffffffc8
 800ae16:	ed10 6a0d 	vldr	s12, [r0, #-52]	@ 0xffffffcc
 800ae1a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ae1e:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800ae22:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800ae26:	ed10 5a1c 	vldr	s10, [r0, #-112]	@ 0xffffff90
 800ae2a:	ed50 5a1b 	vldr	s11, [r0, #-108]	@ 0xffffff94
 800ae2e:	eee4 7a06 	vfma.f32	s15, s8, s12
 800ae32:	ed13 6a1b 	vldr	s12, [r3, #-108]	@ 0xffffff94
 800ae36:	ed13 4a19 	vldr	s8, [r3, #-100]	@ 0xffffff9c
 800ae3a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ae3e:	ed53 4a18 	vldr	s9, [r3, #-96]	@ 0xffffffa0
 800ae42:	ed10 5a18 	vldr	s10, [r0, #-96]	@ 0xffffffa0
 800ae46:	eee5 7a86 	vfma.f32	s15, s11, s12
 800ae4a:	ed50 5a17 	vldr	s11, [r0, #-92]	@ 0xffffffa4
 800ae4e:	ed13 6a17 	vldr	s12, [r3, #-92]	@ 0xffffffa4
 800ae52:	eee2 7a83 	vfma.f32	s15, s5, s6
 800ae56:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 800ae5a:	ed13 3a14 	vldr	s6, [r3, #-80]	@ 0xffffffb0
 800ae5e:	eee3 7a84 	vfma.f32	s15, s7, s8
 800ae62:	ed50 3a14 	vldr	s7, [r0, #-80]	@ 0xffffffb0
 800ae66:	ed13 4a13 	vldr	s8, [r3, #-76]	@ 0xffffffb4
 800ae6a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ae6e:	ed50 4a13 	vldr	s9, [r0, #-76]	@ 0xffffffb4
 800ae72:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 800ae76:	eee5 7a86 	vfma.f32	s15, s11, s12
 800ae7a:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800ae7e:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 800ae82:	eee1 7a21 	vfma.f32	s15, s2, s3
 800ae86:	eee2 7a22 	vfma.f32	s15, s4, s5
 800ae8a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800ae8e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ae92:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ae96:	eee6 7a20 	vfma.f32	s15, s12, s1
 800ae9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ae9e:	db96      	blt.n	800adce <forward_lite_conv2d_if32of32wf32+0x1c2>
 800aea0:	4471      	add	r1, lr
 800aea2:	4472      	add	r2, lr
 800aea4:	4648      	mov	r0, r9
 800aea6:	4286      	cmp	r6, r0
 800aea8:	dd10      	ble.n	800aecc <forward_lite_conv2d_if32of32wf32+0x2c0>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	460d      	mov	r5, r1
 800aeae:	4614      	mov	r4, r2
 800aeb0:	ecb4 6a01 	vldmia	r4!, {s12}
 800aeb4:	ecf5 7a01 	vldmia	r5!, {s15}
 800aeb8:	3301      	adds	r3, #1
 800aeba:	429e      	cmp	r6, r3
 800aebc:	eea6 7a27 	vfma.f32	s14, s12, s15
 800aec0:	d1f6      	bne.n	800aeb0 <forward_lite_conv2d_if32of32wf32+0x2a4>
 800aec2:	1a30      	subs	r0, r6, r0
 800aec4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800aec8:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800aecc:	f10c 0c01 	add.w	ip, ip, #1
 800aed0:	45e0      	cmp	r8, ip
 800aed2:	4459      	add	r1, fp
 800aed4:	4452      	add	r2, sl
 800aed6:	f47f af71 	bne.w	800adbc <forward_lite_conv2d_if32of32wf32+0x1b0>
 800aeda:	e9dd 0506 	ldrd	r0, r5, [sp, #24]
 800aede:	9c08      	ldr	r4, [sp, #32]
 800aee0:	9b03      	ldr	r3, [sp, #12]
 800aee2:	9a05      	ldr	r2, [sp, #20]
 800aee4:	9902      	ldr	r1, [sp, #8]
 800aee6:	ed80 7a00 	vstr	s14, [r0]
 800aeea:	4415      	add	r5, r2
 800aeec:	4408      	add	r0, r1
 800aeee:	1a9b      	subs	r3, r3, r2
 800aef0:	9904      	ldr	r1, [sp, #16]
 800aef2:	9a01      	ldr	r2, [sp, #4]
 800aef4:	440a      	add	r2, r1
 800aef6:	9201      	str	r2, [sp, #4]
 800aef8:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 800aefa:	3401      	adds	r4, #1
 800aefc:	42a2      	cmp	r2, r4
 800aefe:	f47f af22 	bne.w	800ad46 <forward_lite_conv2d_if32of32wf32+0x13a>
 800af02:	e9dd a91e 	ldrd	sl, r9, [sp, #120]	@ 0x78
 800af06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af08:	449a      	add	sl, r3
 800af0a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800af0c:	f109 0904 	add.w	r9, r9, #4
 800af10:	4599      	cmp	r9, r3
 800af12:	f4ff aefd 	bcc.w	800ad10 <forward_lite_conv2d_if32of32wf32+0x104>
 800af16:	e9dd 7619 	ldrd	r7, r6, [sp, #100]	@ 0x64
 800af1a:	e9dd 541b 	ldrd	r5, r4, [sp, #108]	@ 0x6c
 800af1e:	f8dd 8074 	ldr.w	r8, [sp, #116]	@ 0x74
 800af22:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800af24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af26:	4414      	add	r4, r2
 800af28:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800af2a:	4416      	add	r6, r2
 800af2c:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800af2e:	3301      	adds	r3, #1
 800af30:	429a      	cmp	r2, r3
 800af32:	930e      	str	r3, [sp, #56]	@ 0x38
 800af34:	4447      	add	r7, r8
 800af36:	eba5 0508 	sub.w	r5, r5, r8
 800af3a:	f47f aeb7 	bne.w	800acac <forward_lite_conv2d_if32of32wf32+0xa0>
 800af3e:	b021      	add	sp, #132	@ 0x84
 800af40:	ecbd 8b02 	vpop	{d8}
 800af44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800af4c:	9103      	str	r1, [sp, #12]
 800af4e:	461e      	mov	r6, r3
 800af50:	441a      	add	r2, r3
 800af52:	e6ff      	b.n	800ad54 <forward_lite_conv2d_if32of32wf32+0x148>
 800af54:	eef0 6a48 	vmov.f32	s13, s16
 800af58:	e6e7      	b.n	800ad2a <forward_lite_conv2d_if32of32wf32+0x11e>
 800af5a:	bf00      	nop
 800af5c:	00000000 	.word	0x00000000
 800af60:	9a02      	ldr	r2, [sp, #8]
 800af62:	eb04 0c02 	add.w	ip, r4, r2
 800af66:	4564      	cmp	r4, ip
 800af68:	d2db      	bcs.n	800af22 <forward_lite_conv2d_if32of32wf32+0x316>
 800af6a:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 800af6c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800af6e:	9109      	str	r1, [sp, #36]	@ 0x24
 800af70:	fb02 f303 	mul.w	r3, r2, r3
 800af74:	930a      	str	r3, [sp, #40]	@ 0x28
 800af76:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800af78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af7a:	9615      	str	r6, [sp, #84]	@ 0x54
 800af7c:	eb03 0e02 	add.w	lr, r3, r2
 800af80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af82:	9517      	str	r5, [sp, #92]	@ 0x5c
 800af84:	4622      	mov	r2, r4
 800af86:	4683      	mov	fp, r0
 800af88:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800af8a:	2900      	cmp	r1, #0
 800af8c:	f000 810b 	beq.w	800b1a6 <forward_lite_conv2d_if32of32wf32+0x59a>
 800af90:	ecf3 6a01 	vldmia	r3!, {s13}
 800af94:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 800af96:	2900      	cmp	r1, #0
 800af98:	f000 80f4 	beq.w	800b184 <forward_lite_conv2d_if32of32wf32+0x578>
 800af9c:	2100      	movs	r1, #0
 800af9e:	e9cd ce1c 	strd	ip, lr, [sp, #112]	@ 0x70
 800afa2:	e9cd 481e 	strd	r4, r8, [sp, #120]	@ 0x78
 800afa6:	e9cd 3219 	strd	r3, r2, [sp, #100]	@ 0x64
 800afaa:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800afac:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800afae:	f8cd e004 	str.w	lr, [sp, #4]
 800afb2:	460b      	mov	r3, r1
 800afb4:	971b      	str	r7, [sp, #108]	@ 0x6c
 800afb6:	4611      	mov	r1, r2
 800afb8:	461d      	mov	r5, r3
 800afba:	2e00      	cmp	r6, #0
 800afbc:	f2c0 80ed 	blt.w	800b19a <forward_lite_conv2d_if32of32wf32+0x58e>
 800afc0:	9b01      	ldr	r3, [sp, #4]
 800afc2:	9303      	str	r3, [sp, #12]
 800afc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afc6:	2400      	movs	r4, #0
 800afc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afca:	9f00      	ldr	r7, [sp, #0]
 800afcc:	fb03 2307 	mla	r3, r3, r7, r2
 800afd0:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800afd2:	1817      	adds	r7, r2, r0
 800afd4:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 800afd6:	4297      	cmp	r7, r2
 800afd8:	bf94      	ite	ls
 800afda:	ebc4 0407 	rsbls	r4, r4, r7
 800afde:	ebc4 0402 	rsbhi	r4, r4, r2
 800afe2:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800afe4:	eba2 0a04 	sub.w	sl, r2, r4
 800afe8:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 800afea:	eba2 0904 	sub.w	r9, r2, r4
 800afee:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800aff0:	f1bb 0f00 	cmp.w	fp, #0
 800aff4:	fb02 f404 	mul.w	r4, r2, r4
 800aff8:	eeb0 7a66 	vmov.f32	s14, s13
 800affc:	f340 80aa 	ble.w	800b154 <forward_lite_conv2d_if32of32wf32+0x548>
 800b000:	f024 0c0f 	bic.w	ip, r4, #15
 800b004:	f10c 38ff 	add.w	r8, ip, #4294967295
 800b008:	9f00      	ldr	r7, [sp, #0]
 800b00a:	9a03      	ldr	r2, [sp, #12]
 800b00c:	9508      	str	r5, [sp, #32]
 800b00e:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800b012:	e9cd 1606 	strd	r1, r6, [sp, #24]
 800b016:	f108 0801 	add.w	r8, r8, #1
 800b01a:	fb07 fa0a 	mul.w	sl, r7, sl
 800b01e:	fb07 f909 	mul.w	r9, r7, r9
 800b022:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800b026:	2700      	movs	r7, #0
 800b028:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800b02c:	9003      	str	r0, [sp, #12]
 800b02e:	f1bc 0f00 	cmp.w	ip, #0
 800b032:	bfd8      	it	le
 800b034:	2100      	movle	r1, #0
 800b036:	dd70      	ble.n	800b11a <forward_lite_conv2d_if32of32wf32+0x50e>
 800b038:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 800b03c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800b040:	2500      	movs	r5, #0
 800b042:	ed51 5a0f 	vldr	s11, [r1, #-60]	@ 0xffffffc4
 800b046:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 800b04a:	ed11 5a10 	vldr	s10, [r1, #-64]	@ 0xffffffc0
 800b04e:	ed10 6a10 	vldr	s12, [r0, #-64]	@ 0xffffffc0
 800b052:	ed11 4a0d 	vldr	s8, [r1, #-52]	@ 0xffffffcc
 800b056:	ed50 4a0c 	vldr	s9, [r0, #-48]	@ 0xffffffd0
 800b05a:	ed50 2a0a 	vldr	s5, [r0, #-40]	@ 0xffffffd8
 800b05e:	ed11 3a0a 	vldr	s6, [r1, #-40]	@ 0xffffffd8
 800b062:	ed50 3a09 	vldr	s7, [r0, #-36]	@ 0xffffffdc
 800b066:	ed50 1a06 	vldr	s3, [r0, #-24]	@ 0xffffffe8
 800b06a:	ed11 1a06 	vldr	s2, [r1, #-24]	@ 0xffffffe8
 800b06e:	ed11 2a05 	vldr	s4, [r1, #-20]	@ 0xffffffec
 800b072:	ed51 0a01 	vldr	s1, [r1, #-4]
 800b076:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b07a:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 800b07e:	eee5 7a06 	vfma.f32	s15, s10, s12
 800b082:	3510      	adds	r5, #16
 800b084:	4565      	cmp	r5, ip
 800b086:	ed11 5a0e 	vldr	s10, [r1, #-56]	@ 0xffffffc8
 800b08a:	ed10 6a0d 	vldr	s12, [r0, #-52]	@ 0xffffffcc
 800b08e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b092:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800b096:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 800b09a:	ed11 5a1c 	vldr	s10, [r1, #-112]	@ 0xffffff90
 800b09e:	ed50 5a1b 	vldr	s11, [r0, #-108]	@ 0xffffff94
 800b0a2:	eee4 7a06 	vfma.f32	s15, s8, s12
 800b0a6:	ed11 6a1b 	vldr	s12, [r1, #-108]	@ 0xffffff94
 800b0aa:	ed11 4a19 	vldr	s8, [r1, #-100]	@ 0xffffff9c
 800b0ae:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b0b2:	ed51 4a18 	vldr	s9, [r1, #-96]	@ 0xffffffa0
 800b0b6:	ed11 5a17 	vldr	s10, [r1, #-92]	@ 0xffffffa4
 800b0ba:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b0be:	ed50 5a18 	vldr	s11, [r0, #-96]	@ 0xffffffa0
 800b0c2:	ed10 6a17 	vldr	s12, [r0, #-92]	@ 0xffffffa4
 800b0c6:	eee2 7a83 	vfma.f32	s15, s5, s6
 800b0ca:	ed50 2a15 	vldr	s5, [r0, #-84]	@ 0xffffffac
 800b0ce:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 800b0d2:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b0d6:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 800b0da:	ed11 4a13 	vldr	s8, [r1, #-76]	@ 0xffffffb4
 800b0de:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800b0e2:	ed50 4a13 	vldr	s9, [r0, #-76]	@ 0xffffffb4
 800b0e6:	ed50 5a12 	vldr	s11, [r0, #-72]	@ 0xffffffb8
 800b0ea:	eee5 7a06 	vfma.f32	s15, s10, s12
 800b0ee:	ed11 5a12 	vldr	s10, [r1, #-72]	@ 0xffffffb8
 800b0f2:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 800b0f6:	eee1 7a21 	vfma.f32	s15, s2, s3
 800b0fa:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b0fe:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b102:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b106:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b10a:	eee6 7a20 	vfma.f32	s15, s12, s1
 800b10e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b112:	db96      	blt.n	800b042 <forward_lite_conv2d_if32of32wf32+0x436>
 800b114:	4472      	add	r2, lr
 800b116:	4473      	add	r3, lr
 800b118:	4641      	mov	r1, r8
 800b11a:	428c      	cmp	r4, r1
 800b11c:	dd10      	ble.n	800b140 <forward_lite_conv2d_if32of32wf32+0x534>
 800b11e:	4608      	mov	r0, r1
 800b120:	4616      	mov	r6, r2
 800b122:	461d      	mov	r5, r3
 800b124:	ecb5 6a01 	vldmia	r5!, {s12}
 800b128:	ecf6 7a01 	vldmia	r6!, {s15}
 800b12c:	3001      	adds	r0, #1
 800b12e:	4284      	cmp	r4, r0
 800b130:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b134:	d1f6      	bne.n	800b124 <forward_lite_conv2d_if32of32wf32+0x518>
 800b136:	1a61      	subs	r1, r4, r1
 800b138:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800b13c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b140:	3701      	adds	r7, #1
 800b142:	45bb      	cmp	fp, r7
 800b144:	4452      	add	r2, sl
 800b146:	444b      	add	r3, r9
 800b148:	f47f af71 	bne.w	800b02e <forward_lite_conv2d_if32of32wf32+0x422>
 800b14c:	e9dd 1606 	ldrd	r1, r6, [sp, #24]
 800b150:	9d08      	ldr	r5, [sp, #32]
 800b152:	9803      	ldr	r0, [sp, #12]
 800b154:	9b05      	ldr	r3, [sp, #20]
 800b156:	9a02      	ldr	r2, [sp, #8]
 800b158:	ed81 7a00 	vstr	s14, [r1]
 800b15c:	441e      	add	r6, r3
 800b15e:	4411      	add	r1, r2
 800b160:	1ac0      	subs	r0, r0, r3
 800b162:	9a04      	ldr	r2, [sp, #16]
 800b164:	9b01      	ldr	r3, [sp, #4]
 800b166:	4413      	add	r3, r2
 800b168:	9301      	str	r3, [sp, #4]
 800b16a:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800b16c:	3501      	adds	r5, #1
 800b16e:	42ab      	cmp	r3, r5
 800b170:	f47f af23 	bne.w	800afba <forward_lite_conv2d_if32of32wf32+0x3ae>
 800b174:	e9dd 3219 	ldrd	r3, r2, [sp, #100]	@ 0x64
 800b178:	e9dd 7c1b 	ldrd	r7, ip, [sp, #108]	@ 0x6c
 800b17c:	e9dd e41d 	ldrd	lr, r4, [sp, #116]	@ 0x74
 800b180:	f8dd 807c 	ldr.w	r8, [sp, #124]	@ 0x7c
 800b184:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b186:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b188:	3204      	adds	r2, #4
 800b18a:	4401      	add	r1, r0
 800b18c:	4562      	cmp	r2, ip
 800b18e:	9109      	str	r1, [sp, #36]	@ 0x24
 800b190:	f4ff aefa 	bcc.w	800af88 <forward_lite_conv2d_if32of32wf32+0x37c>
 800b194:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b196:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800b198:	e6c3      	b.n	800af22 <forward_lite_conv2d_if32of32wf32+0x316>
 800b19a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b19c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b19e:	9203      	str	r2, [sp, #12]
 800b1a0:	4604      	mov	r4, r0
 800b1a2:	4403      	add	r3, r0
 800b1a4:	e710      	b.n	800afc8 <forward_lite_conv2d_if32of32wf32+0x3bc>
 800b1a6:	eef0 6a48 	vmov.f32	s13, s16
 800b1aa:	e6f3      	b.n	800af94 <forward_lite_conv2d_if32of32wf32+0x388>
 800b1ac:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800b1ae:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b1b0:	462b      	mov	r3, r5
 800b1b2:	e580      	b.n	800acb6 <forward_lite_conv2d_if32of32wf32+0xaa>

0800b1b4 <forward_lite_conv2d_if32of32wf32_pool>:
 800b1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b8:	ed2d 8b02 	vpush	{d8}
 800b1bc:	b0c5      	sub	sp, #276	@ 0x114
 800b1be:	4696      	mov	lr, r2
 800b1c0:	f9bd 518c 	ldrsh.w	r5, [sp, #396]	@ 0x18c
 800b1c4:	f9bd 4148 	ldrsh.w	r4, [sp, #328]	@ 0x148
 800b1c8:	9320      	str	r3, [sp, #128]	@ 0x80
 800b1ca:	f9bd 31ac 	ldrsh.w	r3, [sp, #428]	@ 0x1ac
 800b1ce:	9412      	str	r4, [sp, #72]	@ 0x48
 800b1d0:	f8bd 4170 	ldrh.w	r4, [sp, #368]	@ 0x170
 800b1d4:	912f      	str	r1, [sp, #188]	@ 0xbc
 800b1d6:	9230      	str	r2, [sp, #192]	@ 0xc0
 800b1d8:	f9bd 1160 	ldrsh.w	r1, [sp, #352]	@ 0x160
 800b1dc:	9327      	str	r3, [sp, #156]	@ 0x9c
 800b1de:	fb05 f203 	mul.w	r2, r5, r3
 800b1e2:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b1e4:	f9bd 3154 	ldrsh.w	r3, [sp, #340]	@ 0x154
 800b1e8:	f8bd 4174 	ldrh.w	r4, [sp, #372]	@ 0x174
 800b1ec:	f9bd 715c 	ldrsh.w	r7, [sp, #348]	@ 0x15c
 800b1f0:	f9bd 6150 	ldrsh.w	r6, [sp, #336]	@ 0x150
 800b1f4:	933a      	str	r3, [sp, #232]	@ 0xe8
 800b1f6:	910a      	str	r1, [sp, #40]	@ 0x28
 800b1f8:	f9bd 3158 	ldrsh.w	r3, [sp, #344]	@ 0x158
 800b1fc:	f8bd 1168 	ldrh.w	r1, [sp, #360]	@ 0x168
 800b200:	9426      	str	r4, [sp, #152]	@ 0x98
 800b202:	f9bd 4178 	ldrsh.w	r4, [sp, #376]	@ 0x178
 800b206:	f9bd c14c 	ldrsh.w	ip, [sp, #332]	@ 0x14c
 800b20a:	9039      	str	r0, [sp, #228]	@ 0xe4
 800b20c:	9331      	str	r3, [sp, #196]	@ 0xc4
 800b20e:	9125      	str	r1, [sp, #148]	@ 0x94
 800b210:	f9bd 3164 	ldrsh.w	r3, [sp, #356]	@ 0x164
 800b214:	950e      	str	r5, [sp, #56]	@ 0x38
 800b216:	4680      	mov	r8, r0
 800b218:	9732      	str	r7, [sp, #200]	@ 0xc8
 800b21a:	f8bd 016c 	ldrh.w	r0, [sp, #364]	@ 0x16c
 800b21e:	9610      	str	r6, [sp, #64]	@ 0x40
 800b220:	943b      	str	r4, [sp, #236]	@ 0xec
 800b222:	f9bd 41a8 	ldrsh.w	r4, [sp, #424]	@ 0x1a8
 800b226:	943c      	str	r4, [sp, #240]	@ 0xf0
 800b228:	f9bd 41b0 	ldrsh.w	r4, [sp, #432]	@ 0x1b0
 800b22c:	943d      	str	r4, [sp, #244]	@ 0xf4
 800b22e:	f9bd 41b4 	ldrsh.w	r4, [sp, #436]	@ 0x1b4
 800b232:	9428      	str	r4, [sp, #160]	@ 0xa0
 800b234:	f9bd 41b8 	ldrsh.w	r4, [sp, #440]	@ 0x1b8
 800b238:	943e      	str	r4, [sp, #248]	@ 0xf8
 800b23a:	f9bd 41bc 	ldrsh.w	r4, [sp, #444]	@ 0x1bc
 800b23e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b240:	2f00      	cmp	r7, #0
 800b242:	f1c0 0400 	rsb	r4, r0, #0
 800b246:	f9bd 1190 	ldrsh.w	r1, [sp, #400]	@ 0x190
 800b24a:	f8dd 9198 	ldr.w	r9, [sp, #408]	@ 0x198
 800b24e:	941d      	str	r4, [sp, #116]	@ 0x74
 800b250:	fb0c f202 	mul.w	r2, ip, r2
 800b254:	f340 826d 	ble.w	800b732 <forward_lite_conv2d_if32of32wf32_pool+0x57e>
 800b258:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800b25a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800b25c:	901e      	str	r0, [sp, #120]	@ 0x78
 800b25e:	fb07 f303 	mul.w	r3, r7, r3
 800b262:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 800b264:	ed9f 8a6d 	vldr	s16, [pc, #436]	@ 800b41c <forward_lite_conv2d_if32of32wf32_pool+0x268>
 800b268:	fb04 f303 	mul.w	r3, r4, r3
 800b26c:	009f      	lsls	r7, r3, #2
 800b26e:	fb0c f300 	mul.w	r3, ip, r0
 800b272:	fb05 f303 	mul.w	r3, r5, r3
 800b276:	0098      	lsls	r0, r3, #2
 800b278:	9036      	str	r0, [sp, #216]	@ 0xd8
 800b27a:	9826      	ldr	r0, [sp, #152]	@ 0x98
 800b27c:	9721      	str	r7, [sp, #132]	@ 0x84
 800b27e:	fb00 f306 	mul.w	r3, r0, r6
 800b282:	fb04 f303 	mul.w	r3, r4, r3
 800b286:	0098      	lsls	r0, r3, #2
 800b288:	902d      	str	r0, [sp, #180]	@ 0xb4
 800b28a:	0090      	lsls	r0, r2, #2
 800b28c:	902c      	str	r0, [sp, #176]	@ 0xb0
 800b28e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800b290:	9850      	ldr	r0, [sp, #320]	@ 0x140
 800b292:	00a7      	lsls	r7, r4, #2
 800b294:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b298:	fb0c f303 	mul.w	r3, ip, r3
 800b29c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800b29e:	921c      	str	r2, [sp, #112]	@ 0x70
 800b2a0:	009a      	lsls	r2, r3, #2
 800b2a2:	fb06 f307 	mul.w	r3, r6, r7
 800b2a6:	fb00 8603 	mla	r6, r0, r3, r8
 800b2aa:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800b2ac:	961f      	str	r6, [sp, #124]	@ 0x7c
 800b2ae:	425e      	negs	r6, r3
 800b2b0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b2b2:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800b2b4:	9234      	str	r2, [sp, #208]	@ 0xd0
 800b2b6:	fb03 f304 	mul.w	r3, r3, r4
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	9314      	str	r3, [sp, #80]	@ 0x50
 800b2be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2c0:	9329      	str	r3, [sp, #164]	@ 0xa4
 800b2c2:	fb0c f505 	mul.w	r5, ip, r5
 800b2c6:	4240      	negs	r0, r0
 800b2c8:	9535      	str	r5, [sp, #212]	@ 0xd4
 800b2ca:	9023      	str	r0, [sp, #140]	@ 0x8c
 800b2cc:	f10e 4578 	add.w	r5, lr, #4160749568	@ 0xf8000000
 800b2d0:	fb06 f007 	mul.w	r0, r6, r7
 800b2d4:	469b      	mov	fp, r3
 800b2d6:	1e4b      	subs	r3, r1, #1
 800b2d8:	2200      	movs	r2, #0
 800b2da:	9533      	str	r5, [sp, #204]	@ 0xcc
 800b2dc:	902e      	str	r0, [sp, #184]	@ 0xb8
 800b2de:	ea4f 058c 	mov.w	r5, ip, lsl #2
 800b2e2:	9850      	ldr	r0, [sp, #320]	@ 0x140
 800b2e4:	962b      	str	r6, [sp, #172]	@ 0xac
 800b2e6:	b21b      	sxth	r3, r3
 800b2e8:	2900      	cmp	r1, #0
 800b2ea:	970c      	str	r7, [sp, #48]	@ 0x30
 800b2ec:	9224      	str	r2, [sp, #144]	@ 0x90
 800b2ee:	950f      	str	r5, [sp, #60]	@ 0x3c
 800b2f0:	901a      	str	r0, [sp, #104]	@ 0x68
 800b2f2:	46c8      	mov	r8, r9
 800b2f4:	4614      	mov	r4, r2
 800b2f6:	4666      	mov	r6, ip
 800b2f8:	9322      	str	r3, [sp, #136]	@ 0x88
 800b2fa:	f300 8091 	bgt.w	800b420 <forward_lite_conv2d_if32of32wf32_pool+0x26c>
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f280 8226 	bge.w	800b750 <forward_lite_conv2d_if32of32wf32_pool+0x59c>
 800b304:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800b306:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b308:	fb03 f30b 	mul.w	r3, r3, fp
 800b30c:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 800b310:	9a50      	ldr	r2, [sp, #320]	@ 0x140
 800b312:	429a      	cmp	r2, r3
 800b314:	bf84      	itt	hi
 800b316:	9a2c      	ldrhi	r2, [sp, #176]	@ 0xb0
 800b318:	189b      	addhi	r3, r3, r2
 800b31a:	9a50      	ldr	r2, [sp, #320]	@ 0x140
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d216      	bcs.n	800b34e <forward_lite_conv2d_if32of32wf32_pool+0x19a>
 800b320:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800b322:	455a      	cmp	r2, fp
 800b324:	d013      	beq.n	800b34e <forward_lite_conv2d_if32of32wf32_pool+0x19a>
 800b326:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b328:	429a      	cmp	r2, r3
 800b32a:	d910      	bls.n	800b34e <forward_lite_conv2d_if32of32wf32_pool+0x19a>
 800b32c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b32e:	461a      	mov	r2, r3
 800b330:	f852 0b04 	ldr.w	r0, [r2], #4
 800b334:	f841 0b04 	str.w	r0, [r1], #4
 800b338:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800b33a:	4282      	cmp	r2, r0
 800b33c:	d3f8      	bcc.n	800b330 <forward_lite_conv2d_if32of32wf32_pool+0x17c>
 800b33e:	1e42      	subs	r2, r0, #1
 800b340:	1ad3      	subs	r3, r2, r3
 800b342:	f023 0303 	bic.w	r3, r3, #3
 800b346:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b348:	3304      	adds	r3, #4
 800b34a:	441a      	add	r2, r3
 800b34c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b34e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b350:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 800b352:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 800b354:	440a      	add	r2, r1
 800b356:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 800b358:	fa1f f38b 	uxth.w	r3, fp
 800b35c:	1ad2      	subs	r2, r2, r3
 800b35e:	440b      	add	r3, r1
 800b360:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b362:	4401      	add	r1, r0
 800b364:	911a      	str	r1, [sp, #104]	@ 0x68
 800b366:	fa0f fb83 	sxth.w	fp, r3
 800b36a:	460b      	mov	r3, r1
 800b36c:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800b36e:	b212      	sxth	r2, r2
 800b370:	428b      	cmp	r3, r1
 800b372:	9224      	str	r2, [sp, #144]	@ 0x90
 800b374:	d304      	bcc.n	800b380 <forward_lite_conv2d_if32of32wf32_pool+0x1cc>
 800b376:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b378:	4413      	add	r3, r2
 800b37a:	428b      	cmp	r3, r1
 800b37c:	d2fc      	bcs.n	800b378 <forward_lite_conv2d_if32of32wf32_pool+0x1c4>
 800b37e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b380:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800b382:	455a      	cmp	r2, fp
 800b384:	f300 81c6 	bgt.w	800b714 <forward_lite_conv2d_if32of32wf32_pool+0x560>
 800b388:	1c63      	adds	r3, r4, #1
 800b38a:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 800b38c:	9108      	str	r1, [sp, #32]
 800b38e:	b21c      	sxth	r4, r3
 800b390:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 800b392:	f8dd a0a0 	ldr.w	sl, [sp, #160]	@ 0xa0
 800b396:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 800b398:	9850      	ldr	r0, [sp, #320]	@ 0x140
 800b39a:	9d69      	ldr	r5, [sp, #420]	@ 0x1a4
 800b39c:	18cb      	adds	r3, r1, r3
 800b39e:	932f      	str	r3, [sp, #188]	@ 0xbc
 800b3a0:	9926      	ldr	r1, [sp, #152]	@ 0x98
 800b3a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b3a4:	440b      	add	r3, r1
 800b3a6:	931d      	str	r3, [sp, #116]	@ 0x74
 800b3a8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b3aa:	1a5b      	subs	r3, r3, r1
 800b3ac:	931e      	str	r3, [sp, #120]	@ 0x78
 800b3ae:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800b3b0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800b3b2:	440b      	add	r3, r1
 800b3b4:	931f      	str	r3, [sp, #124]	@ 0x7c
 800b3b6:	b293      	uxth	r3, r2
 800b3b8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b3ba:	9301      	str	r3, [sp, #4]
 800b3bc:	1a9b      	subs	r3, r3, r2
 800b3be:	b29a      	uxth	r2, r3
 800b3c0:	fa1f f38a 	uxth.w	r3, sl
 800b3c4:	ebab 0103 	sub.w	r1, fp, r3
 800b3c8:	9305      	str	r3, [sp, #20]
 800b3ca:	b2bb      	uxth	r3, r7
 800b3cc:	9303      	str	r3, [sp, #12]
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	9307      	str	r3, [sp, #28]
 800b3d2:	f8bd 30c4 	ldrh.w	r3, [sp, #196]	@ 0xc4
 800b3d6:	9306      	str	r3, [sp, #24]
 800b3d8:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	@ 0xf4
 800b3dc:	9304      	str	r3, [sp, #16]
 800b3de:	f8bd 30f8 	ldrh.w	r3, [sp, #248]	@ 0xf8
 800b3e2:	9302      	str	r3, [sp, #8]
 800b3e4:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
 800b3e8:	9300      	str	r3, [sp, #0]
 800b3ea:	fa0f fb81 	sxth.w	fp, r1
 800b3ee:	b2b3      	uxth	r3, r6
 800b3f0:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 800b3f4:	47a8      	blx	r5
 800b3f6:	4652      	mov	r2, sl
 800b3f8:	1abb      	subs	r3, r7, r2
 800b3fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b3fe:	b21b      	sxth	r3, r3
 800b400:	9329      	str	r3, [sp, #164]	@ 0xa4
 800b402:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800b404:	42a3      	cmp	r3, r4
 800b406:	f340 8194 	ble.w	800b732 <forward_lite_conv2d_if32of32wf32_pool+0x57e>
 800b40a:	9922      	ldr	r1, [sp, #136]	@ 0x88
 800b40c:	1e4b      	subs	r3, r1, #1
 800b40e:	b21b      	sxth	r3, r3
 800b410:	2900      	cmp	r1, #0
 800b412:	9322      	str	r3, [sp, #136]	@ 0x88
 800b414:	f77f af73 	ble.w	800b2fe <forward_lite_conv2d_if32of32wf32_pool+0x14a>
 800b418:	e002      	b.n	800b420 <forward_lite_conv2d_if32of32wf32_pool+0x26c>
 800b41a:	bf00      	nop
 800b41c:	00000000 	.word	0x00000000
 800b420:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b422:	2b00      	cmp	r3, #0
 800b424:	f2c0 82cb 	blt.w	800b9be <forward_lite_conv2d_if32of32wf32_pool+0x80a>
 800b428:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800b42a:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b42c:	2300      	movs	r3, #0
 800b42e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b430:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 800b432:	440a      	add	r2, r1
 800b434:	993b      	ldr	r1, [sp, #236]	@ 0xec
 800b436:	428a      	cmp	r2, r1
 800b438:	bfd4      	ite	le
 800b43a:	ebc3 0702 	rsble	r7, r3, r2
 800b43e:	ebc3 0701 	rsbgt	r7, r3, r1
 800b442:	9a51      	ldr	r2, [sp, #324]	@ 0x144
 800b444:	2a00      	cmp	r2, #0
 800b446:	f000 8187 	beq.w	800b758 <forward_lite_conv2d_if32of32wf32_pool+0x5a4>
 800b44a:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 800b44c:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800b450:	f0c0 8182 	bcc.w	800b758 <forward_lite_conv2d_if32of32wf32_pool+0x5a4>
 800b454:	2e00      	cmp	r6, #0
 800b456:	f340 812b 	ble.w	800b6b0 <forward_lite_conv2d_if32of32wf32_pool+0x4fc>
 800b45a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b45c:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 800b45e:	fb02 f303 	mul.w	r3, r2, r3
 800b462:	9318      	str	r3, [sp, #96]	@ 0x60
 800b464:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b466:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800b468:	189a      	adds	r2, r3, r2
 800b46a:	9237      	str	r2, [sp, #220]	@ 0xdc
 800b46c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b46e:	469a      	mov	sl, r3
 800b470:	e9cd 843f 	strd	r8, r4, [sp, #252]	@ 0xfc
 800b474:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b476:	932a      	str	r3, [sp, #168]	@ 0xa8
 800b478:	440a      	add	r2, r1
 800b47a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800b47c:	9238      	str	r2, [sp, #224]	@ 0xe0
 800b47e:	9319      	str	r3, [sp, #100]	@ 0x64
 800b480:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b482:	9951      	ldr	r1, [sp, #324]	@ 0x144
 800b484:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b486:	f001 fa61 	bl	800c94c <st_int8_copy>
 800b48a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f000 815c 	beq.w	800b74a <forward_lite_conv2d_if32of32wf32_pool+0x596>
 800b492:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800b494:	ecf3 6a01 	vldmia	r3!, {s13}
 800b498:	932a      	str	r3, [sp, #168]	@ 0xa8
 800b49a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f000 80fb 	beq.w	800b698 <forward_lite_conv2d_if32of32wf32_pool+0x4e4>
 800b4a2:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800b4a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b4a6:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 800b4a8:	920d      	str	r2, [sp, #52]	@ 0x34
 800b4aa:	2500      	movs	r5, #0
 800b4ac:	4413      	add	r3, r2
 800b4ae:	9c2b      	ldr	r4, [sp, #172]	@ 0xac
 800b4b0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b4b2:	462a      	mov	r2, r5
 800b4b4:	46bc      	mov	ip, r7
 800b4b6:	f8cd a104 	str.w	sl, [sp, #260]	@ 0x104
 800b4ba:	4655      	mov	r5, sl
 800b4bc:	9642      	str	r6, [sp, #264]	@ 0x108
 800b4be:	f8cd 9198 	str.w	r9, [sp, #408]	@ 0x198
 800b4c2:	f8cd b10c 	str.w	fp, [sp, #268]	@ 0x10c
 800b4c6:	4610      	mov	r0, r2
 800b4c8:	2c00      	cmp	r4, #0
 800b4ca:	f2c0 8137 	blt.w	800b73c <forward_lite_conv2d_if32of32wf32_pool+0x588>
 800b4ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b4d0:	9211      	str	r2, [sp, #68]	@ 0x44
 800b4d2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800b4d4:	2600      	movs	r6, #0
 800b4d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b4d8:	9f51      	ldr	r7, [sp, #324]	@ 0x144
 800b4da:	4299      	cmp	r1, r3
 800b4dc:	bf94      	ite	ls
 800b4de:	ebc6 0601 	rsbls	r6, r6, r1
 800b4e2:	ebc6 0603 	rsbhi	r6, r6, r3
 800b4e6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b4e8:	fb02 7201 	mla	r2, r2, r1, r7
 800b4ec:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800b4ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b4f0:	eba7 0b06 	sub.w	fp, r7, r6
 800b4f4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800b4f6:	eba1 0a06 	sub.w	sl, r1, r6
 800b4fa:	fb07 f606 	mul.w	r6, r7, r6
 800b4fe:	4667      	mov	r7, ip
 800b500:	2f00      	cmp	r7, #0
 800b502:	eeb0 7a66 	vmov.f32	s14, s13
 800b506:	f340 80ad 	ble.w	800b664 <forward_lite_conv2d_if32of32wf32_pool+0x4b0>
 800b50a:	f026 0c0f 	bic.w	ip, r6, #15
 800b50e:	f10c 39ff 	add.w	r9, ip, #4294967295
 800b512:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b514:	9317      	str	r3, [sp, #92]	@ 0x5c
 800b516:	ea4f 1919 	mov.w	r9, r9, lsr #4
 800b51a:	e9cd 4015 	strd	r4, r0, [sp, #84]	@ 0x54
 800b51e:	f109 0901 	add.w	r9, r9, #1
 800b522:	fb01 fb0b 	mul.w	fp, r1, fp
 800b526:	fb01 fa0a 	mul.w	sl, r1, sl
 800b52a:	ea4f 1889 	mov.w	r8, r9, lsl #6
 800b52e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800b530:	9511      	str	r5, [sp, #68]	@ 0x44
 800b532:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800b536:	f04f 0e00 	mov.w	lr, #0
 800b53a:	f1bc 0f00 	cmp.w	ip, #0
 800b53e:	bfd8      	it	le
 800b540:	2500      	movle	r5, #0
 800b542:	dd70      	ble.n	800b626 <forward_lite_conv2d_if32of32wf32_pool+0x472>
 800b544:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 800b548:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 800b54c:	2400      	movs	r4, #0
 800b54e:	ed13 6a0f 	vldr	s12, [r3, #-60]	@ 0xffffffc4
 800b552:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 800b556:	ed10 5a10 	vldr	s10, [r0, #-64]	@ 0xffffffc0
 800b55a:	ed53 5a10 	vldr	s11, [r3, #-64]	@ 0xffffffc0
 800b55e:	ed10 4a0d 	vldr	s8, [r0, #-52]	@ 0xffffffcc
 800b562:	ed50 4a0c 	vldr	s9, [r0, #-48]	@ 0xffffffd0
 800b566:	ed50 2a0a 	vldr	s5, [r0, #-40]	@ 0xffffffd8
 800b56a:	ed13 3a0a 	vldr	s6, [r3, #-40]	@ 0xffffffd8
 800b56e:	ed50 3a09 	vldr	s7, [r0, #-36]	@ 0xffffffdc
 800b572:	ed50 1a06 	vldr	s3, [r0, #-24]	@ 0xffffffe8
 800b576:	ed13 1a06 	vldr	s2, [r3, #-24]	@ 0xffffffe8
 800b57a:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 800b57e:	ed50 0a01 	vldr	s1, [r0, #-4]
 800b582:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b586:	ed10 6a0e 	vldr	s12, [r0, #-56]	@ 0xffffffc8
 800b58a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b58e:	3410      	adds	r4, #16
 800b590:	4564      	cmp	r4, ip
 800b592:	ed13 5a0e 	vldr	s10, [r3, #-56]	@ 0xffffffc8
 800b596:	ed53 5a0d 	vldr	s11, [r3, #-52]	@ 0xffffffcc
 800b59a:	eee5 7a06 	vfma.f32	s15, s10, s12
 800b59e:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800b5a2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b5a6:	ed13 5a1c 	vldr	s10, [r3, #-112]	@ 0xffffff90
 800b5aa:	ed10 6a1b 	vldr	s12, [r0, #-108]	@ 0xffffff94
 800b5ae:	eee4 7a25 	vfma.f32	s15, s8, s11
 800b5b2:	ed53 5a1b 	vldr	s11, [r3, #-108]	@ 0xffffff94
 800b5b6:	ed13 4a19 	vldr	s8, [r3, #-100]	@ 0xffffff9c
 800b5ba:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b5be:	ed53 4a18 	vldr	s9, [r3, #-96]	@ 0xffffffa0
 800b5c2:	ed13 5a17 	vldr	s10, [r3, #-92]	@ 0xffffffa4
 800b5c6:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b5ca:	ed50 5a18 	vldr	s11, [r0, #-96]	@ 0xffffffa0
 800b5ce:	ed10 6a17 	vldr	s12, [r0, #-92]	@ 0xffffffa4
 800b5d2:	eee2 7a83 	vfma.f32	s15, s5, s6
 800b5d6:	ed50 2a15 	vldr	s5, [r0, #-84]	@ 0xffffffac
 800b5da:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 800b5de:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b5e2:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 800b5e6:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 800b5ea:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800b5ee:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 800b5f2:	ed50 5a12 	vldr	s11, [r0, #-72]	@ 0xffffffb8
 800b5f6:	eee5 7a06 	vfma.f32	s15, s10, s12
 800b5fa:	ed13 5a12 	vldr	s10, [r3, #-72]	@ 0xffffffb8
 800b5fe:	ed13 6a11 	vldr	s12, [r3, #-68]	@ 0xffffffbc
 800b602:	eee1 7a21 	vfma.f32	s15, s2, s3
 800b606:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b60a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b60e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b612:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b616:	eee6 7a20 	vfma.f32	s15, s12, s1
 800b61a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b61e:	db96      	blt.n	800b54e <forward_lite_conv2d_if32of32wf32_pool+0x39a>
 800b620:	4441      	add	r1, r8
 800b622:	4442      	add	r2, r8
 800b624:	464d      	mov	r5, r9
 800b626:	42ae      	cmp	r6, r5
 800b628:	dd10      	ble.n	800b64c <forward_lite_conv2d_if32of32wf32_pool+0x498>
 800b62a:	462b      	mov	r3, r5
 800b62c:	460c      	mov	r4, r1
 800b62e:	4610      	mov	r0, r2
 800b630:	ecb0 6a01 	vldmia	r0!, {s12}
 800b634:	ecf4 7a01 	vldmia	r4!, {s15}
 800b638:	3301      	adds	r3, #1
 800b63a:	429e      	cmp	r6, r3
 800b63c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b640:	d1f6      	bne.n	800b630 <forward_lite_conv2d_if32of32wf32_pool+0x47c>
 800b642:	1b75      	subs	r5, r6, r5
 800b644:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800b648:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800b64c:	f10e 0e01 	add.w	lr, lr, #1
 800b650:	4577      	cmp	r7, lr
 800b652:	4459      	add	r1, fp
 800b654:	4452      	add	r2, sl
 800b656:	f47f af70 	bne.w	800b53a <forward_lite_conv2d_if32of32wf32_pool+0x386>
 800b65a:	e9dd 4015 	ldrd	r4, r0, [sp, #84]	@ 0x54
 800b65e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b660:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b662:	46bc      	mov	ip, r7
 800b664:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b666:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b668:	ed85 7a00 	vstr	s14, [r5]
 800b66c:	440d      	add	r5, r1
 800b66e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b670:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800b672:	1a89      	subs	r1, r1, r2
 800b674:	4414      	add	r4, r2
 800b676:	910d      	str	r1, [sp, #52]	@ 0x34
 800b678:	1a9b      	subs	r3, r3, r2
 800b67a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b67c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b67e:	3001      	adds	r0, #1
 800b680:	4431      	add	r1, r6
 800b682:	4282      	cmp	r2, r0
 800b684:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b686:	f47f af1f 	bne.w	800b4c8 <forward_lite_conv2d_if32of32wf32_pool+0x314>
 800b68a:	e9dd a641 	ldrd	sl, r6, [sp, #260]	@ 0x104
 800b68e:	f8dd 9198 	ldr.w	r9, [sp, #408]	@ 0x198
 800b692:	f8dd b10c 	ldr.w	fp, [sp, #268]	@ 0x10c
 800b696:	4667      	mov	r7, ip
 800b698:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b69a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b69c:	4413      	add	r3, r2
 800b69e:	9319      	str	r3, [sp, #100]	@ 0x64
 800b6a0:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 800b6a2:	f10a 0a04 	add.w	sl, sl, #4
 800b6a6:	459a      	cmp	sl, r3
 800b6a8:	f47f aeea 	bne.w	800b480 <forward_lite_conv2d_if32of32wf32_pool+0x2cc>
 800b6ac:	e9dd 843f 	ldrd	r8, r4, [sp, #252]	@ 0xfc
 800b6b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	dd26      	ble.n	800b704 <forward_lite_conv2d_if32of32wf32_pool+0x550>
 800b6b6:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f000 8184 	beq.w	800b9c6 <forward_lite_conv2d_if32of32wf32_pool+0x812>
 800b6be:	46b2      	mov	sl, r6
 800b6c0:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800b6c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b6c4:	465e      	mov	r6, fp
 800b6c6:	f8dd b19c 	ldr.w	fp, [sp, #412]	@ 0x19c
 800b6ca:	2500      	movs	r5, #0
 800b6cc:	4643      	mov	r3, r8
 800b6ce:	4652      	mov	r2, sl
 800b6d0:	4639      	mov	r1, r7
 800b6d2:	4638      	mov	r0, r7
 800b6d4:	9c65      	ldr	r4, [sp, #404]	@ 0x194
 800b6d6:	47a0      	blx	r4
 800b6d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6da:	9a68      	ldr	r2, [sp, #416]	@ 0x1a0
 800b6dc:	44d8      	add	r8, fp
 800b6de:	441f      	add	r7, r3
 800b6e0:	eba8 0309 	sub.w	r3, r8, r9
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	bfa8      	it	ge
 800b6e8:	46c8      	movge	r8, r9
 800b6ea:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800b6ec:	429f      	cmp	r7, r3
 800b6ee:	bf24      	itt	cs
 800b6f0:	9b23      	ldrcs	r3, [sp, #140]	@ 0x8c
 800b6f2:	18ff      	addcs	r7, r7, r3
 800b6f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6f6:	3501      	adds	r5, #1
 800b6f8:	42ab      	cmp	r3, r5
 800b6fa:	d1e7      	bne.n	800b6cc <forward_lite_conv2d_if32of32wf32_pool+0x518>
 800b6fc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b6fe:	971a      	str	r7, [sp, #104]	@ 0x68
 800b700:	46b3      	mov	fp, r6
 800b702:	4656      	mov	r6, sl
 800b704:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800b706:	f10b 0301 	add.w	r3, fp, #1
 800b70a:	fa0f fb83 	sxth.w	fp, r3
 800b70e:	455a      	cmp	r2, fp
 800b710:	f77f ae3a 	ble.w	800b388 <forward_lite_conv2d_if32of32wf32_pool+0x1d4>
 800b714:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b716:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b718:	4413      	add	r3, r2
 800b71a:	931d      	str	r3, [sp, #116]	@ 0x74
 800b71c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b71e:	1a9b      	subs	r3, r3, r2
 800b720:	931e      	str	r3, [sp, #120]	@ 0x78
 800b722:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800b724:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800b726:	4413      	add	r3, r2
 800b728:	931f      	str	r3, [sp, #124]	@ 0x7c
 800b72a:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800b72c:	42a3      	cmp	r3, r4
 800b72e:	f73f ae6c 	bgt.w	800b40a <forward_lite_conv2d_if32of32wf32_pool+0x256>
 800b732:	b045      	add	sp, #276	@ 0x114
 800b734:	ecbd 8b02 	vpop	{d8}
 800b738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b73c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b73e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800b740:	460e      	mov	r6, r1
 800b742:	440a      	add	r2, r1
 800b744:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800b746:	9111      	str	r1, [sp, #68]	@ 0x44
 800b748:	e6c5      	b.n	800b4d6 <forward_lite_conv2d_if32of32wf32_pool+0x322>
 800b74a:	eef0 6a48 	vmov.f32	s13, s16
 800b74e:	e6a4      	b.n	800b49a <forward_lite_conv2d_if32of32wf32_pool+0x2e6>
 800b750:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800b754:	9322      	str	r3, [sp, #136]	@ 0x88
 800b756:	e613      	b.n	800b380 <forward_lite_conv2d_if32of32wf32_pool+0x1cc>
 800b758:	2e00      	cmp	r6, #0
 800b75a:	dda9      	ble.n	800b6b0 <forward_lite_conv2d_if32of32wf32_pool+0x4fc>
 800b75c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b75e:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 800b760:	f8cd 80a8 	str.w	r8, [sp, #168]	@ 0xa8
 800b764:	fb02 f303 	mul.w	r3, r2, r3
 800b768:	9319      	str	r3, [sp, #100]	@ 0x64
 800b76a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b76c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800b76e:	9437      	str	r4, [sp, #220]	@ 0xdc
 800b770:	1898      	adds	r0, r3, r2
 800b772:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b774:	eb02 0a01 	add.w	sl, r2, r1
 800b778:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 800b77a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b77c:	9118      	str	r1, [sp, #96]	@ 0x60
 800b77e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b780:	2900      	cmp	r1, #0
 800b782:	f000 8119 	beq.w	800b9b8 <forward_lite_conv2d_if32of32wf32_pool+0x804>
 800b786:	ecf2 6a01 	vldmia	r2!, {s13}
 800b78a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b78c:	2900      	cmp	r1, #0
 800b78e:	f000 8100 	beq.w	800b992 <forward_lite_conv2d_if32of32wf32_pool+0x7de>
 800b792:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800b794:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800b796:	910d      	str	r1, [sp, #52]	@ 0x34
 800b798:	1865      	adds	r5, r4, r1
 800b79a:	e9cd 0a40 	strd	r0, sl, [sp, #256]	@ 0x100
 800b79e:	2100      	movs	r1, #0
 800b7a0:	469e      	mov	lr, r3
 800b7a2:	933f      	str	r3, [sp, #252]	@ 0xfc
 800b7a4:	f8dd 80ac 	ldr.w	r8, [sp, #172]	@ 0xac
 800b7a8:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	9238      	str	r2, [sp, #224]	@ 0xe0
 800b7b0:	4671      	mov	r1, lr
 800b7b2:	9642      	str	r6, [sp, #264]	@ 0x108
 800b7b4:	f8cd 9198 	str.w	r9, [sp, #408]	@ 0x198
 800b7b8:	f8cd b10c 	str.w	fp, [sp, #268]	@ 0x10c
 800b7bc:	469e      	mov	lr, r3
 800b7be:	f1b8 0f00 	cmp.w	r8, #0
 800b7c2:	f2c0 80f2 	blt.w	800b9aa <forward_lite_conv2d_if32of32wf32_pool+0x7f6>
 800b7c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7c8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b7ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800b7d0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800b7d2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b7d4:	fb03 2304 	mla	r3, r3, r4, r2
 800b7d8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b7da:	42ae      	cmp	r6, r5
 800b7dc:	bf94      	ite	ls
 800b7de:	ebc0 0006 	rsbls	r0, r0, r6
 800b7e2:	ebc0 0005 	rsbhi	r0, r0, r5
 800b7e6:	eba2 0b00 	sub.w	fp, r2, r0
 800b7ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b7ec:	2f00      	cmp	r7, #0
 800b7ee:	eba6 0a00 	sub.w	sl, r6, r0
 800b7f2:	eeb0 7a66 	vmov.f32	s14, s13
 800b7f6:	fb02 f000 	mul.w	r0, r2, r0
 800b7fa:	f340 80ad 	ble.w	800b958 <forward_lite_conv2d_if32of32wf32_pool+0x7a4>
 800b7fe:	f020 090f 	bic.w	r9, r0, #15
 800b802:	f109 3cff 	add.w	ip, r9, #4294967295
 800b806:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 800b80a:	e9cd 1815 	strd	r1, r8, [sp, #84]	@ 0x54
 800b80e:	f10c 0c01 	add.w	ip, ip, #1
 800b812:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b814:	f8cd e05c 	str.w	lr, [sp, #92]	@ 0x5c
 800b818:	fb04 fb0b 	mul.w	fp, r4, fp
 800b81c:	fb04 fa0a 	mul.w	sl, r4, sl
 800b820:	ea4f 168c 	mov.w	r6, ip, lsl #6
 800b824:	2400      	movs	r4, #0
 800b826:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800b82a:	9511      	str	r5, [sp, #68]	@ 0x44
 800b82c:	f1b9 0f00 	cmp.w	r9, #0
 800b830:	bfd8      	it	le
 800b832:	2100      	movle	r1, #0
 800b834:	dd72      	ble.n	800b91c <forward_lite_conv2d_if32of32wf32_pool+0x768>
 800b836:	f102 0540 	add.w	r5, r2, #64	@ 0x40
 800b83a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800b83e:	f04f 0e00 	mov.w	lr, #0
 800b842:	ed55 5a0f 	vldr	s11, [r5, #-60]	@ 0xffffffc4
 800b846:	ed51 7a0f 	vldr	s15, [r1, #-60]	@ 0xffffffc4
 800b84a:	ed11 5a10 	vldr	s10, [r1, #-64]	@ 0xffffffc0
 800b84e:	ed15 6a10 	vldr	s12, [r5, #-64]	@ 0xffffffc0
 800b852:	ed11 4a0d 	vldr	s8, [r1, #-52]	@ 0xffffffcc
 800b856:	ed55 4a0c 	vldr	s9, [r5, #-48]	@ 0xffffffd0
 800b85a:	ed55 2a0a 	vldr	s5, [r5, #-40]	@ 0xffffffd8
 800b85e:	ed11 3a0a 	vldr	s6, [r1, #-40]	@ 0xffffffd8
 800b862:	ed55 3a09 	vldr	s7, [r5, #-36]	@ 0xffffffdc
 800b866:	ed55 1a06 	vldr	s3, [r5, #-24]	@ 0xffffffe8
 800b86a:	ed11 1a06 	vldr	s2, [r1, #-24]	@ 0xffffffe8
 800b86e:	ed11 2a05 	vldr	s4, [r1, #-20]	@ 0xffffffec
 800b872:	ed51 0a01 	vldr	s1, [r1, #-4]
 800b876:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b87a:	ed55 5a0e 	vldr	s11, [r5, #-56]	@ 0xffffffc8
 800b87e:	eee5 7a06 	vfma.f32	s15, s10, s12
 800b882:	f10e 0e10 	add.w	lr, lr, #16
 800b886:	45ce      	cmp	lr, r9
 800b888:	ed11 5a0e 	vldr	s10, [r1, #-56]	@ 0xffffffc8
 800b88c:	ed15 6a0d 	vldr	s12, [r5, #-52]	@ 0xffffffcc
 800b890:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b894:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 800b898:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 800b89c:	ed11 5a1c 	vldr	s10, [r1, #-112]	@ 0xffffff90
 800b8a0:	ed55 5a1b 	vldr	s11, [r5, #-108]	@ 0xffffff94
 800b8a4:	eee4 7a06 	vfma.f32	s15, s8, s12
 800b8a8:	ed11 6a1b 	vldr	s12, [r1, #-108]	@ 0xffffff94
 800b8ac:	ed11 4a19 	vldr	s8, [r1, #-100]	@ 0xffffff9c
 800b8b0:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b8b4:	ed51 4a18 	vldr	s9, [r1, #-96]	@ 0xffffffa0
 800b8b8:	ed15 5a18 	vldr	s10, [r5, #-96]	@ 0xffffffa0
 800b8bc:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b8c0:	ed15 6a17 	vldr	s12, [r5, #-92]	@ 0xffffffa4
 800b8c4:	ed51 5a17 	vldr	s11, [r1, #-92]	@ 0xffffffa4
 800b8c8:	eee2 7a83 	vfma.f32	s15, s5, s6
 800b8cc:	ed55 2a15 	vldr	s5, [r5, #-84]	@ 0xffffffac
 800b8d0:	ed11 3a14 	vldr	s6, [r1, #-80]	@ 0xffffffb0
 800b8d4:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b8d8:	ed55 3a14 	vldr	s7, [r5, #-80]	@ 0xffffffb0
 800b8dc:	ed11 4a13 	vldr	s8, [r1, #-76]	@ 0xffffffb4
 800b8e0:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b8e4:	ed55 4a13 	vldr	s9, [r5, #-76]	@ 0xffffffb4
 800b8e8:	ed15 5a12 	vldr	s10, [r5, #-72]	@ 0xffffffb8
 800b8ec:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b8f0:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 800b8f4:	ed15 6a11 	vldr	s12, [r5, #-68]	@ 0xffffffbc
 800b8f8:	eee1 7a21 	vfma.f32	s15, s2, s3
 800b8fc:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b900:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b904:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b908:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b90c:	eee6 7a20 	vfma.f32	s15, s12, s1
 800b910:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b914:	db95      	blt.n	800b842 <forward_lite_conv2d_if32of32wf32_pool+0x68e>
 800b916:	4432      	add	r2, r6
 800b918:	4433      	add	r3, r6
 800b91a:	4661      	mov	r1, ip
 800b91c:	4288      	cmp	r0, r1
 800b91e:	dd10      	ble.n	800b942 <forward_lite_conv2d_if32of32wf32_pool+0x78e>
 800b920:	460d      	mov	r5, r1
 800b922:	4690      	mov	r8, r2
 800b924:	469e      	mov	lr, r3
 800b926:	ecbe 6a01 	vldmia	lr!, {s12}
 800b92a:	ecf8 7a01 	vldmia	r8!, {s15}
 800b92e:	3501      	adds	r5, #1
 800b930:	42a8      	cmp	r0, r5
 800b932:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b936:	d1f6      	bne.n	800b926 <forward_lite_conv2d_if32of32wf32_pool+0x772>
 800b938:	1a41      	subs	r1, r0, r1
 800b93a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800b93e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b942:	3401      	adds	r4, #1
 800b944:	42a7      	cmp	r7, r4
 800b946:	445a      	add	r2, fp
 800b948:	4453      	add	r3, sl
 800b94a:	f47f af6f 	bne.w	800b82c <forward_lite_conv2d_if32of32wf32_pool+0x678>
 800b94e:	e9dd 1815 	ldrd	r1, r8, [sp, #84]	@ 0x54
 800b952:	f8dd e05c 	ldr.w	lr, [sp, #92]	@ 0x5c
 800b956:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b958:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b95a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b95c:	ed81 7a00 	vstr	s14, [r1]
 800b960:	4411      	add	r1, r2
 800b962:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b964:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800b966:	1ad2      	subs	r2, r2, r3
 800b968:	4498      	add	r8, r3
 800b96a:	920d      	str	r2, [sp, #52]	@ 0x34
 800b96c:	1aed      	subs	r5, r5, r3
 800b96e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b970:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b972:	f10e 0e01 	add.w	lr, lr, #1
 800b976:	4402      	add	r2, r0
 800b978:	4573      	cmp	r3, lr
 800b97a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b97c:	f47f af1f 	bne.w	800b7be <forward_lite_conv2d_if32of32wf32_pool+0x60a>
 800b980:	e9dd 303f 	ldrd	r3, r0, [sp, #252]	@ 0xfc
 800b984:	e9dd a641 	ldrd	sl, r6, [sp, #260]	@ 0x104
 800b988:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 800b98a:	f8dd 9198 	ldr.w	r9, [sp, #408]	@ 0x198
 800b98e:	f8dd b10c 	ldr.w	fp, [sp, #268]	@ 0x10c
 800b992:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800b994:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 800b996:	3304      	adds	r3, #4
 800b998:	4421      	add	r1, r4
 800b99a:	4283      	cmp	r3, r0
 800b99c:	9118      	str	r1, [sp, #96]	@ 0x60
 800b99e:	f47f aeee 	bne.w	800b77e <forward_lite_conv2d_if32of32wf32_pool+0x5ca>
 800b9a2:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
 800b9a6:	9c37      	ldr	r4, [sp, #220]	@ 0xdc
 800b9a8:	e682      	b.n	800b6b0 <forward_lite_conv2d_if32of32wf32_pool+0x4fc>
 800b9aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b9ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	4413      	add	r3, r2
 800b9b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b9b4:	9211      	str	r2, [sp, #68]	@ 0x44
 800b9b6:	e70a      	b.n	800b7ce <forward_lite_conv2d_if32of32wf32_pool+0x61a>
 800b9b8:	eef0 6a48 	vmov.f32	s13, s16
 800b9bc:	e6e5      	b.n	800b78a <forward_lite_conv2d_if32of32wf32_pool+0x5d6>
 800b9be:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
 800b9c0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b9c2:	921b      	str	r2, [sp, #108]	@ 0x6c
 800b9c4:	e533      	b.n	800b42e <forward_lite_conv2d_if32of32wf32_pool+0x27a>
 800b9c6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b9c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b9ca:	440a      	add	r2, r1
 800b9cc:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800b9ce:	4291      	cmp	r1, r2
 800b9d0:	bf9c      	itt	ls
 800b9d2:	9923      	ldrls	r1, [sp, #140]	@ 0x8c
 800b9d4:	1852      	addls	r2, r2, r1
 800b9d6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b9d8:	3301      	adds	r3, #1
 800b9da:	4299      	cmp	r1, r3
 800b9dc:	d1f4      	bne.n	800b9c8 <forward_lite_conv2d_if32of32wf32_pool+0x814>
 800b9de:	921a      	str	r2, [sp, #104]	@ 0x68
 800b9e0:	e690      	b.n	800b704 <forward_lite_conv2d_if32of32wf32_pool+0x550>
 800b9e2:	bf00      	nop

0800b9e4 <forward_lite_nl_softmax_if32of32_kernel>:
 800b9e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e8:	ed2d 8b02 	vpush	{d8}
 800b9ec:	2a01      	cmp	r2, #1
 800b9ee:	ed91 8a00 	vldr	s16, [r1]
 800b9f2:	460c      	mov	r4, r1
 800b9f4:	4690      	mov	r8, r2
 800b9f6:	4681      	mov	r9, r0
 800b9f8:	469a      	mov	sl, r3
 800b9fa:	d964      	bls.n	800bac6 <forward_lite_nl_softmax_if32of32_kernel+0xe2>
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d14e      	bne.n	800ba9e <forward_lite_nl_softmax_if32of32_kernel+0xba>
 800ba00:	1d0b      	adds	r3, r1, #4
 800ba02:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ba06:	ecf3 7a01 	vldmia	r3!, {s15}
 800ba0a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ba0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba12:	bfb8      	it	lt
 800ba14:	eeb0 8a67 	vmovlt.f32	s16, s15
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d1f4      	bne.n	800ba06 <forward_lite_nl_softmax_if32of32_kernel+0x22>
 800ba1c:	f04f 0b04 	mov.w	fp, #4
 800ba20:	eddf 8a2b 	vldr	s17, [pc, #172]	@ 800bad0 <forward_lite_nl_softmax_if32of32_kernel+0xec>
 800ba24:	464f      	mov	r7, r9
 800ba26:	464e      	mov	r6, r9
 800ba28:	2500      	movs	r5, #0
 800ba2a:	ed94 0a00 	vldr	s0, [r4]
 800ba2e:	ee30 0a48 	vsub.f32	s0, s0, s16
 800ba32:	f003 ff35 	bl	800f8a0 <expf>
 800ba36:	462b      	mov	r3, r5
 800ba38:	3501      	adds	r5, #1
 800ba3a:	45a8      	cmp	r8, r5
 800ba3c:	ed86 0a00 	vstr	s0, [r6]
 800ba40:	ee78 8a80 	vadd.f32	s17, s17, s0
 800ba44:	445c      	add	r4, fp
 800ba46:	445e      	add	r6, fp
 800ba48:	d1ef      	bne.n	800ba2a <forward_lite_nl_softmax_if32of32_kernel+0x46>
 800ba4a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ba4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba52:	d010      	beq.n	800ba76 <forward_lite_nl_softmax_if32of32_kernel+0x92>
 800ba54:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ba58:	f1ba 0f01 	cmp.w	sl, #1
 800ba5c:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800ba60:	d10d      	bne.n	800ba7e <forward_lite_nl_softmax_if32of32_kernel+0x9a>
 800ba62:	eb09 0988 	add.w	r9, r9, r8, lsl #2
 800ba66:	edd7 7a00 	vldr	s15, [r7]
 800ba6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba6e:	ece7 7a01 	vstmia	r7!, {s15}
 800ba72:	45b9      	cmp	r9, r7
 800ba74:	d1f7      	bne.n	800ba66 <forward_lite_nl_softmax_if32of32_kernel+0x82>
 800ba76:	ecbd 8b02 	vpop	{d8}
 800ba7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba7e:	2100      	movs	r1, #0
 800ba80:	edd7 7a00 	vldr	s15, [r7]
 800ba84:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba88:	428b      	cmp	r3, r1
 800ba8a:	edc7 7a00 	vstr	s15, [r7]
 800ba8e:	f101 0101 	add.w	r1, r1, #1
 800ba92:	445f      	add	r7, fp
 800ba94:	d1f4      	bne.n	800ba80 <forward_lite_nl_softmax_if32of32_kernel+0x9c>
 800ba96:	ecbd 8b02 	vpop	{d8}
 800ba9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba9e:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800baa2:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800baa6:	2301      	movs	r3, #1
 800baa8:	edd2 7a00 	vldr	s15, [r2]
 800baac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bab4:	f103 0301 	add.w	r3, r3, #1
 800bab8:	bfb8      	it	lt
 800baba:	eeb0 8a67 	vmovlt.f32	s16, s15
 800babe:	4598      	cmp	r8, r3
 800bac0:	445a      	add	r2, fp
 800bac2:	d1f1      	bne.n	800baa8 <forward_lite_nl_softmax_if32of32_kernel+0xc4>
 800bac4:	e7ac      	b.n	800ba20 <forward_lite_nl_softmax_if32of32_kernel+0x3c>
 800bac6:	2a00      	cmp	r2, #0
 800bac8:	d0d5      	beq.n	800ba76 <forward_lite_nl_softmax_if32of32_kernel+0x92>
 800baca:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800bace:	e7a7      	b.n	800ba20 <forward_lite_nl_softmax_if32of32_kernel+0x3c>
 800bad0:	00000000 	.word	0x00000000

0800bad4 <forward_lite_nl_relu_generic_if32of32_kernel>:
 800bad4:	b500      	push	{lr}
 800bad6:	edd3 6a02 	vldr	s13, [r3, #8]
 800bada:	ed93 7a00 	vldr	s14, [r3]
 800bade:	ed93 6a01 	vldr	s12, [r3, #4]
 800bae2:	f102 4c80 	add.w	ip, r2, #1073741824	@ 0x40000000
 800bae6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800baea:	f10c 3cff 	add.w	ip, ip, #4294967295
 800baee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf2:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
 800baf6:	eb01 028c 	add.w	r2, r1, ip, lsl #2
 800bafa:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800bafe:	d422      	bmi.n	800bb46 <forward_lite_nl_relu_generic_if32of32_kernel+0x72>
 800bb00:	428a      	cmp	r2, r1
 800bb02:	d31e      	bcc.n	800bb42 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 800bb04:	1d13      	adds	r3, r2, #4
 800bb06:	3004      	adds	r0, #4
 800bb08:	eba2 020e 	sub.w	r2, r2, lr
 800bb0c:	e00c      	b.n	800bb28 <forward_lite_nl_relu_generic_if32of32_kernel+0x54>
 800bb0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bb12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb16:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800bb1a:	db01      	blt.n	800bb20 <forward_lite_nl_relu_generic_if32of32_kernel+0x4c>
 800bb1c:	ee65 7a86 	vmul.f32	s15, s11, s12
 800bb20:	4293      	cmp	r3, r2
 800bb22:	ed60 7a01 	vstmdb	r0!, {s15}
 800bb26:	d00c      	beq.n	800bb42 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 800bb28:	ed73 7a01 	vldmdb	r3!, {s15}
 800bb2c:	eef4 6ae7 	vcmpe.f32	s13, s15
 800bb30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb34:	daeb      	bge.n	800bb0e <forward_lite_nl_relu_generic_if32of32_kernel+0x3a>
 800bb36:	eef0 7a66 	vmov.f32	s15, s13
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	ed60 7a01 	vstmdb	r0!, {s15}
 800bb40:	d1f2      	bne.n	800bb28 <forward_lite_nl_relu_generic_if32of32_kernel+0x54>
 800bb42:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb46:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800bb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb4e:	d015      	beq.n	800bb7c <forward_lite_nl_relu_generic_if32of32_kernel+0xa8>
 800bb50:	428a      	cmp	r2, r1
 800bb52:	d3f6      	bcc.n	800bb42 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 800bb54:	1d13      	adds	r3, r2, #4
 800bb56:	3004      	adds	r0, #4
 800bb58:	eba2 020e 	sub.w	r2, r2, lr
 800bb5c:	ed73 7a01 	vldmdb	r3!, {s15}
 800bb60:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800bb64:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb6c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800bb70:	d822      	bhi.n	800bbb8 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 800bb72:	4293      	cmp	r3, r2
 800bb74:	ed60 6a01 	vstmdb	r0!, {s13}
 800bb78:	d1f0      	bne.n	800bb5c <forward_lite_nl_relu_generic_if32of32_kernel+0x88>
 800bb7a:	e7e2      	b.n	800bb42 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 800bb7c:	428a      	cmp	r2, r1
 800bb7e:	d3e0      	bcc.n	800bb42 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 800bb80:	1d13      	adds	r3, r2, #4
 800bb82:	2100      	movs	r1, #0
 800bb84:	3004      	adds	r0, #4
 800bb86:	eba2 020e 	sub.w	r2, r2, lr
 800bb8a:	ed73 7a01 	vldmdb	r3!, {s15}
 800bb8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb96:	dd0a      	ble.n	800bbae <forward_lite_nl_relu_generic_if32of32_kernel+0xda>
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	ed60 7a01 	vstmdb	r0!, {s15}
 800bb9e:	d0d0      	beq.n	800bb42 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 800bba0:	ed73 7a01 	vldmdb	r3!, {s15}
 800bba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbac:	dcf4      	bgt.n	800bb98 <forward_lite_nl_relu_generic_if32of32_kernel+0xc4>
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	f840 1d04 	str.w	r1, [r0, #-4]!
 800bbb4:	d1e9      	bne.n	800bb8a <forward_lite_nl_relu_generic_if32of32_kernel+0xb6>
 800bbb6:	e7c4      	b.n	800bb42 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	ed60 7a01 	vstmdb	r0!, {s15}
 800bbbe:	d1cd      	bne.n	800bb5c <forward_lite_nl_relu_generic_if32of32_kernel+0x88>
 800bbc0:	e7bf      	b.n	800bb42 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 800bbc2:	bf00      	nop

0800bbc4 <pool_func_mp_array_f32>:
 800bbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc8:	b091      	sub	sp, #68	@ 0x44
 800bbca:	468b      	mov	fp, r1
 800bbcc:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 800bbd0:	9104      	str	r1, [sp, #16]
 800bbd2:	4692      	mov	sl, r2
 800bbd4:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 800bbd8:	f8bd 2074 	ldrh.w	r2, [sp, #116]	@ 0x74
 800bbdc:	9105      	str	r1, [sp, #20]
 800bbde:	4698      	mov	r8, r3
 800bbe0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 800bbe4:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 800bbe8:	f8bd 4068 	ldrh.w	r4, [sp, #104]	@ 0x68
 800bbec:	9101      	str	r1, [sp, #4]
 800bbee:	ea52 0c03 	orrs.w	ip, r2, r3
 800bbf2:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 800bbf6:	9402      	str	r4, [sp, #8]
 800bbf8:	4681      	mov	r9, r0
 800bbfa:	9103      	str	r1, [sp, #12]
 800bbfc:	f8bd 006c 	ldrh.w	r0, [sp, #108]	@ 0x6c
 800bc00:	d10a      	bne.n	800bc18 <pool_func_mp_array_f32+0x54>
 800bc02:	9e01      	ldr	r6, [sp, #4]
 800bc04:	9f04      	ldr	r7, [sp, #16]
 800bc06:	eba4 040b 	sub.w	r4, r4, fp
 800bc0a:	3c01      	subs	r4, #1
 800bc0c:	1e71      	subs	r1, r6, #1
 800bc0e:	fb11 4107 	smlabb	r1, r1, r7, r4
 800bc12:	040c      	lsls	r4, r1, #16
 800bc14:	f100 8084 	bmi.w	800bd20 <pool_func_mp_array_f32+0x15c>
 800bc18:	9903      	ldr	r1, [sp, #12]
 800bc1a:	2900      	cmp	r1, #0
 800bc1c:	d07d      	beq.n	800bd1a <pool_func_mp_array_f32+0x156>
 800bc1e:	9901      	ldr	r1, [sp, #4]
 800bc20:	2900      	cmp	r1, #0
 800bc22:	d07a      	beq.n	800bd1a <pool_func_mp_array_f32+0x156>
 800bc24:	f1b8 0f00 	cmp.w	r8, #0
 800bc28:	d077      	beq.n	800bd1a <pool_func_mp_array_f32+0x156>
 800bc2a:	f1b8 0f01 	cmp.w	r8, #1
 800bc2e:	f040 80e8 	bne.w	800be02 <pool_func_mp_array_f32+0x23e>
 800bc32:	9902      	ldr	r1, [sp, #8]
 800bc34:	1a82      	subs	r2, r0, r2
 800bc36:	1ac9      	subs	r1, r1, r3
 800bc38:	b292      	uxth	r2, r2
 800bc3a:	425b      	negs	r3, r3
 800bc3c:	4617      	mov	r7, r2
 800bc3e:	b29c      	uxth	r4, r3
 800bc40:	4605      	mov	r5, r0
 800bc42:	2300      	movs	r3, #0
 800bc44:	9804      	ldr	r0, [sp, #16]
 800bc46:	461e      	mov	r6, r3
 800bc48:	461a      	mov	r2, r3
 800bc4a:	b289      	uxth	r1, r1
 800bc4c:	463b      	mov	r3, r7
 800bc4e:	9f01      	ldr	r7, [sp, #4]
 800bc50:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bc52:	fb07 f606 	mul.w	r6, r7, r6
 800bc56:	9604      	str	r6, [sp, #16]
 800bc58:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800bc5c:	1b5e      	subs	r6, r3, r5
 800bc5e:	e9cd 5109 	strd	r5, r1, [sp, #36]	@ 0x24
 800bc62:	b236      	sxth	r6, r6
 800bc64:	2700      	movs	r7, #0
 800bc66:	9606      	str	r6, [sp, #24]
 800bc68:	4688      	mov	r8, r1
 800bc6a:	46a6      	mov	lr, r4
 800bc6c:	b21e      	sxth	r6, r3
 800bc6e:	46bc      	mov	ip, r7
 800bc70:	9a06      	ldr	r2, [sp, #24]
 800bc72:	9b04      	ldr	r3, [sp, #16]
 800bc74:	eddf 7aaa 	vldr	s15, [pc, #680]	@ 800bf20 <pool_func_mp_array_f32+0x35c>
 800bc78:	42b2      	cmp	r2, r6
 800bc7a:	eb0c 0403 	add.w	r4, ip, r3
 800bc7e:	fa0f f58e 	sxth.w	r5, lr
 800bc82:	fa0f f188 	sxth.w	r1, r8
 800bc86:	da29      	bge.n	800bcdc <pool_func_mp_array_f32+0x118>
 800bc88:	ea01 7ce1 	and.w	ip, r1, r1, asr #31
 800bc8c:	9702      	str	r7, [sp, #8]
 800bc8e:	428d      	cmp	r5, r1
 800bc90:	da1f      	bge.n	800bcd2 <pool_func_mp_array_f32+0x10e>
 800bc92:	2a00      	cmp	r2, #0
 800bc94:	db1d      	blt.n	800bcd2 <pool_func_mp_array_f32+0x10e>
 800bc96:	4552      	cmp	r2, sl
 800bc98:	da1b      	bge.n	800bcd2 <pool_func_mp_array_f32+0x10e>
 800bc9a:	2d00      	cmp	r5, #0
 800bc9c:	462b      	mov	r3, r5
 800bc9e:	da05      	bge.n	800bcac <pool_func_mp_array_f32+0xe8>
 800bca0:	3301      	adds	r3, #1
 800bca2:	b21b      	sxth	r3, r3
 800bca4:	459c      	cmp	ip, r3
 800bca6:	dcfb      	bgt.n	800bca0 <pool_func_mp_array_f32+0xdc>
 800bca8:	428b      	cmp	r3, r1
 800bcaa:	da12      	bge.n	800bcd2 <pool_func_mp_array_f32+0x10e>
 800bcac:	fb0b 3702 	mla	r7, fp, r2, r3
 800bcb0:	455b      	cmp	r3, fp
 800bcb2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800bcb6:	da08      	bge.n	800bcca <pool_func_mp_array_f32+0x106>
 800bcb8:	ed97 7a00 	vldr	s14, [r7]
 800bcbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bcc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcc4:	bfb8      	it	lt
 800bcc6:	eef0 7a47 	vmovlt.f32	s15, s14
 800bcca:	3301      	adds	r3, #1
 800bccc:	b21b      	sxth	r3, r3
 800bcce:	428b      	cmp	r3, r1
 800bcd0:	dbec      	blt.n	800bcac <pool_func_mp_array_f32+0xe8>
 800bcd2:	3201      	adds	r2, #1
 800bcd4:	b212      	sxth	r2, r2
 800bcd6:	42b2      	cmp	r2, r6
 800bcd8:	dbd9      	blt.n	800bc8e <pool_func_mp_array_f32+0xca>
 800bcda:	9f02      	ldr	r7, [sp, #8]
 800bcdc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bcde:	3701      	adds	r7, #1
 800bce0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bce4:	9b01      	ldr	r3, [sp, #4]
 800bce6:	edc4 7a00 	vstr	s15, [r4]
 800bcea:	b23f      	sxth	r7, r7
 800bcec:	4480      	add	r8, r0
 800bcee:	4486      	add	lr, r0
 800bcf0:	42bb      	cmp	r3, r7
 800bcf2:	fa1f f888 	uxth.w	r8, r8
 800bcf6:	fa1f fe8e 	uxth.w	lr, lr
 800bcfa:	46bc      	mov	ip, r7
 800bcfc:	dcb8      	bgt.n	800bc70 <pool_func_mp_array_f32+0xac>
 800bcfe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800bd02:	9e05      	ldr	r6, [sp, #20]
 800bd04:	9f03      	ldr	r7, [sp, #12]
 800bd06:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800bd08:	3201      	adds	r2, #1
 800bd0a:	b212      	sxth	r2, r2
 800bd0c:	4433      	add	r3, r6
 800bd0e:	4297      	cmp	r7, r2
 800bd10:	e9dd 5109 	ldrd	r5, r1, [sp, #36]	@ 0x24
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	4616      	mov	r6, r2
 800bd18:	dc99      	bgt.n	800bc4e <pool_func_mp_array_f32+0x8a>
 800bd1a:	b011      	add	sp, #68	@ 0x44
 800bd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd20:	9f03      	ldr	r7, [sp, #12]
 800bd22:	9d05      	ldr	r5, [sp, #20]
 800bd24:	eba0 040a 	sub.w	r4, r0, sl
 800bd28:	3c01      	subs	r4, #1
 800bd2a:	1e79      	subs	r1, r7, #1
 800bd2c:	fb11 4105 	smlabb	r1, r1, r5, r4
 800bd30:	0409      	lsls	r1, r1, #16
 800bd32:	f57f af71 	bpl.w	800bc18 <pool_func_mp_array_f32+0x54>
 800bd36:	2f00      	cmp	r7, #0
 800bd38:	d0ef      	beq.n	800bd1a <pool_func_mp_array_f32+0x156>
 800bd3a:	2e00      	cmp	r6, #0
 800bd3c:	d0ed      	beq.n	800bd1a <pool_func_mp_array_f32+0x156>
 800bd3e:	f1b8 0f00 	cmp.w	r8, #0
 800bd42:	d0ea      	beq.n	800bd1a <pool_func_mp_array_f32+0x156>
 800bd44:	f1b8 0f01 	cmp.w	r8, #1
 800bd48:	f040 80ec 	bne.w	800bf24 <pool_func_mp_array_f32+0x360>
 800bd4c:	462e      	mov	r6, r5
 800bd4e:	4663      	mov	r3, ip
 800bd50:	4662      	mov	r2, ip
 800bd52:	46e6      	mov	lr, ip
 800bd54:	9901      	ldr	r1, [sp, #4]
 800bd56:	9c02      	ldr	r4, [sp, #8]
 800bd58:	9207      	str	r2, [sp, #28]
 800bd5a:	fb0e f101 	mul.w	r1, lr, r1
 800bd5e:	2500      	movs	r5, #0
 800bd60:	9105      	str	r1, [sp, #20]
 800bd62:	fa0f f880 	sxth.w	r8, r0
 800bd66:	b219      	sxth	r1, r3
 800bd68:	46aa      	mov	sl, r5
 800bd6a:	46ae      	mov	lr, r5
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	9b05      	ldr	r3, [sp, #20]
 800bd70:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 800bf20 <pool_func_mp_array_f32+0x35c>
 800bd74:	4473      	add	r3, lr
 800bd76:	4541      	cmp	r1, r8
 800bd78:	9306      	str	r3, [sp, #24]
 800bd7a:	fa0f fe85 	sxth.w	lr, r5
 800bd7e:	b227      	sxth	r7, r4
 800bd80:	da1f      	bge.n	800bdc2 <pool_func_mp_array_f32+0x1fe>
 800bd82:	e9cd 1a08 	strd	r1, sl, [sp, #32]
 800bd86:	468c      	mov	ip, r1
 800bd88:	45be      	cmp	lr, r7
 800bd8a:	da12      	bge.n	800bdb2 <pool_func_mp_array_f32+0x1ee>
 800bd8c:	fb0c e10b 	mla	r1, ip, fp, lr
 800bd90:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800bd94:	4673      	mov	r3, lr
 800bd96:	ecb1 7a01 	vldmia	r1!, {s14}
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda4:	fa0f fa83 	sxth.w	sl, r3
 800bda8:	bfb8      	it	lt
 800bdaa:	eef0 7a47 	vmovlt.f32	s15, s14
 800bdae:	45ba      	cmp	sl, r7
 800bdb0:	dbf1      	blt.n	800bd96 <pool_func_mp_array_f32+0x1d2>
 800bdb2:	f10c 0c01 	add.w	ip, ip, #1
 800bdb6:	fa0f fc8c 	sxth.w	ip, ip
 800bdba:	45c4      	cmp	ip, r8
 800bdbc:	dbe4      	blt.n	800bd88 <pool_func_mp_array_f32+0x1c4>
 800bdbe:	e9dd 1a08 	ldrd	r1, sl, [sp, #32]
 800bdc2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bdc4:	9f06      	ldr	r7, [sp, #24]
 800bdc6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bdca:	9b04      	ldr	r3, [sp, #16]
 800bdcc:	edc7 7a00 	vstr	s15, [r7]
 800bdd0:	441c      	add	r4, r3
 800bdd2:	441d      	add	r5, r3
 800bdd4:	f10a 0a01 	add.w	sl, sl, #1
 800bdd8:	9b01      	ldr	r3, [sp, #4]
 800bdda:	fa0f fa8a 	sxth.w	sl, sl
 800bdde:	4553      	cmp	r3, sl
 800bde0:	b2a4      	uxth	r4, r4
 800bde2:	b2ad      	uxth	r5, r5
 800bde4:	46d6      	mov	lr, sl
 800bde6:	dcc2      	bgt.n	800bd6e <pool_func_mp_array_f32+0x1aa>
 800bde8:	4613      	mov	r3, r2
 800bdea:	9a07      	ldr	r2, [sp, #28]
 800bdec:	9903      	ldr	r1, [sp, #12]
 800bdee:	3201      	adds	r2, #1
 800bdf0:	b212      	sxth	r2, r2
 800bdf2:	4430      	add	r0, r6
 800bdf4:	4433      	add	r3, r6
 800bdf6:	4291      	cmp	r1, r2
 800bdf8:	b280      	uxth	r0, r0
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	4696      	mov	lr, r2
 800bdfe:	dca9      	bgt.n	800bd54 <pool_func_mp_array_f32+0x190>
 800be00:	e78b      	b.n	800bd1a <pool_func_mp_array_f32+0x156>
 800be02:	9902      	ldr	r1, [sp, #8]
 800be04:	1a80      	subs	r0, r0, r2
 800be06:	1ac9      	subs	r1, r1, r3
 800be08:	4252      	negs	r2, r2
 800be0a:	425b      	negs	r3, r3
 800be0c:	b280      	uxth	r0, r0
 800be0e:	fa1f fc82 	uxth.w	ip, r2
 800be12:	fa1f fe81 	uxth.w	lr, r1
 800be16:	2100      	movs	r1, #0
 800be18:	b29e      	uxth	r6, r3
 800be1a:	4602      	mov	r2, r0
 800be1c:	460b      	mov	r3, r1
 800be1e:	4660      	mov	r0, ip
 800be20:	9c01      	ldr	r4, [sp, #4]
 800be22:	f8cd e03c 	str.w	lr, [sp, #60]	@ 0x3c
 800be26:	fb03 f304 	mul.w	r3, r3, r4
 800be2a:	e9cd 200d 	strd	r2, r0, [sp, #52]	@ 0x34
 800be2e:	b204      	sxth	r4, r0
 800be30:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be32:	2300      	movs	r3, #0
 800be34:	e9cd e606 	strd	lr, r6, [sp, #24]
 800be38:	9409      	str	r4, [sp, #36]	@ 0x24
 800be3a:	fa0f fc82 	sxth.w	ip, r2
 800be3e:	461c      	mov	r4, r3
 800be40:	910c      	str	r1, [sp, #48]	@ 0x30
 800be42:	930a      	str	r3, [sp, #40]	@ 0x28
 800be44:	46b6      	mov	lr, r6
 800be46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be48:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 800be4c:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
 800be50:	441c      	add	r4, r3
 800be52:	fb08 f104 	mul.w	r1, r8, r4
 800be56:	2400      	movs	r4, #0
 800be58:	4625      	mov	r5, r4
 800be5a:	ea00 77e0 	and.w	r7, r0, r0, asr #31
 800be5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be60:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 800bf20 <pool_func_mp_array_f32+0x35c>
 800be64:	4562      	cmp	r2, ip
 800be66:	da2b      	bge.n	800bec0 <pool_func_mp_array_f32+0x2fc>
 800be68:	9108      	str	r1, [sp, #32]
 800be6a:	4286      	cmp	r6, r0
 800be6c:	da23      	bge.n	800beb6 <pool_func_mp_array_f32+0x2f2>
 800be6e:	2a00      	cmp	r2, #0
 800be70:	db21      	blt.n	800beb6 <pool_func_mp_array_f32+0x2f2>
 800be72:	4552      	cmp	r2, sl
 800be74:	da1f      	bge.n	800beb6 <pool_func_mp_array_f32+0x2f2>
 800be76:	2e00      	cmp	r6, #0
 800be78:	4633      	mov	r3, r6
 800be7a:	da05      	bge.n	800be88 <pool_func_mp_array_f32+0x2c4>
 800be7c:	3301      	adds	r3, #1
 800be7e:	b21b      	sxth	r3, r3
 800be80:	42bb      	cmp	r3, r7
 800be82:	dbfb      	blt.n	800be7c <pool_func_mp_array_f32+0x2b8>
 800be84:	4283      	cmp	r3, r0
 800be86:	da16      	bge.n	800beb6 <pool_func_mp_array_f32+0x2f2>
 800be88:	9402      	str	r4, [sp, #8]
 800be8a:	fb0b 3102 	mla	r1, fp, r2, r3
 800be8e:	fb08 5101 	mla	r1, r8, r1, r5
 800be92:	1c5c      	adds	r4, r3, #1
 800be94:	459b      	cmp	fp, r3
 800be96:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 800be9a:	b223      	sxth	r3, r4
 800be9c:	dd08      	ble.n	800beb0 <pool_func_mp_array_f32+0x2ec>
 800be9e:	ed91 7a00 	vldr	s14, [r1]
 800bea2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beaa:	bfb8      	it	lt
 800beac:	eef0 7a47 	vmovlt.f32	s15, s14
 800beb0:	4283      	cmp	r3, r0
 800beb2:	dbea      	blt.n	800be8a <pool_func_mp_array_f32+0x2c6>
 800beb4:	9c02      	ldr	r4, [sp, #8]
 800beb6:	3201      	adds	r2, #1
 800beb8:	b212      	sxth	r2, r2
 800beba:	4562      	cmp	r2, ip
 800bebc:	dbd5      	blt.n	800be6a <pool_func_mp_array_f32+0x2a6>
 800bebe:	9908      	ldr	r1, [sp, #32]
 800bec0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bec2:	3401      	adds	r4, #1
 800bec4:	b224      	sxth	r4, r4
 800bec6:	440d      	add	r5, r1
 800bec8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800becc:	4544      	cmp	r4, r8
 800bece:	edc5 7a00 	vstr	s15, [r5]
 800bed2:	4625      	mov	r5, r4
 800bed4:	dbc3      	blt.n	800be5e <pool_func_mp_array_f32+0x29a>
 800bed6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bed8:	9a04      	ldr	r2, [sp, #16]
 800beda:	9c06      	ldr	r4, [sp, #24]
 800bedc:	3001      	adds	r0, #1
 800bede:	b203      	sxth	r3, r0
 800bee0:	9807      	ldr	r0, [sp, #28]
 800bee2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bee4:	4414      	add	r4, r2
 800bee6:	4410      	add	r0, r2
 800bee8:	b2a2      	uxth	r2, r4
 800beea:	9206      	str	r2, [sp, #24]
 800beec:	b282      	uxth	r2, r0
 800beee:	9207      	str	r2, [sp, #28]
 800bef0:	9a01      	ldr	r2, [sp, #4]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	461c      	mov	r4, r3
 800bef6:	dca6      	bgt.n	800be46 <pool_func_mp_array_f32+0x282>
 800bef8:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 800befc:	1c4b      	adds	r3, r1, #1
 800befe:	b219      	sxth	r1, r3
 800bf00:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800bf02:	9b05      	ldr	r3, [sp, #20]
 800bf04:	9c03      	ldr	r4, [sp, #12]
 800bf06:	441a      	add	r2, r3
 800bf08:	428c      	cmp	r4, r1
 800bf0a:	4403      	add	r3, r0
 800bf0c:	4676      	mov	r6, lr
 800bf0e:	b298      	uxth	r0, r3
 800bf10:	f8dd e03c 	ldr.w	lr, [sp, #60]	@ 0x3c
 800bf14:	b292      	uxth	r2, r2
 800bf16:	460b      	mov	r3, r1
 800bf18:	dc82      	bgt.n	800be20 <pool_func_mp_array_f32+0x25c>
 800bf1a:	b011      	add	sp, #68	@ 0x44
 800bf1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf20:	cf000000 	.word	0xcf000000
 800bf24:	462c      	mov	r4, r5
 800bf26:	4667      	mov	r7, ip
 800bf28:	4665      	mov	r5, ip
 800bf2a:	4663      	mov	r3, ip
 800bf2c:	ea4f 0e88 	mov.w	lr, r8, lsl #2
 800bf30:	46cc      	mov	ip, r9
 800bf32:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800bf36:	9a01      	ldr	r2, [sp, #4]
 800bf38:	970a      	str	r7, [sp, #40]	@ 0x28
 800bf3a:	fb03 f902 	mul.w	r9, r3, r2
 800bf3e:	b22b      	sxth	r3, r5
 800bf40:	9308      	str	r3, [sp, #32]
 800bf42:	b203      	sxth	r3, r0
 800bf44:	2200      	movs	r2, #0
 800bf46:	9305      	str	r3, [sp, #20]
 800bf48:	462e      	mov	r6, r5
 800bf4a:	9b02      	ldr	r3, [sp, #8]
 800bf4c:	4625      	mov	r5, r4
 800bf4e:	4601      	mov	r1, r0
 800bf50:	4693      	mov	fp, r2
 800bf52:	4614      	mov	r4, r2
 800bf54:	4628      	mov	r0, r5
 800bf56:	444c      	add	r4, r9
 800bf58:	fb08 f404 	mul.w	r4, r8, r4
 800bf5c:	9407      	str	r4, [sp, #28]
 800bf5e:	b21d      	sxth	r5, r3
 800bf60:	2400      	movs	r4, #0
 800bf62:	e9cd 9b0b 	strd	r9, fp, [sp, #44]	@ 0x2c
 800bf66:	b217      	sxth	r7, r2
 800bf68:	46a2      	mov	sl, r4
 800bf6a:	4691      	mov	r9, r2
 800bf6c:	9506      	str	r5, [sp, #24]
 800bf6e:	9a08      	ldr	r2, [sp, #32]
 800bf70:	9d05      	ldr	r5, [sp, #20]
 800bf72:	ed5f 7a15 	vldr	s15, [pc, #-84]	@ 800bf20 <pool_func_mp_array_f32+0x35c>
 800bf76:	42aa      	cmp	r2, r5
 800bf78:	da2a      	bge.n	800bfd0 <pool_func_mp_array_f32+0x40c>
 800bf7a:	9d06      	ldr	r5, [sp, #24]
 800bf7c:	940d      	str	r4, [sp, #52]	@ 0x34
 800bf7e:	4693      	mov	fp, r2
 800bf80:	461c      	mov	r4, r3
 800bf82:	42af      	cmp	r7, r5
 800bf84:	da1a      	bge.n	800bfbc <pool_func_mp_array_f32+0x3f8>
 800bf86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf88:	f8cd a018 	str.w	sl, [sp, #24]
 800bf8c:	fb03 730b 	mla	r3, r3, fp, r7
 800bf90:	fb08 a303 	mla	r3, r8, r3, sl
 800bf94:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800bf98:	463a      	mov	r2, r7
 800bf9a:	ed93 7a00 	vldr	s14, [r3]
 800bf9e:	3201      	adds	r2, #1
 800bfa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bfa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfa8:	fa0f fa82 	sxth.w	sl, r2
 800bfac:	bfb8      	it	lt
 800bfae:	eef0 7a47 	vmovlt.f32	s15, s14
 800bfb2:	45aa      	cmp	sl, r5
 800bfb4:	4473      	add	r3, lr
 800bfb6:	dbf0      	blt.n	800bf9a <pool_func_mp_array_f32+0x3d6>
 800bfb8:	f8dd a018 	ldr.w	sl, [sp, #24]
 800bfbc:	9b05      	ldr	r3, [sp, #20]
 800bfbe:	f10b 0b01 	add.w	fp, fp, #1
 800bfc2:	fa0f fb8b 	sxth.w	fp, fp
 800bfc6:	459b      	cmp	fp, r3
 800bfc8:	dbdb      	blt.n	800bf82 <pool_func_mp_array_f32+0x3be>
 800bfca:	4623      	mov	r3, r4
 800bfcc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800bfce:	9506      	str	r5, [sp, #24]
 800bfd0:	9a07      	ldr	r2, [sp, #28]
 800bfd2:	3401      	adds	r4, #1
 800bfd4:	4492      	add	sl, r2
 800bfd6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bfd8:	b224      	sxth	r4, r4
 800bfda:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800bfde:	4544      	cmp	r4, r8
 800bfe0:	edca 7a00 	vstr	s15, [sl]
 800bfe4:	46a2      	mov	sl, r4
 800bfe6:	dbc2      	blt.n	800bf6e <pool_func_mp_array_f32+0x3aa>
 800bfe8:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 800bfec:	9c04      	ldr	r4, [sp, #16]
 800bfee:	9d01      	ldr	r5, [sp, #4]
 800bff0:	f10b 0b01 	add.w	fp, fp, #1
 800bff4:	464a      	mov	r2, r9
 800bff6:	fa0f fb8b 	sxth.w	fp, fp
 800bffa:	4423      	add	r3, r4
 800bffc:	4422      	add	r2, r4
 800bffe:	455d      	cmp	r5, fp
 800c000:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800c004:	b29b      	uxth	r3, r3
 800c006:	b292      	uxth	r2, r2
 800c008:	465c      	mov	r4, fp
 800c00a:	dca4      	bgt.n	800bf56 <pool_func_mp_array_f32+0x392>
 800c00c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800c00e:	9a03      	ldr	r2, [sp, #12]
 800c010:	3701      	adds	r7, #1
 800c012:	4604      	mov	r4, r0
 800c014:	b23f      	sxth	r7, r7
 800c016:	4635      	mov	r5, r6
 800c018:	4608      	mov	r0, r1
 800c01a:	4420      	add	r0, r4
 800c01c:	4425      	add	r5, r4
 800c01e:	42ba      	cmp	r2, r7
 800c020:	b280      	uxth	r0, r0
 800c022:	b2ad      	uxth	r5, r5
 800c024:	463b      	mov	r3, r7
 800c026:	dc86      	bgt.n	800bf36 <pool_func_mp_array_f32+0x372>
 800c028:	e677      	b.n	800bd1a <pool_func_mp_array_f32+0x156>
 800c02a:	bf00      	nop

0800c02c <lite_decompress_ilutof32>:
 800c02c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c030:	9d08      	ldr	r5, [sp, #32]
 800c032:	4604      	mov	r4, r0
 800c034:	2b04      	cmp	r3, #4
 800c036:	ea4f 0685 	mov.w	r6, r5, lsl #2
 800c03a:	4608      	mov	r0, r1
 800c03c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c040:	d012      	beq.n	800c068 <lite_decompress_ilutof32+0x3c>
 800c042:	2b08      	cmp	r3, #8
 800c044:	d10e      	bne.n	800c064 <lite_decompress_ilutof32+0x38>
 800c046:	42ac      	cmp	r4, r5
 800c048:	d20c      	bcs.n	800c064 <lite_decompress_ilutof32+0x38>
 800c04a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c04e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f844 3b04 	str.w	r3, [r4], #4
 800c058:	42a5      	cmp	r5, r4
 800c05a:	d8f6      	bhi.n	800c04a <lite_decompress_ilutof32+0x1e>
 800c05c:	3e01      	subs	r6, #1
 800c05e:	eb00 0696 	add.w	r6, r0, r6, lsr #2
 800c062:	1c70      	adds	r0, r6, #1
 800c064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c068:	9b07      	ldr	r3, [sp, #28]
 800c06a:	085f      	lsrs	r7, r3, #1
 800c06c:	f003 0601 	and.w	r6, r3, #1
 800c070:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 800c074:	f107 38ff 	add.w	r8, r7, #4294967295
 800c078:	42ac      	cmp	r4, r5
 800c07a:	d2f3      	bcs.n	800c064 <lite_decompress_ilutof32+0x38>
 800c07c:	b30f      	cbz	r7, 800c0c2 <lite_decompress_ilutof32+0x96>
 800c07e:	f104 0e08 	add.w	lr, r4, #8
 800c082:	f100 3cff 	add.w	ip, r0, #4294967295
 800c086:	eb00 0108 	add.w	r1, r0, r8
 800c08a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800c08e:	091b      	lsrs	r3, r3, #4
 800c090:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c094:	f10e 0e08 	add.w	lr, lr, #8
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f84e 3c10 	str.w	r3, [lr, #-16]
 800c09e:	f89c 3000 	ldrb.w	r3, [ip]
 800c0a2:	f003 030f 	and.w	r3, r3, #15
 800c0a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c0aa:	4561      	cmp	r1, ip
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800c0b2:	d1ea      	bne.n	800c08a <lite_decompress_ilutof32+0x5e>
 800c0b4:	4438      	add	r0, r7
 800c0b6:	444c      	add	r4, r9
 800c0b8:	b92e      	cbnz	r6, 800c0c6 <lite_decompress_ilutof32+0x9a>
 800c0ba:	42a5      	cmp	r5, r4
 800c0bc:	d8df      	bhi.n	800c07e <lite_decompress_ilutof32+0x52>
 800c0be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0c2:	b906      	cbnz	r6, 800c0c6 <lite_decompress_ilutof32+0x9a>
 800c0c4:	e7fe      	b.n	800c0c4 <lite_decompress_ilutof32+0x98>
 800c0c6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c0ca:	091b      	lsrs	r3, r3, #4
 800c0cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f844 3b04 	str.w	r3, [r4], #4
 800c0d6:	e7cf      	b.n	800c078 <lite_decompress_ilutof32+0x4c>

0800c0d8 <forward_lite_dense_if32of32wf32>:
 800c0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0dc:	e9d0 c305 	ldrd	ip, r3, [r0, #20]
 800c0e0:	6801      	ldr	r1, [r0, #0]
 800c0e2:	fb03 f30c 	mul.w	r3, r3, ip
 800c0e6:	4602      	mov	r2, r0
 800c0e8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800c0ec:	4281      	cmp	r1, r0
 800c0ee:	6857      	ldr	r7, [r2, #4]
 800c0f0:	b083      	sub	sp, #12
 800c0f2:	f080 811f 	bcs.w	800c334 <forward_lite_dense_if32of32wf32+0x25c>
 800c0f6:	6915      	ldr	r5, [r2, #16]
 800c0f8:	ea4f 068c 	mov.w	r6, ip, lsl #2
 800c0fc:	4664      	mov	r4, ip
 800c0fe:	eb01 0806 	add.w	r8, r1, r6
 800c102:	4588      	cmp	r8, r1
 800c104:	6896      	ldr	r6, [r2, #8]
 800c106:	f240 8109 	bls.w	800c31c <forward_lite_dense_if32of32wf32+0x244>
 800c10a:	f1a5 0e10 	sub.w	lr, r5, #16
 800c10e:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800c112:	e9cd 0100 	strd	r0, r1, [sp]
 800c116:	f10e 0e01 	add.w	lr, lr, #1
 800c11a:	ea4f 1b8e 	mov.w	fp, lr, lsl #6
 800c11e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 800c122:	eb07 1e8e 	add.w	lr, r7, lr, lsl #6
 800c126:	468c      	mov	ip, r1
 800c128:	2d0f      	cmp	r5, #15
 800c12a:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 800c380 <forward_lite_dense_if32of32wf32+0x2a8>
 800c12e:	f240 8104 	bls.w	800c33a <forward_lite_dense_if32of32wf32+0x262>
 800c132:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800c136:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 800c13a:	4628      	mov	r0, r5
 800c13c:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 800c140:	ed51 7a0f 	vldr	s15, [r1, #-60]	@ 0xffffffc4
 800c144:	ed11 6a10 	vldr	s12, [r1, #-64]	@ 0xffffffc0
 800c148:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 800c14c:	ed53 4a0d 	vldr	s9, [r3, #-52]	@ 0xffffffcc
 800c150:	ed13 5a0c 	vldr	s10, [r3, #-48]	@ 0xffffffd0
 800c154:	ed51 3a0a 	vldr	s7, [r1, #-40]	@ 0xffffffd8
 800c158:	ed13 3a0a 	vldr	s6, [r3, #-40]	@ 0xffffffd8
 800c15c:	ed13 4a09 	vldr	s8, [r3, #-36]	@ 0xffffffdc
 800c160:	ed11 1a06 	vldr	s2, [r1, #-24]	@ 0xffffffe8
 800c164:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800c168:	ed11 2a05 	vldr	s4, [r1, #-20]	@ 0xffffffec
 800c16c:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800c170:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c174:	ed51 5a0e 	vldr	s11, [r1, #-56]	@ 0xffffffc8
 800c178:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c17c:	3810      	subs	r0, #16
 800c17e:	280f      	cmp	r0, #15
 800c180:	ed53 6a0e 	vldr	s13, [r3, #-56]	@ 0xffffffc8
 800c184:	ed11 6a0d 	vldr	s12, [r1, #-52]	@ 0xffffffcc
 800c188:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800c18c:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 800c190:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c194:	ed51 5a1c 	vldr	s11, [r1, #-112]	@ 0xffffff90
 800c198:	ed51 6a1b 	vldr	s13, [r1, #-108]	@ 0xffffff94
 800c19c:	eee4 7a86 	vfma.f32	s15, s9, s12
 800c1a0:	ed13 6a1b 	vldr	s12, [r3, #-108]	@ 0xffffff94
 800c1a4:	ed51 4a19 	vldr	s9, [r1, #-100]	@ 0xffffff9c
 800c1a8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c1ac:	ed11 5a18 	vldr	s10, [r1, #-96]	@ 0xffffffa0
 800c1b0:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 800c1b4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c1b8:	ed11 6a17 	vldr	s12, [r1, #-92]	@ 0xffffffa4
 800c1bc:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 800c1c0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c1c4:	ed11 3a14 	vldr	s6, [r1, #-80]	@ 0xffffffb0
 800c1c8:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 800c1cc:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c1d0:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 800c1d4:	ed13 4a13 	vldr	s8, [r3, #-76]	@ 0xffffffb4
 800c1d8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c1dc:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 800c1e0:	ed13 5a12 	vldr	s10, [r3, #-72]	@ 0xffffffb8
 800c1e4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c1e8:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 800c1ec:	ed13 6a11 	vldr	s12, [r3, #-68]	@ 0xffffffbc
 800c1f0:	eee1 7a21 	vfma.f32	s15, s2, s3
 800c1f4:	eee2 7a22 	vfma.f32	s15, s4, s5
 800c1f8:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c1fc:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c200:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c204:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c208:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c20c:	d896      	bhi.n	800c13c <forward_lite_dense_if32of32wf32+0x64>
 800c20e:	eb06 010b 	add.w	r1, r6, fp
 800c212:	f005 000f 	and.w	r0, r5, #15
 800c216:	4673      	mov	r3, lr
 800c218:	2803      	cmp	r0, #3
 800c21a:	d95f      	bls.n	800c2dc <forward_lite_dense_if32of32wf32+0x204>
 800c21c:	edd1 6a01 	vldr	s13, [r1, #4]
 800c220:	edd3 7a01 	vldr	s15, [r3, #4]
 800c224:	ed93 6a00 	vldr	s12, [r3]
 800c228:	ed93 5a02 	vldr	s10, [r3, #8]
 800c22c:	edd1 5a02 	vldr	s11, [r1, #8]
 800c230:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c234:	edd1 6a00 	vldr	s13, [r1]
 800c238:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c23c:	1f04      	subs	r4, r0, #4
 800c23e:	2c03      	cmp	r4, #3
 800c240:	ed93 6a03 	vldr	s12, [r3, #12]
 800c244:	edd1 6a03 	vldr	s13, [r1, #12]
 800c248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c24c:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c250:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c254:	eeb0 7a67 	vmov.f32	s14, s15
 800c258:	d938      	bls.n	800c2cc <forward_lite_dense_if32of32wf32+0x1f4>
 800c25a:	edd1 6a05 	vldr	s13, [r1, #20]
 800c25e:	edd3 7a05 	vldr	s15, [r3, #20]
 800c262:	ed93 6a04 	vldr	s12, [r3, #16]
 800c266:	ed93 5a06 	vldr	s10, [r3, #24]
 800c26a:	edd1 5a06 	vldr	s11, [r1, #24]
 800c26e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c272:	edd1 6a04 	vldr	s13, [r1, #16]
 800c276:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c27a:	f1a0 0a08 	sub.w	sl, r0, #8
 800c27e:	f1ba 0f03 	cmp.w	sl, #3
 800c282:	ed93 6a07 	vldr	s12, [r3, #28]
 800c286:	edd1 6a07 	vldr	s13, [r1, #28]
 800c28a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c28e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c292:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c296:	d919      	bls.n	800c2cc <forward_lite_dense_if32of32wf32+0x1f4>
 800c298:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800c29c:	edd1 7a09 	vldr	s15, [r1, #36]	@ 0x24
 800c2a0:	ed91 6a08 	vldr	s12, [r1, #32]
 800c2a4:	ed91 5a0a 	vldr	s10, [r1, #40]	@ 0x28
 800c2a8:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 800c2ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c2b0:	edd3 6a08 	vldr	s13, [r3, #32]
 800c2b4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c2b8:	ed91 6a0b 	vldr	s12, [r1, #44]	@ 0x2c
 800c2bc:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800c2c0:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c2c4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c2c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c2cc:	08a4      	lsrs	r4, r4, #2
 800c2ce:	3401      	adds	r4, #1
 800c2d0:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800c2d4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800c2d8:	f000 0003 	and.w	r0, r0, #3
 800c2dc:	b1a8      	cbz	r0, 800c30a <forward_lite_dense_if32of32wf32+0x232>
 800c2de:	edd3 6a00 	vldr	s13, [r3]
 800c2e2:	edd1 7a00 	vldr	s15, [r1]
 800c2e6:	2801      	cmp	r0, #1
 800c2e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c2ec:	d00d      	beq.n	800c30a <forward_lite_dense_if32of32wf32+0x232>
 800c2ee:	edd3 6a01 	vldr	s13, [r3, #4]
 800c2f2:	edd1 7a01 	vldr	s15, [r1, #4]
 800c2f6:	2802      	cmp	r0, #2
 800c2f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c2fc:	d005      	beq.n	800c30a <forward_lite_dense_if32of32wf32+0x232>
 800c2fe:	edd1 6a02 	vldr	s13, [r1, #8]
 800c302:	edd3 7a02 	vldr	s15, [r3, #8]
 800c306:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c30a:	444e      	add	r6, r9
 800c30c:	ecac 7a01 	vstmia	ip!, {s14}
 800c310:	45e0      	cmp	r8, ip
 800c312:	f63f af09 	bhi.w	800c128 <forward_lite_dense_if32of32wf32+0x50>
 800c316:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c31a:	6954      	ldr	r4, [r2, #20]
 800c31c:	68d3      	ldr	r3, [r2, #12]
 800c31e:	b983      	cbnz	r3, 800c342 <forward_lite_dense_if32of32wf32+0x26a>
 800c320:	6915      	ldr	r5, [r2, #16]
 800c322:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c326:	4288      	cmp	r0, r1
 800c328:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 800c32c:	ea4f 0684 	mov.w	r6, r4, lsl #2
 800c330:	f63f aee5 	bhi.w	800c0fe <forward_lite_dense_if32of32wf32+0x26>
 800c334:	b003      	add	sp, #12
 800c336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c33a:	4628      	mov	r0, r5
 800c33c:	4631      	mov	r1, r6
 800c33e:	463b      	mov	r3, r7
 800c340:	e76a      	b.n	800c218 <forward_lite_dense_if32of32wf32+0x140>
 800c342:	2c00      	cmp	r4, #0
 800c344:	d0ec      	beq.n	800c320 <forward_lite_dense_if32of32wf32+0x248>
 800c346:	edd1 7a00 	vldr	s15, [r1]
 800c34a:	ed93 7a00 	vldr	s14, [r3]
 800c34e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c352:	edc1 7a00 	vstr	s15, [r1]
 800c356:	6954      	ldr	r4, [r2, #20]
 800c358:	2c01      	cmp	r4, #1
 800c35a:	d9e1      	bls.n	800c320 <forward_lite_dense_if32of32wf32+0x248>
 800c35c:	1d0d      	adds	r5, r1, #4
 800c35e:	2301      	movs	r3, #1
 800c360:	68d4      	ldr	r4, [r2, #12]
 800c362:	ed95 7a00 	vldr	s14, [r5]
 800c366:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800c36a:	edd4 7a00 	vldr	s15, [r4]
 800c36e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c372:	3301      	adds	r3, #1
 800c374:	ece5 7a01 	vstmia	r5!, {s15}
 800c378:	6954      	ldr	r4, [r2, #20]
 800c37a:	429c      	cmp	r4, r3
 800c37c:	d8f0      	bhi.n	800c360 <forward_lite_dense_if32of32wf32+0x288>
 800c37e:	e7cf      	b.n	800c320 <forward_lite_dense_if32of32wf32+0x248>
 800c380:	00000000 	.word	0x00000000

0800c384 <forward_lite_dense_if32of32wf32_lut4>:
 800c384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c388:	b08d      	sub	sp, #52	@ 0x34
 800c38a:	4604      	mov	r4, r0
 800c38c:	920a      	str	r2, [sp, #40]	@ 0x28
 800c38e:	4618      	mov	r0, r3
 800c390:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 800c394:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c398:	fb02 f303 	mul.w	r3, r2, r3
 800c39c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c3a0:	e9dd 6717 	ldrd	r6, r7, [sp, #92]	@ 0x5c
 800c3a4:	460d      	mov	r5, r1
 800c3a6:	9308      	str	r3, [sp, #32]
 800c3a8:	f1b8 0f00 	cmp.w	r8, #0
 800c3ac:	d004      	beq.n	800c3b8 <forward_lite_dense_if32of32wf32_lut4+0x34>
 800c3ae:	2240      	movs	r2, #64	@ 0x40
 800c3b0:	4641      	mov	r1, r8
 800c3b2:	f000 facb 	bl	800c94c <st_int8_copy>
 800c3b6:	4640      	mov	r0, r8
 800c3b8:	9b08      	ldr	r3, [sp, #32]
 800c3ba:	429c      	cmp	r4, r3
 800c3bc:	f080 8108 	bcs.w	800c5d0 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800c3c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3c2:	9405      	str	r4, [sp, #20]
 800c3c4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800c3c8:	f007 0301 	and.w	r3, r7, #1
 800c3cc:	08fa      	lsrs	r2, r7, #3
 800c3ce:	9303      	str	r3, [sp, #12]
 800c3d0:	00bb      	lsls	r3, r7, #2
 800c3d2:	eb05 1b42 	add.w	fp, r5, r2, lsl #5
 800c3d6:	9202      	str	r2, [sp, #8]
 800c3d8:	f027 0901 	bic.w	r9, r7, #1
 800c3dc:	0092      	lsls	r2, r2, #2
 800c3de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3e0:	9b05      	ldr	r3, [sp, #20]
 800c3e2:	9204      	str	r2, [sp, #16]
 800c3e4:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 800c3e8:	f105 0120 	add.w	r1, r5, #32
 800c3ec:	46e6      	mov	lr, ip
 800c3ee:	f8cd c01c 	str.w	ip, [sp, #28]
 800c3f2:	465c      	mov	r4, fp
 800c3f4:	9617      	str	r6, [sp, #92]	@ 0x5c
 800c3f6:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800c3fa:	9a07      	ldr	r2, [sp, #28]
 800c3fc:	eb03 0a02 	add.w	sl, r3, r2
 800c400:	459a      	cmp	sl, r3
 800c402:	f1a1 0220 	sub.w	r2, r1, #32
 800c406:	9206      	str	r2, [sp, #24]
 800c408:	f240 80e5 	bls.w	800c5d6 <forward_lite_dense_if32of32wf32_lut4+0x252>
 800c40c:	f109 3bff 	add.w	fp, r9, #4294967295
 800c410:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c412:	4698      	mov	r8, r3
 800c414:	465d      	mov	r5, fp
 800c416:	9b02      	ldr	r3, [sp, #8]
 800c418:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 800c608 <forward_lite_dense_if32of32wf32_lut4+0x284>
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	f000 80bc 	beq.w	800c59a <forward_lite_dense_if32of32wf32_lut4+0x216>
 800c422:	9b04      	ldr	r3, [sp, #16]
 800c424:	eb02 0c03 	add.w	ip, r2, r3
 800c428:	460b      	mov	r3, r1
 800c42a:	7817      	ldrb	r7, [r2, #0]
 800c42c:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 800c430:	7856      	ldrb	r6, [r2, #1]
 800c432:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 800c436:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 800c43a:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 800c43e:	ed13 5a04 	vldr	s10, [r3, #-16]
 800c442:	ed53 5a03 	vldr	s11, [r3, #-12]
 800c446:	ed13 6a02 	vldr	s12, [r3, #-8]
 800c44a:	ed53 6a01 	vldr	s13, [r3, #-4]
 800c44e:	f007 0e0f 	and.w	lr, r7, #15
 800c452:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c456:	edde 7a00 	vldr	s15, [lr]
 800c45a:	093f      	lsrs	r7, r7, #4
 800c45c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800c460:	ed97 3a00 	vldr	s6, [r7]
 800c464:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800c468:	0937      	lsrs	r7, r6, #4
 800c46a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c46e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800c472:	f006 060f 	and.w	r6, r6, #15
 800c476:	edd7 3a00 	vldr	s7, [r7]
 800c47a:	7897      	ldrb	r7, [r2, #2]
 800c47c:	eee3 7a84 	vfma.f32	s15, s7, s8
 800c480:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800c484:	ea4f 1e17 	mov.w	lr, r7, lsr #4
 800c488:	ed96 4a00 	vldr	s8, [r6]
 800c48c:	78d6      	ldrb	r6, [r2, #3]
 800c48e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c492:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c496:	f007 070f 	and.w	r7, r7, #15
 800c49a:	edde 4a00 	vldr	s9, [lr]
 800c49e:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c4a2:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800c4a6:	3204      	adds	r2, #4
 800c4a8:	ed97 5a00 	vldr	s10, [r7]
 800c4ac:	0937      	lsrs	r7, r6, #4
 800c4ae:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c4b2:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800c4b6:	f006 060f 	and.w	r6, r6, #15
 800c4ba:	edd7 5a00 	vldr	s11, [r7]
 800c4be:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c4c2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800c4c6:	4562      	cmp	r2, ip
 800c4c8:	ed96 6a00 	vldr	s12, [r6]
 800c4cc:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c4d0:	f103 0320 	add.w	r3, r3, #32
 800c4d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c4d8:	d1a7      	bne.n	800c42a <forward_lite_dense_if32of32wf32_lut4+0xa6>
 800c4da:	46a6      	mov	lr, r4
 800c4dc:	45ce      	cmp	lr, r9
 800c4de:	d261      	bcs.n	800c5a4 <forward_lite_dense_if32of32wf32_lut4+0x220>
 800c4e0:	eba5 070e 	sub.w	r7, r5, lr
 800c4e4:	ea4f 0bd7 	mov.w	fp, r7, lsr #3
 800c4e8:	f10e 0208 	add.w	r2, lr, #8
 800c4ec:	f10c 36ff 	add.w	r6, ip, #4294967295
 800c4f0:	eb0c 07d7 	add.w	r7, ip, r7, lsr #3
 800c4f4:	f8cd a004 	str.w	sl, [sp, #4]
 800c4f8:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800c4fc:	ed52 5a01 	vldr	s11, [r2, #-4]
 800c500:	ed52 6a02 	vldr	s13, [r2, #-8]
 800c504:	f003 0a0f 	and.w	sl, r3, #15
 800c508:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800c50c:	edda 7a00 	vldr	s15, [sl]
 800c510:	091b      	lsrs	r3, r3, #4
 800c512:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c516:	ed93 6a00 	vldr	s12, [r3]
 800c51a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c51e:	42b7      	cmp	r7, r6
 800c520:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c524:	f102 0208 	add.w	r2, r2, #8
 800c528:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c52c:	d1e4      	bne.n	800c4f8 <forward_lite_dense_if32of32wf32_lut4+0x174>
 800c52e:	f10b 0b01 	add.w	fp, fp, #1
 800c532:	f8dd a004 	ldr.w	sl, [sp, #4]
 800c536:	eb0c 020b 	add.w	r2, ip, fp
 800c53a:	eb0e 0ecb 	add.w	lr, lr, fp, lsl #3
 800c53e:	9b03      	ldr	r3, [sp, #12]
 800c540:	b30b      	cbz	r3, 800c586 <forward_lite_dense_if32of32wf32_lut4+0x202>
 800c542:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c546:	edde 7a00 	vldr	s15, [lr]
 800c54a:	091b      	lsrs	r3, r3, #4
 800c54c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c550:	edd3 6a00 	vldr	s13, [r3]
 800c554:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c558:	eca8 7a01 	vstmia	r8!, {s14}
 800c55c:	45c2      	cmp	sl, r8
 800c55e:	f63f af5a 	bhi.w	800c416 <forward_lite_dense_if32of32wf32_lut4+0x92>
 800c562:	9b05      	ldr	r3, [sp, #20]
 800c564:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c566:	189d      	adds	r5, r3, r2
 800c568:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c56a:	b9eb      	cbnz	r3, 800c5a8 <forward_lite_dense_if32of32wf32_lut4+0x224>
 800c56c:	9b08      	ldr	r3, [sp, #32]
 800c56e:	42ab      	cmp	r3, r5
 800c570:	d92e      	bls.n	800c5d0 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800c572:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c574:	4499      	add	r9, r3
 800c576:	441c      	add	r4, r3
 800c578:	4419      	add	r1, r3
 800c57a:	9b05      	ldr	r3, [sp, #20]
 800c57c:	459a      	cmp	sl, r3
 800c57e:	d92c      	bls.n	800c5da <forward_lite_dense_if32of32wf32_lut4+0x256>
 800c580:	9505      	str	r5, [sp, #20]
 800c582:	462b      	mov	r3, r5
 800c584:	e739      	b.n	800c3fa <forward_lite_dense_if32of32wf32_lut4+0x76>
 800c586:	eca8 7a01 	vstmia	r8!, {s14}
 800c58a:	45c2      	cmp	sl, r8
 800c58c:	d9e9      	bls.n	800c562 <forward_lite_dense_if32of32wf32_lut4+0x1de>
 800c58e:	9b02      	ldr	r3, [sp, #8]
 800c590:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800c608 <forward_lite_dense_if32of32wf32_lut4+0x284>
 800c594:	2b00      	cmp	r3, #0
 800c596:	f47f af44 	bne.w	800c422 <forward_lite_dense_if32of32wf32_lut4+0x9e>
 800c59a:	f8dd e018 	ldr.w	lr, [sp, #24]
 800c59e:	45ce      	cmp	lr, r9
 800c5a0:	4694      	mov	ip, r2
 800c5a2:	d39d      	bcc.n	800c4e0 <forward_lite_dense_if32of32wf32_lut4+0x15c>
 800c5a4:	4662      	mov	r2, ip
 800c5a6:	e7ca      	b.n	800c53e <forward_lite_dense_if32of32wf32_lut4+0x1ba>
 800c5a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d0de      	beq.n	800c56c <forward_lite_dense_if32of32wf32_lut4+0x1e8>
 800c5ae:	9b07      	ldr	r3, [sp, #28]
 800c5b0:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 800c5b4:	1aea      	subs	r2, r5, r3
 800c5b6:	edd2 7a00 	vldr	s15, [r2]
 800c5ba:	ecbc 7a01 	vldmia	ip!, {s14}
 800c5be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c5c2:	ece2 7a01 	vstmia	r2!, {s15}
 800c5c6:	42aa      	cmp	r2, r5
 800c5c8:	d1f5      	bne.n	800c5b6 <forward_lite_dense_if32of32wf32_lut4+0x232>
 800c5ca:	9b08      	ldr	r3, [sp, #32]
 800c5cc:	42ab      	cmp	r3, r5
 800c5ce:	d8d0      	bhi.n	800c572 <forward_lite_dense_if32of32wf32_lut4+0x1ee>
 800c5d0:	b00d      	add	sp, #52	@ 0x34
 800c5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d6:	461d      	mov	r5, r3
 800c5d8:	e7c6      	b.n	800c568 <forward_lite_dense_if32of32wf32_lut4+0x1e4>
 800c5da:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c5de:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800c5e0:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 800c5e2:	eba5 0c0c 	sub.w	ip, r5, ip
 800c5e6:	b169      	cbz	r1, 800c604 <forward_lite_dense_if32of32wf32_lut4+0x280>
 800c5e8:	4663      	mov	r3, ip
 800c5ea:	4632      	mov	r2, r6
 800c5ec:	ed93 7a00 	vldr	s14, [r3]
 800c5f0:	ecf2 7a01 	vldmia	r2!, {s15}
 800c5f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c5f8:	ece3 7a01 	vstmia	r3!, {s15}
 800c5fc:	429d      	cmp	r5, r3
 800c5fe:	d1f5      	bne.n	800c5ec <forward_lite_dense_if32of32wf32_lut4+0x268>
 800c600:	2900      	cmp	r1, #0
 800c602:	d1f1      	bne.n	800c5e8 <forward_lite_dense_if32of32wf32_lut4+0x264>
 800c604:	e7fe      	b.n	800c604 <forward_lite_dense_if32of32wf32_lut4+0x280>
 800c606:	bf00      	nop
 800c608:	00000000 	.word	0x00000000

0800c60c <forward_lite_dense_if32of32wf32_lut8>:
 800c60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c610:	b087      	sub	sp, #28
 800c612:	4605      	mov	r5, r0
 800c614:	9205      	str	r2, [sp, #20]
 800c616:	4618      	mov	r0, r3
 800c618:	e9dd 2313 	ldrd	r2, r3, [sp, #76]	@ 0x4c
 800c61c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800c61e:	fb02 f303 	mul.w	r3, r2, r3
 800c622:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c626:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 800c62a:	460f      	mov	r7, r1
 800c62c:	9303      	str	r3, [sp, #12]
 800c62e:	b12c      	cbz	r4, 800c63c <forward_lite_dense_if32of32wf32_lut8+0x30>
 800c630:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c634:	4621      	mov	r1, r4
 800c636:	f000 f989 	bl	800c94c <st_int8_copy>
 800c63a:	4620      	mov	r0, r4
 800c63c:	9b03      	ldr	r3, [sp, #12]
 800c63e:	429d      	cmp	r5, r3
 800c640:	f080 8115 	bcs.w	800c86e <forward_lite_dense_if32of32wf32_lut8+0x262>
 800c644:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c646:	9500      	str	r5, [sp, #0]
 800c648:	ea4f 09d6 	mov.w	r9, r6, lsr #3
 800c64c:	0099      	lsls	r1, r3, #2
 800c64e:	9b00      	ldr	r3, [sp, #0]
 800c650:	9104      	str	r1, [sp, #16]
 800c652:	00b2      	lsls	r2, r6, #2
 800c654:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 800c658:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 800c65c:	464d      	mov	r5, r9
 800c65e:	4689      	mov	r9, r1
 800c660:	4611      	mov	r1, r2
 800c662:	465a      	mov	r2, fp
 800c664:	eb03 0b09 	add.w	fp, r3, r9
 800c668:	3720      	adds	r7, #32
 800c66a:	459b      	cmp	fp, r3
 800c66c:	f006 0407 	and.w	r4, r6, #7
 800c670:	f1a7 0e20 	sub.w	lr, r7, #32
 800c674:	f240 80d6 	bls.w	800c824 <forward_lite_dense_if32of32wf32_lut8+0x218>
 800c678:	e9cd 9e01 	strd	r9, lr, [sp, #4]
 800c67c:	469c      	mov	ip, r3
 800c67e:	9b05      	ldr	r3, [sp, #20]
 800c680:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 800c8a0 <forward_lite_dense_if32of32wf32_lut8+0x294>
 800c684:	2d00      	cmp	r5, #0
 800c686:	f000 80db 	beq.w	800c840 <forward_lite_dense_if32of32wf32_lut8+0x234>
 800c68a:	eb03 090a 	add.w	r9, r3, sl
 800c68e:	463e      	mov	r6, r7
 800c690:	f893 e001 	ldrb.w	lr, [r3, #1]
 800c694:	ed16 3a07 	vldr	s6, [r6, #-28]	@ 0xffffffe4
 800c698:	ed56 3a08 	vldr	s7, [r6, #-32]	@ 0xffffffe0
 800c69c:	ed16 4a06 	vldr	s8, [r6, #-24]	@ 0xffffffe8
 800c6a0:	ed56 4a05 	vldr	s9, [r6, #-20]	@ 0xffffffec
 800c6a4:	ed16 5a04 	vldr	s10, [r6, #-16]
 800c6a8:	ed56 5a03 	vldr	s11, [r6, #-12]
 800c6ac:	ed16 6a02 	vldr	s12, [r6, #-8]
 800c6b0:	ed56 6a01 	vldr	s13, [r6, #-4]
 800c6b4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c6b8:	edde 7a00 	vldr	s15, [lr]
 800c6bc:	f893 e000 	ldrb.w	lr, [r3]
 800c6c0:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c6c4:	ee67 7a83 	vmul.f32	s15, s15, s6
 800c6c8:	ed9e 3a00 	vldr	s6, [lr]
 800c6cc:	f893 e002 	ldrb.w	lr, [r3, #2]
 800c6d0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c6d4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c6d8:	3308      	adds	r3, #8
 800c6da:	edde 3a00 	vldr	s7, [lr]
 800c6de:	f813 ec05 	ldrb.w	lr, [r3, #-5]
 800c6e2:	eee3 7a84 	vfma.f32	s15, s7, s8
 800c6e6:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c6ea:	3620      	adds	r6, #32
 800c6ec:	ed9e 4a00 	vldr	s8, [lr]
 800c6f0:	f813 ec04 	ldrb.w	lr, [r3, #-4]
 800c6f4:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c6f8:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c6fc:	edde 4a00 	vldr	s9, [lr]
 800c700:	f813 ec03 	ldrb.w	lr, [r3, #-3]
 800c704:	eee4 7a85 	vfma.f32	s15, s9, s10
 800c708:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c70c:	ed9e 5a00 	vldr	s10, [lr]
 800c710:	f813 ec02 	ldrb.w	lr, [r3, #-2]
 800c714:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c718:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c71c:	edde 5a00 	vldr	s11, [lr]
 800c720:	f813 ec01 	ldrb.w	lr, [r3, #-1]
 800c724:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c728:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800c72c:	454b      	cmp	r3, r9
 800c72e:	ed9e 6a00 	vldr	s12, [lr]
 800c732:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c736:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c73a:	d1a9      	bne.n	800c690 <forward_lite_dense_if32of32wf32_lut8+0x84>
 800c73c:	4643      	mov	r3, r8
 800c73e:	2c00      	cmp	r4, #0
 800c740:	d07c      	beq.n	800c83c <forward_lite_dense_if32of32wf32_lut8+0x230>
 800c742:	f899 6000 	ldrb.w	r6, [r9]
 800c746:	edd3 7a00 	vldr	s15, [r3]
 800c74a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800c74e:	edd6 6a00 	vldr	s13, [r6]
 800c752:	2c01      	cmp	r4, #1
 800c754:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c758:	d045      	beq.n	800c7e6 <forward_lite_dense_if32of32wf32_lut8+0x1da>
 800c75a:	f899 6001 	ldrb.w	r6, [r9, #1]
 800c75e:	edd3 7a01 	vldr	s15, [r3, #4]
 800c762:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800c766:	edd6 6a00 	vldr	s13, [r6]
 800c76a:	2c02      	cmp	r4, #2
 800c76c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c770:	d039      	beq.n	800c7e6 <forward_lite_dense_if32of32wf32_lut8+0x1da>
 800c772:	f899 6002 	ldrb.w	r6, [r9, #2]
 800c776:	edd3 7a02 	vldr	s15, [r3, #8]
 800c77a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800c77e:	edd6 6a00 	vldr	s13, [r6]
 800c782:	2c03      	cmp	r4, #3
 800c784:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c788:	d02d      	beq.n	800c7e6 <forward_lite_dense_if32of32wf32_lut8+0x1da>
 800c78a:	f899 6003 	ldrb.w	r6, [r9, #3]
 800c78e:	edd3 6a03 	vldr	s13, [r3, #12]
 800c792:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800c796:	edd6 7a00 	vldr	s15, [r6]
 800c79a:	2c04      	cmp	r4, #4
 800c79c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c7a0:	d021      	beq.n	800c7e6 <forward_lite_dense_if32of32wf32_lut8+0x1da>
 800c7a2:	f899 6004 	ldrb.w	r6, [r9, #4]
 800c7a6:	edd3 6a04 	vldr	s13, [r3, #16]
 800c7aa:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800c7ae:	edd6 7a00 	vldr	s15, [r6]
 800c7b2:	2c05      	cmp	r4, #5
 800c7b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c7b8:	d015      	beq.n	800c7e6 <forward_lite_dense_if32of32wf32_lut8+0x1da>
 800c7ba:	f899 6005 	ldrb.w	r6, [r9, #5]
 800c7be:	edd3 6a05 	vldr	s13, [r3, #20]
 800c7c2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800c7c6:	edd6 7a00 	vldr	s15, [r6]
 800c7ca:	2c06      	cmp	r4, #6
 800c7cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c7d0:	d009      	beq.n	800c7e6 <forward_lite_dense_if32of32wf32_lut8+0x1da>
 800c7d2:	edd3 7a06 	vldr	s15, [r3, #24]
 800c7d6:	f899 3006 	ldrb.w	r3, [r9, #6]
 800c7da:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c7de:	edd3 6a00 	vldr	s13, [r3]
 800c7e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c7e6:	eb09 0304 	add.w	r3, r9, r4
 800c7ea:	ecac 7a01 	vstmia	ip!, {s14}
 800c7ee:	45e3      	cmp	fp, ip
 800c7f0:	f63f af46 	bhi.w	800c680 <forward_lite_dense_if32of32wf32_lut8+0x74>
 800c7f4:	e9dd 3900 	ldrd	r3, r9, [sp]
 800c7f8:	9e04      	ldr	r6, [sp, #16]
 800c7fa:	eb03 0e06 	add.w	lr, r3, r6
 800c7fe:	bb1a      	cbnz	r2, 800c848 <forward_lite_dense_if32of32wf32_lut8+0x23c>
 800c800:	9b03      	ldr	r3, [sp, #12]
 800c802:	4573      	cmp	r3, lr
 800c804:	d933      	bls.n	800c86e <forward_lite_dense_if32of32wf32_lut8+0x262>
 800c806:	9b00      	ldr	r3, [sp, #0]
 800c808:	459b      	cmp	fp, r3
 800c80a:	4488      	add	r8, r1
 800c80c:	440f      	add	r7, r1
 800c80e:	d942      	bls.n	800c896 <forward_lite_dense_if32of32wf32_lut8+0x28a>
 800c810:	4673      	mov	r3, lr
 800c812:	eb03 0b09 	add.w	fp, r3, r9
 800c816:	459b      	cmp	fp, r3
 800c818:	f8cd e000 	str.w	lr, [sp]
 800c81c:	f1a7 0e20 	sub.w	lr, r7, #32
 800c820:	f63f af2a 	bhi.w	800c678 <forward_lite_dense_if32of32wf32_lut8+0x6c>
 800c824:	b97a      	cbnz	r2, 800c846 <forward_lite_dense_if32of32wf32_lut8+0x23a>
 800c826:	461d      	mov	r5, r3
 800c828:	9b03      	ldr	r3, [sp, #12]
 800c82a:	42ab      	cmp	r3, r5
 800c82c:	4649      	mov	r1, r9
 800c82e:	4693      	mov	fp, r2
 800c830:	d91d      	bls.n	800c86e <forward_lite_dense_if32of32wf32_lut8+0x262>
 800c832:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c834:	4249      	negs	r1, r1
 800c836:	465b      	mov	r3, fp
 800c838:	b9e3      	cbnz	r3, 800c874 <forward_lite_dense_if32of32wf32_lut8+0x268>
 800c83a:	e7fe      	b.n	800c83a <forward_lite_dense_if32of32wf32_lut8+0x22e>
 800c83c:	464b      	mov	r3, r9
 800c83e:	e7d4      	b.n	800c7ea <forward_lite_dense_if32of32wf32_lut8+0x1de>
 800c840:	4699      	mov	r9, r3
 800c842:	9b02      	ldr	r3, [sp, #8]
 800c844:	e77b      	b.n	800c73e <forward_lite_dense_if32of32wf32_lut8+0x132>
 800c846:	469e      	mov	lr, r3
 800c848:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d0d8      	beq.n	800c800 <forward_lite_dense_if32of32wf32_lut8+0x1f4>
 800c84e:	ebae 0309 	sub.w	r3, lr, r9
 800c852:	4616      	mov	r6, r2
 800c854:	edd3 7a00 	vldr	s15, [r3]
 800c858:	ecb6 7a01 	vldmia	r6!, {s14}
 800c85c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c860:	ece3 7a01 	vstmia	r3!, {s15}
 800c864:	4573      	cmp	r3, lr
 800c866:	d1f5      	bne.n	800c854 <forward_lite_dense_if32of32wf32_lut8+0x248>
 800c868:	9b03      	ldr	r3, [sp, #12]
 800c86a:	4573      	cmp	r3, lr
 800c86c:	d8cb      	bhi.n	800c806 <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 800c86e:	b007      	add	sp, #28
 800c870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c874:	2a00      	cmp	r2, #0
 800c876:	d0df      	beq.n	800c838 <forward_lite_dense_if32of32wf32_lut8+0x22c>
 800c878:	469b      	mov	fp, r3
 800c87a:	4429      	add	r1, r5
 800c87c:	460b      	mov	r3, r1
 800c87e:	465a      	mov	r2, fp
 800c880:	ed93 7a00 	vldr	s14, [r3]
 800c884:	ecf2 7a01 	vldmia	r2!, {s15}
 800c888:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c88c:	ece3 7a01 	vstmia	r3!, {s15}
 800c890:	42ab      	cmp	r3, r5
 800c892:	d1f5      	bne.n	800c880 <forward_lite_dense_if32of32wf32_lut8+0x274>
 800c894:	e7f2      	b.n	800c87c <forward_lite_dense_if32of32wf32_lut8+0x270>
 800c896:	4649      	mov	r1, r9
 800c898:	4693      	mov	fp, r2
 800c89a:	4675      	mov	r5, lr
 800c89c:	e7c9      	b.n	800c832 <forward_lite_dense_if32of32wf32_lut8+0x226>
 800c89e:	bf00      	nop
 800c8a0:	00000000 	.word	0x00000000

0800c8a4 <forward_lite_nl_relu_if32of32>:
 800c8a4:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 800c8a8:	3b01      	subs	r3, #1
 800c8aa:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800c8ae:	4291      	cmp	r1, r2
 800c8b0:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800c8b4:	d814      	bhi.n	800c8e0 <forward_lite_nl_relu_if32of32+0x3c>
 800c8b6:	f10c 0104 	add.w	r1, ip, #4
 800c8ba:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800c8e4 <forward_lite_nl_relu_if32of32+0x40>
 800c8be:	1d13      	adds	r3, r2, #4
 800c8c0:	4408      	add	r0, r1
 800c8c2:	eba2 020c 	sub.w	r2, r2, ip
 800c8c6:	ed73 7a01 	vldmdb	r3!, {s15}
 800c8ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8d2:	bfb8      	it	lt
 800c8d4:	eef0 7a47 	vmovlt.f32	s15, s14
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	ed60 7a01 	vstmdb	r0!, {s15}
 800c8de:	d1f2      	bne.n	800c8c6 <forward_lite_nl_relu_if32of32+0x22>
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop
 800c8e4:	00000000 	.word	0x00000000

0800c8e8 <forward_lite_nl_softmax_if32of32>:
 800c8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ec:	b083      	sub	sp, #12
 800c8ee:	461f      	mov	r7, r3
 800c8f0:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800c8f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8f8:	4543      	cmp	r3, r8
 800c8fa:	fbb3 f2f8 	udiv	r2, r3, r8
 800c8fe:	d322      	bcc.n	800c946 <forward_lite_nl_softmax_if32of32+0x5e>
 800c900:	fb08 f307 	mul.w	r3, r8, r7
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	b1f7      	cbz	r7, 800c946 <forward_lite_nl_softmax_if32of32+0x5e>
 800c908:	9201      	str	r2, [sp, #4]
 800c90a:	4681      	mov	r9, r0
 800c90c:	f04f 0b00 	mov.w	fp, #0
 800c910:	460a      	mov	r2, r1
 800c912:	469a      	mov	sl, r3
 800c914:	4616      	mov	r6, r2
 800c916:	464d      	mov	r5, r9
 800c918:	2400      	movs	r4, #0
 800c91a:	9200      	str	r2, [sp, #0]
 800c91c:	4631      	mov	r1, r6
 800c91e:	4628      	mov	r0, r5
 800c920:	463b      	mov	r3, r7
 800c922:	3401      	adds	r4, #1
 800c924:	4642      	mov	r2, r8
 800c926:	f7ff f85d 	bl	800b9e4 <forward_lite_nl_softmax_if32of32_kernel>
 800c92a:	42a7      	cmp	r7, r4
 800c92c:	f106 0604 	add.w	r6, r6, #4
 800c930:	f105 0504 	add.w	r5, r5, #4
 800c934:	d1f2      	bne.n	800c91c <forward_lite_nl_softmax_if32of32+0x34>
 800c936:	9b01      	ldr	r3, [sp, #4]
 800c938:	9a00      	ldr	r2, [sp, #0]
 800c93a:	f10b 0b01 	add.w	fp, fp, #1
 800c93e:	455b      	cmp	r3, fp
 800c940:	4452      	add	r2, sl
 800c942:	44d1      	add	r9, sl
 800c944:	d8e6      	bhi.n	800c914 <forward_lite_nl_softmax_if32of32+0x2c>
 800c946:	b003      	add	sp, #12
 800c948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c94c <st_int8_copy>:
 800c94c:	4288      	cmp	r0, r1
 800c94e:	d021      	beq.n	800c994 <st_int8_copy+0x48>
 800c950:	b302      	cbz	r2, 800c994 <st_int8_copy+0x48>
 800c952:	4288      	cmp	r0, r1
 800c954:	d313      	bcc.n	800c97e <st_int8_copy+0x32>
 800c956:	2a03      	cmp	r2, #3
 800c958:	d81d      	bhi.n	800c996 <st_int8_copy+0x4a>
 800c95a:	3a01      	subs	r2, #1
 800c95c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c960:	f801 3b01 	strb.w	r3, [r1], #1
 800c964:	b1b2      	cbz	r2, 800c994 <st_int8_copy+0x48>
 800c966:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c96a:	f801 3b01 	strb.w	r3, [r1], #1
 800c96e:	2a01      	cmp	r2, #1
 800c970:	f000 8088 	beq.w	800ca84 <st_int8_copy+0x138>
 800c974:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c978:	f801 3b01 	strb.w	r3, [r1], #1
 800c97c:	4770      	bx	lr
 800c97e:	1883      	adds	r3, r0, r2
 800c980:	428b      	cmp	r3, r1
 800c982:	d9e8      	bls.n	800c956 <st_int8_copy+0xa>
 800c984:	440a      	add	r2, r1
 800c986:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800c98a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800c98e:	4298      	cmp	r0, r3
 800c990:	d1f9      	bne.n	800c986 <st_int8_copy+0x3a>
 800c992:	4770      	bx	lr
 800c994:	4770      	bx	lr
 800c996:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c99a:	f001 0e03 	and.w	lr, r1, #3
 800c99e:	f1ce 0304 	rsb	r3, lr, #4
 800c9a2:	eba2 0c03 	sub.w	ip, r2, r3
 800c9a6:	f000 0803 	and.w	r8, r0, #3
 800c9aa:	f1ce 0203 	rsb	r2, lr, #3
 800c9ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c9b2:	f801 3b01 	strb.w	r3, [r1], #1
 800c9b6:	b182      	cbz	r2, 800c9da <st_int8_copy+0x8e>
 800c9b8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c9bc:	f801 3b01 	strb.w	r3, [r1], #1
 800c9c0:	2a01      	cmp	r2, #1
 800c9c2:	d00a      	beq.n	800c9da <st_int8_copy+0x8e>
 800c9c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c9c8:	f801 3b01 	strb.w	r3, [r1], #1
 800c9cc:	f1be 0f01 	cmp.w	lr, #1
 800c9d0:	d003      	beq.n	800c9da <st_int8_copy+0x8e>
 800c9d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c9d6:	f801 3b01 	strb.w	r3, [r1], #1
 800c9da:	45c6      	cmp	lr, r8
 800c9dc:	d02a      	beq.n	800ca34 <st_int8_copy+0xe8>
 800c9de:	ea5f 121c 	movs.w	r2, ip, lsr #4
 800c9e2:	d00a      	beq.n	800c9fa <st_int8_copy+0xae>
 800c9e4:	f850 3b04 	ldr.w	r3, [r0], #4
 800c9e8:	f850 4b04 	ldr.w	r4, [r0], #4
 800c9ec:	f850 5b04 	ldr.w	r5, [r0], #4
 800c9f0:	f850 6b04 	ldr.w	r6, [r0], #4
 800c9f4:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800c9f6:	3a01      	subs	r2, #1
 800c9f8:	d1f4      	bne.n	800c9e4 <st_int8_copy+0x98>
 800c9fa:	f01c 0f08 	tst.w	ip, #8
 800c9fe:	d004      	beq.n	800ca0a <st_int8_copy+0xbe>
 800ca00:	f850 3b04 	ldr.w	r3, [r0], #4
 800ca04:	f850 4b04 	ldr.w	r4, [r0], #4
 800ca08:	c118      	stmia	r1!, {r3, r4}
 800ca0a:	f01c 0f04 	tst.w	ip, #4
 800ca0e:	d003      	beq.n	800ca18 <st_int8_copy+0xcc>
 800ca10:	f850 3b04 	ldr.w	r3, [r0], #4
 800ca14:	f841 3b04 	str.w	r3, [r1], #4
 800ca18:	f01c 0f02 	tst.w	ip, #2
 800ca1c:	d003      	beq.n	800ca26 <st_int8_copy+0xda>
 800ca1e:	f830 3b02 	ldrh.w	r3, [r0], #2
 800ca22:	f821 3b02 	strh.w	r3, [r1], #2
 800ca26:	f01c 0f01 	tst.w	ip, #1
 800ca2a:	d001      	beq.n	800ca30 <st_int8_copy+0xe4>
 800ca2c:	7803      	ldrb	r3, [r0, #0]
 800ca2e:	700b      	strb	r3, [r1, #0]
 800ca30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca34:	ea5f 199c 	movs.w	r9, ip, lsr #6
 800ca38:	d00e      	beq.n	800ca58 <st_int8_copy+0x10c>
 800ca3a:	4688      	mov	r8, r1
 800ca3c:	4686      	mov	lr, r0
 800ca3e:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800ca42:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800ca46:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800ca4a:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800ca4e:	f1b9 0901 	subs.w	r9, r9, #1
 800ca52:	4641      	mov	r1, r8
 800ca54:	4670      	mov	r0, lr
 800ca56:	d1f0      	bne.n	800ca3a <st_int8_copy+0xee>
 800ca58:	f01c 0f20 	tst.w	ip, #32
 800ca5c:	d007      	beq.n	800ca6e <st_int8_copy+0x122>
 800ca5e:	4688      	mov	r8, r1
 800ca60:	4686      	mov	lr, r0
 800ca62:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800ca66:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800ca6a:	4641      	mov	r1, r8
 800ca6c:	4670      	mov	r0, lr
 800ca6e:	f01c 0f10 	tst.w	ip, #16
 800ca72:	d001      	beq.n	800ca78 <st_int8_copy+0x12c>
 800ca74:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 800ca76:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800ca78:	f01c 0f08 	tst.w	ip, #8
 800ca7c:	d0c5      	beq.n	800ca0a <st_int8_copy+0xbe>
 800ca7e:	c818      	ldmia	r0!, {r3, r4}
 800ca80:	c118      	stmia	r1!, {r3, r4}
 800ca82:	e7c2      	b.n	800ca0a <st_int8_copy+0xbe>
 800ca84:	4770      	bx	lr
 800ca86:	bf00      	nop

0800ca88 <ai_array_to_buffer_fmt>:
 800ca88:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800ca8c:	2b02      	cmp	r3, #2
 800ca8e:	d055      	beq.n	800cb3c <ai_array_to_buffer_fmt+0xb4>
 800ca90:	4a2d      	ldr	r2, [pc, #180]	@ (800cb48 <ai_array_to_buffer_fmt+0xc0>)
 800ca92:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 800ca96:	4293      	cmp	r3, r2
 800ca98:	d010      	beq.n	800cabc <ai_array_to_buffer_fmt+0x34>
 800ca9a:	dc21      	bgt.n	800cae0 <ai_array_to_buffer_fmt+0x58>
 800ca9c:	4a2b      	ldr	r2, [pc, #172]	@ (800cb4c <ai_array_to_buffer_fmt+0xc4>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d00c      	beq.n	800cabc <ai_array_to_buffer_fmt+0x34>
 800caa2:	dd0f      	ble.n	800cac4 <ai_array_to_buffer_fmt+0x3c>
 800caa4:	4a2a      	ldr	r2, [pc, #168]	@ (800cb50 <ai_array_to_buffer_fmt+0xc8>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d008      	beq.n	800cabc <ai_array_to_buffer_fmt+0x34>
 800caaa:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 800caae:	4293      	cmp	r3, r2
 800cab0:	d004      	beq.n	800cabc <ai_array_to_buffer_fmt+0x34>
 800cab2:	4a28      	ldr	r2, [pc, #160]	@ (800cb54 <ai_array_to_buffer_fmt+0xcc>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	bf0c      	ite	eq
 800cab8:	4613      	moveq	r3, r2
 800caba:	2340      	movne	r3, #64	@ 0x40
 800cabc:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800cac0:	4318      	orrs	r0, r3
 800cac2:	4770      	bx	lr
 800cac4:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800cac8:	4293      	cmp	r3, r2
 800caca:	d0f7      	beq.n	800cabc <ai_array_to_buffer_fmt+0x34>
 800cacc:	dd2c      	ble.n	800cb28 <ai_array_to_buffer_fmt+0xa0>
 800cace:	4a22      	ldr	r2, [pc, #136]	@ (800cb58 <ai_array_to_buffer_fmt+0xd0>)
 800cad0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800cad4:	4293      	cmp	r3, r2
 800cad6:	bf0c      	ite	eq
 800cad8:	4613      	moveq	r3, r2
 800cada:	2340      	movne	r3, #64	@ 0x40
 800cadc:	4318      	orrs	r0, r3
 800cade:	4770      	bx	lr
 800cae0:	4a1e      	ldr	r2, [pc, #120]	@ (800cb5c <ai_array_to_buffer_fmt+0xd4>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d0ea      	beq.n	800cabc <ai_array_to_buffer_fmt+0x34>
 800cae6:	dd10      	ble.n	800cb0a <ai_array_to_buffer_fmt+0x82>
 800cae8:	4a1d      	ldr	r2, [pc, #116]	@ (800cb60 <ai_array_to_buffer_fmt+0xd8>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d0e6      	beq.n	800cabc <ai_array_to_buffer_fmt+0x34>
 800caee:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d0e2      	beq.n	800cabc <ai_array_to_buffer_fmt+0x34>
 800caf6:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 800cafa:	4293      	cmp	r3, r2
 800cafc:	bf0c      	ite	eq
 800cafe:	4613      	moveq	r3, r2
 800cb00:	2340      	movne	r3, #64	@ 0x40
 800cb02:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 800cb06:	4318      	orrs	r0, r3
 800cb08:	4770      	bx	lr
 800cb0a:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d0d4      	beq.n	800cabc <ai_array_to_buffer_fmt+0x34>
 800cb12:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d0d0      	beq.n	800cabc <ai_array_to_buffer_fmt+0x34>
 800cb1a:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	bf0c      	ite	eq
 800cb22:	4613      	moveq	r3, r2
 800cb24:	2340      	movne	r3, #64	@ 0x40
 800cb26:	e7c9      	b.n	800cabc <ai_array_to_buffer_fmt+0x34>
 800cb28:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d0c5      	beq.n	800cabc <ai_array_to_buffer_fmt+0x34>
 800cb30:	3280      	adds	r2, #128	@ 0x80
 800cb32:	4293      	cmp	r3, r2
 800cb34:	bf0c      	ite	eq
 800cb36:	4613      	moveq	r3, r2
 800cb38:	2340      	movne	r3, #64	@ 0x40
 800cb3a:	e7bf      	b.n	800cabc <ai_array_to_buffer_fmt+0x34>
 800cb3c:	4b09      	ldr	r3, [pc, #36]	@ (800cb64 <ai_array_to_buffer_fmt+0xdc>)
 800cb3e:	4003      	ands	r3, r0
 800cb40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cb44:	e7ba      	b.n	800cabc <ai_array_to_buffer_fmt+0x34>
 800cb46:	bf00      	nop
 800cb48:	00821040 	.word	0x00821040
 800cb4c:	00040840 	.word	0x00040840
 800cb50:	00041040 	.word	0x00041040
 800cb54:	0004084f 	.word	0x0004084f
 800cb58:	00040447 	.word	0x00040447
 800cb5c:	00840447 	.word	0x00840447
 800cb60:	0084084f 	.word	0x0084084f
 800cb64:	00803fff 	.word	0x00803fff

0800cb68 <ai_array_get_byte_size>:
 800cb68:	b1d1      	cbz	r1, 800cba0 <ai_array_get_byte_size+0x38>
 800cb6a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800cb6e:	fb03 f101 	mul.w	r1, r3, r1
 800cb72:	f3c0 4c43 	ubfx	ip, r0, #17, #4
 800cb76:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 800cb7a:	fa42 f20c 	asr.w	r2, r2, ip
 800cb7e:	3107      	adds	r1, #7
 800cb80:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800cb84:	07d2      	lsls	r2, r2, #31
 800cb86:	f021 0107 	bic.w	r1, r1, #7
 800cb8a:	fa21 f100 	lsr.w	r1, r1, r0
 800cb8e:	bf5a      	itte	pl
 800cb90:	fa43 f000 	asrpl.w	r0, r3, r0
 800cb94:	4083      	lslpl	r3, r0
 800cb96:	2300      	movmi	r3, #0
 800cb98:	3107      	adds	r1, #7
 800cb9a:	4419      	add	r1, r3
 800cb9c:	08c8      	lsrs	r0, r1, #3
 800cb9e:	4770      	bx	lr
 800cba0:	4608      	mov	r0, r1
 800cba2:	4770      	bx	lr

0800cba4 <ai_array_get_data_byte_size>:
 800cba4:	b169      	cbz	r1, 800cbc2 <ai_array_get_data_byte_size+0x1e>
 800cba6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800cbaa:	fb01 f303 	mul.w	r3, r1, r3
 800cbae:	3307      	adds	r3, #7
 800cbb0:	f023 0307 	bic.w	r3, r3, #7
 800cbb4:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800cbb8:	fa23 f000 	lsr.w	r0, r3, r0
 800cbbc:	3007      	adds	r0, #7
 800cbbe:	08c0      	lsrs	r0, r0, #3
 800cbc0:	4770      	bx	lr
 800cbc2:	4608      	mov	r0, r1
 800cbc4:	4770      	bx	lr
 800cbc6:	bf00      	nop

0800cbc8 <ai_version_get>:
 800cbc8:	0212      	lsls	r2, r2, #8
 800cbca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800cbce:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800cbd2:	4770      	bx	lr

0800cbd4 <get_tensor_byte_size>:
 800cbd4:	b410      	push	{r4}
 800cbd6:	6983      	ldr	r3, [r0, #24]
 800cbd8:	68c4      	ldr	r4, [r0, #12]
 800cbda:	6941      	ldr	r1, [r0, #20]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	68e0      	ldr	r0, [r4, #12]
 800cbe0:	4a07      	ldr	r2, [pc, #28]	@ (800cc00 <get_tensor_byte_size+0x2c>)
 800cbe2:	68c9      	ldr	r1, [r1, #12]
 800cbe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbe8:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800cbec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800cbf0:	fb01 f000 	mul.w	r0, r1, r0
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	bf04      	itt	eq
 800cbf8:	3007      	addeq	r0, #7
 800cbfa:	08c0      	lsreq	r0, r0, #3
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop
 800cc00:	000400c0 	.word	0x000400c0

0800cc04 <malloc>:
 800cc04:	4b02      	ldr	r3, [pc, #8]	@ (800cc10 <malloc+0xc>)
 800cc06:	4601      	mov	r1, r0
 800cc08:	6818      	ldr	r0, [r3, #0]
 800cc0a:	f000 b825 	b.w	800cc58 <_malloc_r>
 800cc0e:	bf00      	nop
 800cc10:	20000a74 	.word	0x20000a74

0800cc14 <sbrk_aligned>:
 800cc14:	b570      	push	{r4, r5, r6, lr}
 800cc16:	4e0f      	ldr	r6, [pc, #60]	@ (800cc54 <sbrk_aligned+0x40>)
 800cc18:	460c      	mov	r4, r1
 800cc1a:	6831      	ldr	r1, [r6, #0]
 800cc1c:	4605      	mov	r5, r0
 800cc1e:	b911      	cbnz	r1, 800cc26 <sbrk_aligned+0x12>
 800cc20:	f000 ff26 	bl	800da70 <_sbrk_r>
 800cc24:	6030      	str	r0, [r6, #0]
 800cc26:	4621      	mov	r1, r4
 800cc28:	4628      	mov	r0, r5
 800cc2a:	f000 ff21 	bl	800da70 <_sbrk_r>
 800cc2e:	1c43      	adds	r3, r0, #1
 800cc30:	d103      	bne.n	800cc3a <sbrk_aligned+0x26>
 800cc32:	f04f 34ff 	mov.w	r4, #4294967295
 800cc36:	4620      	mov	r0, r4
 800cc38:	bd70      	pop	{r4, r5, r6, pc}
 800cc3a:	1cc4      	adds	r4, r0, #3
 800cc3c:	f024 0403 	bic.w	r4, r4, #3
 800cc40:	42a0      	cmp	r0, r4
 800cc42:	d0f8      	beq.n	800cc36 <sbrk_aligned+0x22>
 800cc44:	1a21      	subs	r1, r4, r0
 800cc46:	4628      	mov	r0, r5
 800cc48:	f000 ff12 	bl	800da70 <_sbrk_r>
 800cc4c:	3001      	adds	r0, #1
 800cc4e:	d1f2      	bne.n	800cc36 <sbrk_aligned+0x22>
 800cc50:	e7ef      	b.n	800cc32 <sbrk_aligned+0x1e>
 800cc52:	bf00      	nop
 800cc54:	200082f0 	.word	0x200082f0

0800cc58 <_malloc_r>:
 800cc58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc5c:	1ccd      	adds	r5, r1, #3
 800cc5e:	f025 0503 	bic.w	r5, r5, #3
 800cc62:	3508      	adds	r5, #8
 800cc64:	2d0c      	cmp	r5, #12
 800cc66:	bf38      	it	cc
 800cc68:	250c      	movcc	r5, #12
 800cc6a:	2d00      	cmp	r5, #0
 800cc6c:	4606      	mov	r6, r0
 800cc6e:	db01      	blt.n	800cc74 <_malloc_r+0x1c>
 800cc70:	42a9      	cmp	r1, r5
 800cc72:	d904      	bls.n	800cc7e <_malloc_r+0x26>
 800cc74:	230c      	movs	r3, #12
 800cc76:	6033      	str	r3, [r6, #0]
 800cc78:	2000      	movs	r0, #0
 800cc7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cd54 <_malloc_r+0xfc>
 800cc82:	f000 f869 	bl	800cd58 <__malloc_lock>
 800cc86:	f8d8 3000 	ldr.w	r3, [r8]
 800cc8a:	461c      	mov	r4, r3
 800cc8c:	bb44      	cbnz	r4, 800cce0 <_malloc_r+0x88>
 800cc8e:	4629      	mov	r1, r5
 800cc90:	4630      	mov	r0, r6
 800cc92:	f7ff ffbf 	bl	800cc14 <sbrk_aligned>
 800cc96:	1c43      	adds	r3, r0, #1
 800cc98:	4604      	mov	r4, r0
 800cc9a:	d158      	bne.n	800cd4e <_malloc_r+0xf6>
 800cc9c:	f8d8 4000 	ldr.w	r4, [r8]
 800cca0:	4627      	mov	r7, r4
 800cca2:	2f00      	cmp	r7, #0
 800cca4:	d143      	bne.n	800cd2e <_malloc_r+0xd6>
 800cca6:	2c00      	cmp	r4, #0
 800cca8:	d04b      	beq.n	800cd42 <_malloc_r+0xea>
 800ccaa:	6823      	ldr	r3, [r4, #0]
 800ccac:	4639      	mov	r1, r7
 800ccae:	4630      	mov	r0, r6
 800ccb0:	eb04 0903 	add.w	r9, r4, r3
 800ccb4:	f000 fedc 	bl	800da70 <_sbrk_r>
 800ccb8:	4581      	cmp	r9, r0
 800ccba:	d142      	bne.n	800cd42 <_malloc_r+0xea>
 800ccbc:	6821      	ldr	r1, [r4, #0]
 800ccbe:	1a6d      	subs	r5, r5, r1
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	4630      	mov	r0, r6
 800ccc4:	f7ff ffa6 	bl	800cc14 <sbrk_aligned>
 800ccc8:	3001      	adds	r0, #1
 800ccca:	d03a      	beq.n	800cd42 <_malloc_r+0xea>
 800cccc:	6823      	ldr	r3, [r4, #0]
 800ccce:	442b      	add	r3, r5
 800ccd0:	6023      	str	r3, [r4, #0]
 800ccd2:	f8d8 3000 	ldr.w	r3, [r8]
 800ccd6:	685a      	ldr	r2, [r3, #4]
 800ccd8:	bb62      	cbnz	r2, 800cd34 <_malloc_r+0xdc>
 800ccda:	f8c8 7000 	str.w	r7, [r8]
 800ccde:	e00f      	b.n	800cd00 <_malloc_r+0xa8>
 800cce0:	6822      	ldr	r2, [r4, #0]
 800cce2:	1b52      	subs	r2, r2, r5
 800cce4:	d420      	bmi.n	800cd28 <_malloc_r+0xd0>
 800cce6:	2a0b      	cmp	r2, #11
 800cce8:	d917      	bls.n	800cd1a <_malloc_r+0xc2>
 800ccea:	1961      	adds	r1, r4, r5
 800ccec:	42a3      	cmp	r3, r4
 800ccee:	6025      	str	r5, [r4, #0]
 800ccf0:	bf18      	it	ne
 800ccf2:	6059      	strne	r1, [r3, #4]
 800ccf4:	6863      	ldr	r3, [r4, #4]
 800ccf6:	bf08      	it	eq
 800ccf8:	f8c8 1000 	streq.w	r1, [r8]
 800ccfc:	5162      	str	r2, [r4, r5]
 800ccfe:	604b      	str	r3, [r1, #4]
 800cd00:	4630      	mov	r0, r6
 800cd02:	f000 f82f 	bl	800cd64 <__malloc_unlock>
 800cd06:	f104 000b 	add.w	r0, r4, #11
 800cd0a:	1d23      	adds	r3, r4, #4
 800cd0c:	f020 0007 	bic.w	r0, r0, #7
 800cd10:	1ac2      	subs	r2, r0, r3
 800cd12:	bf1c      	itt	ne
 800cd14:	1a1b      	subne	r3, r3, r0
 800cd16:	50a3      	strne	r3, [r4, r2]
 800cd18:	e7af      	b.n	800cc7a <_malloc_r+0x22>
 800cd1a:	6862      	ldr	r2, [r4, #4]
 800cd1c:	42a3      	cmp	r3, r4
 800cd1e:	bf0c      	ite	eq
 800cd20:	f8c8 2000 	streq.w	r2, [r8]
 800cd24:	605a      	strne	r2, [r3, #4]
 800cd26:	e7eb      	b.n	800cd00 <_malloc_r+0xa8>
 800cd28:	4623      	mov	r3, r4
 800cd2a:	6864      	ldr	r4, [r4, #4]
 800cd2c:	e7ae      	b.n	800cc8c <_malloc_r+0x34>
 800cd2e:	463c      	mov	r4, r7
 800cd30:	687f      	ldr	r7, [r7, #4]
 800cd32:	e7b6      	b.n	800cca2 <_malloc_r+0x4a>
 800cd34:	461a      	mov	r2, r3
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	42a3      	cmp	r3, r4
 800cd3a:	d1fb      	bne.n	800cd34 <_malloc_r+0xdc>
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	6053      	str	r3, [r2, #4]
 800cd40:	e7de      	b.n	800cd00 <_malloc_r+0xa8>
 800cd42:	230c      	movs	r3, #12
 800cd44:	6033      	str	r3, [r6, #0]
 800cd46:	4630      	mov	r0, r6
 800cd48:	f000 f80c 	bl	800cd64 <__malloc_unlock>
 800cd4c:	e794      	b.n	800cc78 <_malloc_r+0x20>
 800cd4e:	6005      	str	r5, [r0, #0]
 800cd50:	e7d6      	b.n	800cd00 <_malloc_r+0xa8>
 800cd52:	bf00      	nop
 800cd54:	200082f4 	.word	0x200082f4

0800cd58 <__malloc_lock>:
 800cd58:	4801      	ldr	r0, [pc, #4]	@ (800cd60 <__malloc_lock+0x8>)
 800cd5a:	f000 bed6 	b.w	800db0a <__retarget_lock_acquire_recursive>
 800cd5e:	bf00      	nop
 800cd60:	20008438 	.word	0x20008438

0800cd64 <__malloc_unlock>:
 800cd64:	4801      	ldr	r0, [pc, #4]	@ (800cd6c <__malloc_unlock+0x8>)
 800cd66:	f000 bed1 	b.w	800db0c <__retarget_lock_release_recursive>
 800cd6a:	bf00      	nop
 800cd6c:	20008438 	.word	0x20008438

0800cd70 <_realloc_r>:
 800cd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd74:	4607      	mov	r7, r0
 800cd76:	4614      	mov	r4, r2
 800cd78:	460d      	mov	r5, r1
 800cd7a:	b921      	cbnz	r1, 800cd86 <_realloc_r+0x16>
 800cd7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd80:	4611      	mov	r1, r2
 800cd82:	f7ff bf69 	b.w	800cc58 <_malloc_r>
 800cd86:	b92a      	cbnz	r2, 800cd94 <_realloc_r+0x24>
 800cd88:	f001 fd2a 	bl	800e7e0 <_free_r>
 800cd8c:	4625      	mov	r5, r4
 800cd8e:	4628      	mov	r0, r5
 800cd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd94:	f002 f8e8 	bl	800ef68 <_malloc_usable_size_r>
 800cd98:	4284      	cmp	r4, r0
 800cd9a:	4606      	mov	r6, r0
 800cd9c:	d802      	bhi.n	800cda4 <_realloc_r+0x34>
 800cd9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cda2:	d8f4      	bhi.n	800cd8e <_realloc_r+0x1e>
 800cda4:	4621      	mov	r1, r4
 800cda6:	4638      	mov	r0, r7
 800cda8:	f7ff ff56 	bl	800cc58 <_malloc_r>
 800cdac:	4680      	mov	r8, r0
 800cdae:	b908      	cbnz	r0, 800cdb4 <_realloc_r+0x44>
 800cdb0:	4645      	mov	r5, r8
 800cdb2:	e7ec      	b.n	800cd8e <_realloc_r+0x1e>
 800cdb4:	42b4      	cmp	r4, r6
 800cdb6:	4622      	mov	r2, r4
 800cdb8:	4629      	mov	r1, r5
 800cdba:	bf28      	it	cs
 800cdbc:	4632      	movcs	r2, r6
 800cdbe:	f000 fea6 	bl	800db0e <memcpy>
 800cdc2:	4629      	mov	r1, r5
 800cdc4:	4638      	mov	r0, r7
 800cdc6:	f001 fd0b 	bl	800e7e0 <_free_r>
 800cdca:	e7f1      	b.n	800cdb0 <_realloc_r+0x40>

0800cdcc <__cvt>:
 800cdcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdd0:	ec57 6b10 	vmov	r6, r7, d0
 800cdd4:	2f00      	cmp	r7, #0
 800cdd6:	460c      	mov	r4, r1
 800cdd8:	4619      	mov	r1, r3
 800cdda:	463b      	mov	r3, r7
 800cddc:	bfbb      	ittet	lt
 800cdde:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cde2:	461f      	movlt	r7, r3
 800cde4:	2300      	movge	r3, #0
 800cde6:	232d      	movlt	r3, #45	@ 0x2d
 800cde8:	700b      	strb	r3, [r1, #0]
 800cdea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cdec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cdf0:	4691      	mov	r9, r2
 800cdf2:	f023 0820 	bic.w	r8, r3, #32
 800cdf6:	bfbc      	itt	lt
 800cdf8:	4632      	movlt	r2, r6
 800cdfa:	4616      	movlt	r6, r2
 800cdfc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ce00:	d005      	beq.n	800ce0e <__cvt+0x42>
 800ce02:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ce06:	d100      	bne.n	800ce0a <__cvt+0x3e>
 800ce08:	3401      	adds	r4, #1
 800ce0a:	2102      	movs	r1, #2
 800ce0c:	e000      	b.n	800ce10 <__cvt+0x44>
 800ce0e:	2103      	movs	r1, #3
 800ce10:	ab03      	add	r3, sp, #12
 800ce12:	9301      	str	r3, [sp, #4]
 800ce14:	ab02      	add	r3, sp, #8
 800ce16:	9300      	str	r3, [sp, #0]
 800ce18:	ec47 6b10 	vmov	d0, r6, r7
 800ce1c:	4653      	mov	r3, sl
 800ce1e:	4622      	mov	r2, r4
 800ce20:	f000 ff0e 	bl	800dc40 <_dtoa_r>
 800ce24:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ce28:	4605      	mov	r5, r0
 800ce2a:	d119      	bne.n	800ce60 <__cvt+0x94>
 800ce2c:	f019 0f01 	tst.w	r9, #1
 800ce30:	d00e      	beq.n	800ce50 <__cvt+0x84>
 800ce32:	eb00 0904 	add.w	r9, r0, r4
 800ce36:	2200      	movs	r2, #0
 800ce38:	2300      	movs	r3, #0
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	4639      	mov	r1, r7
 800ce3e:	f7f3 fe5b 	bl	8000af8 <__aeabi_dcmpeq>
 800ce42:	b108      	cbz	r0, 800ce48 <__cvt+0x7c>
 800ce44:	f8cd 900c 	str.w	r9, [sp, #12]
 800ce48:	2230      	movs	r2, #48	@ 0x30
 800ce4a:	9b03      	ldr	r3, [sp, #12]
 800ce4c:	454b      	cmp	r3, r9
 800ce4e:	d31e      	bcc.n	800ce8e <__cvt+0xc2>
 800ce50:	9b03      	ldr	r3, [sp, #12]
 800ce52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce54:	1b5b      	subs	r3, r3, r5
 800ce56:	4628      	mov	r0, r5
 800ce58:	6013      	str	r3, [r2, #0]
 800ce5a:	b004      	add	sp, #16
 800ce5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ce64:	eb00 0904 	add.w	r9, r0, r4
 800ce68:	d1e5      	bne.n	800ce36 <__cvt+0x6a>
 800ce6a:	7803      	ldrb	r3, [r0, #0]
 800ce6c:	2b30      	cmp	r3, #48	@ 0x30
 800ce6e:	d10a      	bne.n	800ce86 <__cvt+0xba>
 800ce70:	2200      	movs	r2, #0
 800ce72:	2300      	movs	r3, #0
 800ce74:	4630      	mov	r0, r6
 800ce76:	4639      	mov	r1, r7
 800ce78:	f7f3 fe3e 	bl	8000af8 <__aeabi_dcmpeq>
 800ce7c:	b918      	cbnz	r0, 800ce86 <__cvt+0xba>
 800ce7e:	f1c4 0401 	rsb	r4, r4, #1
 800ce82:	f8ca 4000 	str.w	r4, [sl]
 800ce86:	f8da 3000 	ldr.w	r3, [sl]
 800ce8a:	4499      	add	r9, r3
 800ce8c:	e7d3      	b.n	800ce36 <__cvt+0x6a>
 800ce8e:	1c59      	adds	r1, r3, #1
 800ce90:	9103      	str	r1, [sp, #12]
 800ce92:	701a      	strb	r2, [r3, #0]
 800ce94:	e7d9      	b.n	800ce4a <__cvt+0x7e>

0800ce96 <__exponent>:
 800ce96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce98:	2900      	cmp	r1, #0
 800ce9a:	bfba      	itte	lt
 800ce9c:	4249      	neglt	r1, r1
 800ce9e:	232d      	movlt	r3, #45	@ 0x2d
 800cea0:	232b      	movge	r3, #43	@ 0x2b
 800cea2:	2909      	cmp	r1, #9
 800cea4:	7002      	strb	r2, [r0, #0]
 800cea6:	7043      	strb	r3, [r0, #1]
 800cea8:	dd29      	ble.n	800cefe <__exponent+0x68>
 800ceaa:	f10d 0307 	add.w	r3, sp, #7
 800ceae:	461d      	mov	r5, r3
 800ceb0:	270a      	movs	r7, #10
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	fbb1 f6f7 	udiv	r6, r1, r7
 800ceb8:	fb07 1416 	mls	r4, r7, r6, r1
 800cebc:	3430      	adds	r4, #48	@ 0x30
 800cebe:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cec2:	460c      	mov	r4, r1
 800cec4:	2c63      	cmp	r4, #99	@ 0x63
 800cec6:	f103 33ff 	add.w	r3, r3, #4294967295
 800ceca:	4631      	mov	r1, r6
 800cecc:	dcf1      	bgt.n	800ceb2 <__exponent+0x1c>
 800cece:	3130      	adds	r1, #48	@ 0x30
 800ced0:	1e94      	subs	r4, r2, #2
 800ced2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ced6:	1c41      	adds	r1, r0, #1
 800ced8:	4623      	mov	r3, r4
 800ceda:	42ab      	cmp	r3, r5
 800cedc:	d30a      	bcc.n	800cef4 <__exponent+0x5e>
 800cede:	f10d 0309 	add.w	r3, sp, #9
 800cee2:	1a9b      	subs	r3, r3, r2
 800cee4:	42ac      	cmp	r4, r5
 800cee6:	bf88      	it	hi
 800cee8:	2300      	movhi	r3, #0
 800ceea:	3302      	adds	r3, #2
 800ceec:	4403      	add	r3, r0
 800ceee:	1a18      	subs	r0, r3, r0
 800cef0:	b003      	add	sp, #12
 800cef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cef4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cef8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cefc:	e7ed      	b.n	800ceda <__exponent+0x44>
 800cefe:	2330      	movs	r3, #48	@ 0x30
 800cf00:	3130      	adds	r1, #48	@ 0x30
 800cf02:	7083      	strb	r3, [r0, #2]
 800cf04:	70c1      	strb	r1, [r0, #3]
 800cf06:	1d03      	adds	r3, r0, #4
 800cf08:	e7f1      	b.n	800ceee <__exponent+0x58>
	...

0800cf0c <_printf_float>:
 800cf0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf10:	b08d      	sub	sp, #52	@ 0x34
 800cf12:	460c      	mov	r4, r1
 800cf14:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cf18:	4616      	mov	r6, r2
 800cf1a:	461f      	mov	r7, r3
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	f000 fd6f 	bl	800da00 <_localeconv_r>
 800cf22:	6803      	ldr	r3, [r0, #0]
 800cf24:	9304      	str	r3, [sp, #16]
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7f3 f9ba 	bl	80002a0 <strlen>
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf30:	f8d8 3000 	ldr.w	r3, [r8]
 800cf34:	9005      	str	r0, [sp, #20]
 800cf36:	3307      	adds	r3, #7
 800cf38:	f023 0307 	bic.w	r3, r3, #7
 800cf3c:	f103 0208 	add.w	r2, r3, #8
 800cf40:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cf44:	f8d4 b000 	ldr.w	fp, [r4]
 800cf48:	f8c8 2000 	str.w	r2, [r8]
 800cf4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf50:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cf54:	9307      	str	r3, [sp, #28]
 800cf56:	f8cd 8018 	str.w	r8, [sp, #24]
 800cf5a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cf5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf62:	4b9c      	ldr	r3, [pc, #624]	@ (800d1d4 <_printf_float+0x2c8>)
 800cf64:	f04f 32ff 	mov.w	r2, #4294967295
 800cf68:	f7f3 fdf8 	bl	8000b5c <__aeabi_dcmpun>
 800cf6c:	bb70      	cbnz	r0, 800cfcc <_printf_float+0xc0>
 800cf6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf72:	4b98      	ldr	r3, [pc, #608]	@ (800d1d4 <_printf_float+0x2c8>)
 800cf74:	f04f 32ff 	mov.w	r2, #4294967295
 800cf78:	f7f3 fdd2 	bl	8000b20 <__aeabi_dcmple>
 800cf7c:	bb30      	cbnz	r0, 800cfcc <_printf_float+0xc0>
 800cf7e:	2200      	movs	r2, #0
 800cf80:	2300      	movs	r3, #0
 800cf82:	4640      	mov	r0, r8
 800cf84:	4649      	mov	r1, r9
 800cf86:	f7f3 fdc1 	bl	8000b0c <__aeabi_dcmplt>
 800cf8a:	b110      	cbz	r0, 800cf92 <_printf_float+0x86>
 800cf8c:	232d      	movs	r3, #45	@ 0x2d
 800cf8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf92:	4a91      	ldr	r2, [pc, #580]	@ (800d1d8 <_printf_float+0x2cc>)
 800cf94:	4b91      	ldr	r3, [pc, #580]	@ (800d1dc <_printf_float+0x2d0>)
 800cf96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cf9a:	bf8c      	ite	hi
 800cf9c:	4690      	movhi	r8, r2
 800cf9e:	4698      	movls	r8, r3
 800cfa0:	2303      	movs	r3, #3
 800cfa2:	6123      	str	r3, [r4, #16]
 800cfa4:	f02b 0304 	bic.w	r3, fp, #4
 800cfa8:	6023      	str	r3, [r4, #0]
 800cfaa:	f04f 0900 	mov.w	r9, #0
 800cfae:	9700      	str	r7, [sp, #0]
 800cfb0:	4633      	mov	r3, r6
 800cfb2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cfb4:	4621      	mov	r1, r4
 800cfb6:	4628      	mov	r0, r5
 800cfb8:	f000 f9d2 	bl	800d360 <_printf_common>
 800cfbc:	3001      	adds	r0, #1
 800cfbe:	f040 808d 	bne.w	800d0dc <_printf_float+0x1d0>
 800cfc2:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc6:	b00d      	add	sp, #52	@ 0x34
 800cfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfcc:	4642      	mov	r2, r8
 800cfce:	464b      	mov	r3, r9
 800cfd0:	4640      	mov	r0, r8
 800cfd2:	4649      	mov	r1, r9
 800cfd4:	f7f3 fdc2 	bl	8000b5c <__aeabi_dcmpun>
 800cfd8:	b140      	cbz	r0, 800cfec <_printf_float+0xe0>
 800cfda:	464b      	mov	r3, r9
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	bfbc      	itt	lt
 800cfe0:	232d      	movlt	r3, #45	@ 0x2d
 800cfe2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cfe6:	4a7e      	ldr	r2, [pc, #504]	@ (800d1e0 <_printf_float+0x2d4>)
 800cfe8:	4b7e      	ldr	r3, [pc, #504]	@ (800d1e4 <_printf_float+0x2d8>)
 800cfea:	e7d4      	b.n	800cf96 <_printf_float+0x8a>
 800cfec:	6863      	ldr	r3, [r4, #4]
 800cfee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cff2:	9206      	str	r2, [sp, #24]
 800cff4:	1c5a      	adds	r2, r3, #1
 800cff6:	d13b      	bne.n	800d070 <_printf_float+0x164>
 800cff8:	2306      	movs	r3, #6
 800cffa:	6063      	str	r3, [r4, #4]
 800cffc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d000:	2300      	movs	r3, #0
 800d002:	6022      	str	r2, [r4, #0]
 800d004:	9303      	str	r3, [sp, #12]
 800d006:	ab0a      	add	r3, sp, #40	@ 0x28
 800d008:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d00c:	ab09      	add	r3, sp, #36	@ 0x24
 800d00e:	9300      	str	r3, [sp, #0]
 800d010:	6861      	ldr	r1, [r4, #4]
 800d012:	ec49 8b10 	vmov	d0, r8, r9
 800d016:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d01a:	4628      	mov	r0, r5
 800d01c:	f7ff fed6 	bl	800cdcc <__cvt>
 800d020:	9b06      	ldr	r3, [sp, #24]
 800d022:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d024:	2b47      	cmp	r3, #71	@ 0x47
 800d026:	4680      	mov	r8, r0
 800d028:	d129      	bne.n	800d07e <_printf_float+0x172>
 800d02a:	1cc8      	adds	r0, r1, #3
 800d02c:	db02      	blt.n	800d034 <_printf_float+0x128>
 800d02e:	6863      	ldr	r3, [r4, #4]
 800d030:	4299      	cmp	r1, r3
 800d032:	dd41      	ble.n	800d0b8 <_printf_float+0x1ac>
 800d034:	f1aa 0a02 	sub.w	sl, sl, #2
 800d038:	fa5f fa8a 	uxtb.w	sl, sl
 800d03c:	3901      	subs	r1, #1
 800d03e:	4652      	mov	r2, sl
 800d040:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d044:	9109      	str	r1, [sp, #36]	@ 0x24
 800d046:	f7ff ff26 	bl	800ce96 <__exponent>
 800d04a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d04c:	1813      	adds	r3, r2, r0
 800d04e:	2a01      	cmp	r2, #1
 800d050:	4681      	mov	r9, r0
 800d052:	6123      	str	r3, [r4, #16]
 800d054:	dc02      	bgt.n	800d05c <_printf_float+0x150>
 800d056:	6822      	ldr	r2, [r4, #0]
 800d058:	07d2      	lsls	r2, r2, #31
 800d05a:	d501      	bpl.n	800d060 <_printf_float+0x154>
 800d05c:	3301      	adds	r3, #1
 800d05e:	6123      	str	r3, [r4, #16]
 800d060:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d064:	2b00      	cmp	r3, #0
 800d066:	d0a2      	beq.n	800cfae <_printf_float+0xa2>
 800d068:	232d      	movs	r3, #45	@ 0x2d
 800d06a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d06e:	e79e      	b.n	800cfae <_printf_float+0xa2>
 800d070:	9a06      	ldr	r2, [sp, #24]
 800d072:	2a47      	cmp	r2, #71	@ 0x47
 800d074:	d1c2      	bne.n	800cffc <_printf_float+0xf0>
 800d076:	2b00      	cmp	r3, #0
 800d078:	d1c0      	bne.n	800cffc <_printf_float+0xf0>
 800d07a:	2301      	movs	r3, #1
 800d07c:	e7bd      	b.n	800cffa <_printf_float+0xee>
 800d07e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d082:	d9db      	bls.n	800d03c <_printf_float+0x130>
 800d084:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d088:	d118      	bne.n	800d0bc <_printf_float+0x1b0>
 800d08a:	2900      	cmp	r1, #0
 800d08c:	6863      	ldr	r3, [r4, #4]
 800d08e:	dd0b      	ble.n	800d0a8 <_printf_float+0x19c>
 800d090:	6121      	str	r1, [r4, #16]
 800d092:	b913      	cbnz	r3, 800d09a <_printf_float+0x18e>
 800d094:	6822      	ldr	r2, [r4, #0]
 800d096:	07d0      	lsls	r0, r2, #31
 800d098:	d502      	bpl.n	800d0a0 <_printf_float+0x194>
 800d09a:	3301      	adds	r3, #1
 800d09c:	440b      	add	r3, r1
 800d09e:	6123      	str	r3, [r4, #16]
 800d0a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d0a2:	f04f 0900 	mov.w	r9, #0
 800d0a6:	e7db      	b.n	800d060 <_printf_float+0x154>
 800d0a8:	b913      	cbnz	r3, 800d0b0 <_printf_float+0x1a4>
 800d0aa:	6822      	ldr	r2, [r4, #0]
 800d0ac:	07d2      	lsls	r2, r2, #31
 800d0ae:	d501      	bpl.n	800d0b4 <_printf_float+0x1a8>
 800d0b0:	3302      	adds	r3, #2
 800d0b2:	e7f4      	b.n	800d09e <_printf_float+0x192>
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e7f2      	b.n	800d09e <_printf_float+0x192>
 800d0b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d0bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0be:	4299      	cmp	r1, r3
 800d0c0:	db05      	blt.n	800d0ce <_printf_float+0x1c2>
 800d0c2:	6823      	ldr	r3, [r4, #0]
 800d0c4:	6121      	str	r1, [r4, #16]
 800d0c6:	07d8      	lsls	r0, r3, #31
 800d0c8:	d5ea      	bpl.n	800d0a0 <_printf_float+0x194>
 800d0ca:	1c4b      	adds	r3, r1, #1
 800d0cc:	e7e7      	b.n	800d09e <_printf_float+0x192>
 800d0ce:	2900      	cmp	r1, #0
 800d0d0:	bfd4      	ite	le
 800d0d2:	f1c1 0202 	rsble	r2, r1, #2
 800d0d6:	2201      	movgt	r2, #1
 800d0d8:	4413      	add	r3, r2
 800d0da:	e7e0      	b.n	800d09e <_printf_float+0x192>
 800d0dc:	6823      	ldr	r3, [r4, #0]
 800d0de:	055a      	lsls	r2, r3, #21
 800d0e0:	d407      	bmi.n	800d0f2 <_printf_float+0x1e6>
 800d0e2:	6923      	ldr	r3, [r4, #16]
 800d0e4:	4642      	mov	r2, r8
 800d0e6:	4631      	mov	r1, r6
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	47b8      	blx	r7
 800d0ec:	3001      	adds	r0, #1
 800d0ee:	d12b      	bne.n	800d148 <_printf_float+0x23c>
 800d0f0:	e767      	b.n	800cfc2 <_printf_float+0xb6>
 800d0f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d0f6:	f240 80dd 	bls.w	800d2b4 <_printf_float+0x3a8>
 800d0fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d0fe:	2200      	movs	r2, #0
 800d100:	2300      	movs	r3, #0
 800d102:	f7f3 fcf9 	bl	8000af8 <__aeabi_dcmpeq>
 800d106:	2800      	cmp	r0, #0
 800d108:	d033      	beq.n	800d172 <_printf_float+0x266>
 800d10a:	4a37      	ldr	r2, [pc, #220]	@ (800d1e8 <_printf_float+0x2dc>)
 800d10c:	2301      	movs	r3, #1
 800d10e:	4631      	mov	r1, r6
 800d110:	4628      	mov	r0, r5
 800d112:	47b8      	blx	r7
 800d114:	3001      	adds	r0, #1
 800d116:	f43f af54 	beq.w	800cfc2 <_printf_float+0xb6>
 800d11a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d11e:	4543      	cmp	r3, r8
 800d120:	db02      	blt.n	800d128 <_printf_float+0x21c>
 800d122:	6823      	ldr	r3, [r4, #0]
 800d124:	07d8      	lsls	r0, r3, #31
 800d126:	d50f      	bpl.n	800d148 <_printf_float+0x23c>
 800d128:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d12c:	4631      	mov	r1, r6
 800d12e:	4628      	mov	r0, r5
 800d130:	47b8      	blx	r7
 800d132:	3001      	adds	r0, #1
 800d134:	f43f af45 	beq.w	800cfc2 <_printf_float+0xb6>
 800d138:	f04f 0900 	mov.w	r9, #0
 800d13c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d140:	f104 0a1a 	add.w	sl, r4, #26
 800d144:	45c8      	cmp	r8, r9
 800d146:	dc09      	bgt.n	800d15c <_printf_float+0x250>
 800d148:	6823      	ldr	r3, [r4, #0]
 800d14a:	079b      	lsls	r3, r3, #30
 800d14c:	f100 8103 	bmi.w	800d356 <_printf_float+0x44a>
 800d150:	68e0      	ldr	r0, [r4, #12]
 800d152:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d154:	4298      	cmp	r0, r3
 800d156:	bfb8      	it	lt
 800d158:	4618      	movlt	r0, r3
 800d15a:	e734      	b.n	800cfc6 <_printf_float+0xba>
 800d15c:	2301      	movs	r3, #1
 800d15e:	4652      	mov	r2, sl
 800d160:	4631      	mov	r1, r6
 800d162:	4628      	mov	r0, r5
 800d164:	47b8      	blx	r7
 800d166:	3001      	adds	r0, #1
 800d168:	f43f af2b 	beq.w	800cfc2 <_printf_float+0xb6>
 800d16c:	f109 0901 	add.w	r9, r9, #1
 800d170:	e7e8      	b.n	800d144 <_printf_float+0x238>
 800d172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d174:	2b00      	cmp	r3, #0
 800d176:	dc39      	bgt.n	800d1ec <_printf_float+0x2e0>
 800d178:	4a1b      	ldr	r2, [pc, #108]	@ (800d1e8 <_printf_float+0x2dc>)
 800d17a:	2301      	movs	r3, #1
 800d17c:	4631      	mov	r1, r6
 800d17e:	4628      	mov	r0, r5
 800d180:	47b8      	blx	r7
 800d182:	3001      	adds	r0, #1
 800d184:	f43f af1d 	beq.w	800cfc2 <_printf_float+0xb6>
 800d188:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d18c:	ea59 0303 	orrs.w	r3, r9, r3
 800d190:	d102      	bne.n	800d198 <_printf_float+0x28c>
 800d192:	6823      	ldr	r3, [r4, #0]
 800d194:	07d9      	lsls	r1, r3, #31
 800d196:	d5d7      	bpl.n	800d148 <_printf_float+0x23c>
 800d198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d19c:	4631      	mov	r1, r6
 800d19e:	4628      	mov	r0, r5
 800d1a0:	47b8      	blx	r7
 800d1a2:	3001      	adds	r0, #1
 800d1a4:	f43f af0d 	beq.w	800cfc2 <_printf_float+0xb6>
 800d1a8:	f04f 0a00 	mov.w	sl, #0
 800d1ac:	f104 0b1a 	add.w	fp, r4, #26
 800d1b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1b2:	425b      	negs	r3, r3
 800d1b4:	4553      	cmp	r3, sl
 800d1b6:	dc01      	bgt.n	800d1bc <_printf_float+0x2b0>
 800d1b8:	464b      	mov	r3, r9
 800d1ba:	e793      	b.n	800d0e4 <_printf_float+0x1d8>
 800d1bc:	2301      	movs	r3, #1
 800d1be:	465a      	mov	r2, fp
 800d1c0:	4631      	mov	r1, r6
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	47b8      	blx	r7
 800d1c6:	3001      	adds	r0, #1
 800d1c8:	f43f aefb 	beq.w	800cfc2 <_printf_float+0xb6>
 800d1cc:	f10a 0a01 	add.w	sl, sl, #1
 800d1d0:	e7ee      	b.n	800d1b0 <_printf_float+0x2a4>
 800d1d2:	bf00      	nop
 800d1d4:	7fefffff 	.word	0x7fefffff
 800d1d8:	080a39ec 	.word	0x080a39ec
 800d1dc:	080a39e8 	.word	0x080a39e8
 800d1e0:	080a39f4 	.word	0x080a39f4
 800d1e4:	080a39f0 	.word	0x080a39f0
 800d1e8:	080a39f8 	.word	0x080a39f8
 800d1ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d1ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d1f2:	4553      	cmp	r3, sl
 800d1f4:	bfa8      	it	ge
 800d1f6:	4653      	movge	r3, sl
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	4699      	mov	r9, r3
 800d1fc:	dc36      	bgt.n	800d26c <_printf_float+0x360>
 800d1fe:	f04f 0b00 	mov.w	fp, #0
 800d202:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d206:	f104 021a 	add.w	r2, r4, #26
 800d20a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d20c:	9306      	str	r3, [sp, #24]
 800d20e:	eba3 0309 	sub.w	r3, r3, r9
 800d212:	455b      	cmp	r3, fp
 800d214:	dc31      	bgt.n	800d27a <_printf_float+0x36e>
 800d216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d218:	459a      	cmp	sl, r3
 800d21a:	dc3a      	bgt.n	800d292 <_printf_float+0x386>
 800d21c:	6823      	ldr	r3, [r4, #0]
 800d21e:	07da      	lsls	r2, r3, #31
 800d220:	d437      	bmi.n	800d292 <_printf_float+0x386>
 800d222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d224:	ebaa 0903 	sub.w	r9, sl, r3
 800d228:	9b06      	ldr	r3, [sp, #24]
 800d22a:	ebaa 0303 	sub.w	r3, sl, r3
 800d22e:	4599      	cmp	r9, r3
 800d230:	bfa8      	it	ge
 800d232:	4699      	movge	r9, r3
 800d234:	f1b9 0f00 	cmp.w	r9, #0
 800d238:	dc33      	bgt.n	800d2a2 <_printf_float+0x396>
 800d23a:	f04f 0800 	mov.w	r8, #0
 800d23e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d242:	f104 0b1a 	add.w	fp, r4, #26
 800d246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d248:	ebaa 0303 	sub.w	r3, sl, r3
 800d24c:	eba3 0309 	sub.w	r3, r3, r9
 800d250:	4543      	cmp	r3, r8
 800d252:	f77f af79 	ble.w	800d148 <_printf_float+0x23c>
 800d256:	2301      	movs	r3, #1
 800d258:	465a      	mov	r2, fp
 800d25a:	4631      	mov	r1, r6
 800d25c:	4628      	mov	r0, r5
 800d25e:	47b8      	blx	r7
 800d260:	3001      	adds	r0, #1
 800d262:	f43f aeae 	beq.w	800cfc2 <_printf_float+0xb6>
 800d266:	f108 0801 	add.w	r8, r8, #1
 800d26a:	e7ec      	b.n	800d246 <_printf_float+0x33a>
 800d26c:	4642      	mov	r2, r8
 800d26e:	4631      	mov	r1, r6
 800d270:	4628      	mov	r0, r5
 800d272:	47b8      	blx	r7
 800d274:	3001      	adds	r0, #1
 800d276:	d1c2      	bne.n	800d1fe <_printf_float+0x2f2>
 800d278:	e6a3      	b.n	800cfc2 <_printf_float+0xb6>
 800d27a:	2301      	movs	r3, #1
 800d27c:	4631      	mov	r1, r6
 800d27e:	4628      	mov	r0, r5
 800d280:	9206      	str	r2, [sp, #24]
 800d282:	47b8      	blx	r7
 800d284:	3001      	adds	r0, #1
 800d286:	f43f ae9c 	beq.w	800cfc2 <_printf_float+0xb6>
 800d28a:	9a06      	ldr	r2, [sp, #24]
 800d28c:	f10b 0b01 	add.w	fp, fp, #1
 800d290:	e7bb      	b.n	800d20a <_printf_float+0x2fe>
 800d292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d296:	4631      	mov	r1, r6
 800d298:	4628      	mov	r0, r5
 800d29a:	47b8      	blx	r7
 800d29c:	3001      	adds	r0, #1
 800d29e:	d1c0      	bne.n	800d222 <_printf_float+0x316>
 800d2a0:	e68f      	b.n	800cfc2 <_printf_float+0xb6>
 800d2a2:	9a06      	ldr	r2, [sp, #24]
 800d2a4:	464b      	mov	r3, r9
 800d2a6:	4442      	add	r2, r8
 800d2a8:	4631      	mov	r1, r6
 800d2aa:	4628      	mov	r0, r5
 800d2ac:	47b8      	blx	r7
 800d2ae:	3001      	adds	r0, #1
 800d2b0:	d1c3      	bne.n	800d23a <_printf_float+0x32e>
 800d2b2:	e686      	b.n	800cfc2 <_printf_float+0xb6>
 800d2b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d2b8:	f1ba 0f01 	cmp.w	sl, #1
 800d2bc:	dc01      	bgt.n	800d2c2 <_printf_float+0x3b6>
 800d2be:	07db      	lsls	r3, r3, #31
 800d2c0:	d536      	bpl.n	800d330 <_printf_float+0x424>
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	4642      	mov	r2, r8
 800d2c6:	4631      	mov	r1, r6
 800d2c8:	4628      	mov	r0, r5
 800d2ca:	47b8      	blx	r7
 800d2cc:	3001      	adds	r0, #1
 800d2ce:	f43f ae78 	beq.w	800cfc2 <_printf_float+0xb6>
 800d2d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2d6:	4631      	mov	r1, r6
 800d2d8:	4628      	mov	r0, r5
 800d2da:	47b8      	blx	r7
 800d2dc:	3001      	adds	r0, #1
 800d2de:	f43f ae70 	beq.w	800cfc2 <_printf_float+0xb6>
 800d2e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d2ee:	f7f3 fc03 	bl	8000af8 <__aeabi_dcmpeq>
 800d2f2:	b9c0      	cbnz	r0, 800d326 <_printf_float+0x41a>
 800d2f4:	4653      	mov	r3, sl
 800d2f6:	f108 0201 	add.w	r2, r8, #1
 800d2fa:	4631      	mov	r1, r6
 800d2fc:	4628      	mov	r0, r5
 800d2fe:	47b8      	blx	r7
 800d300:	3001      	adds	r0, #1
 800d302:	d10c      	bne.n	800d31e <_printf_float+0x412>
 800d304:	e65d      	b.n	800cfc2 <_printf_float+0xb6>
 800d306:	2301      	movs	r3, #1
 800d308:	465a      	mov	r2, fp
 800d30a:	4631      	mov	r1, r6
 800d30c:	4628      	mov	r0, r5
 800d30e:	47b8      	blx	r7
 800d310:	3001      	adds	r0, #1
 800d312:	f43f ae56 	beq.w	800cfc2 <_printf_float+0xb6>
 800d316:	f108 0801 	add.w	r8, r8, #1
 800d31a:	45d0      	cmp	r8, sl
 800d31c:	dbf3      	blt.n	800d306 <_printf_float+0x3fa>
 800d31e:	464b      	mov	r3, r9
 800d320:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d324:	e6df      	b.n	800d0e6 <_printf_float+0x1da>
 800d326:	f04f 0800 	mov.w	r8, #0
 800d32a:	f104 0b1a 	add.w	fp, r4, #26
 800d32e:	e7f4      	b.n	800d31a <_printf_float+0x40e>
 800d330:	2301      	movs	r3, #1
 800d332:	4642      	mov	r2, r8
 800d334:	e7e1      	b.n	800d2fa <_printf_float+0x3ee>
 800d336:	2301      	movs	r3, #1
 800d338:	464a      	mov	r2, r9
 800d33a:	4631      	mov	r1, r6
 800d33c:	4628      	mov	r0, r5
 800d33e:	47b8      	blx	r7
 800d340:	3001      	adds	r0, #1
 800d342:	f43f ae3e 	beq.w	800cfc2 <_printf_float+0xb6>
 800d346:	f108 0801 	add.w	r8, r8, #1
 800d34a:	68e3      	ldr	r3, [r4, #12]
 800d34c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d34e:	1a5b      	subs	r3, r3, r1
 800d350:	4543      	cmp	r3, r8
 800d352:	dcf0      	bgt.n	800d336 <_printf_float+0x42a>
 800d354:	e6fc      	b.n	800d150 <_printf_float+0x244>
 800d356:	f04f 0800 	mov.w	r8, #0
 800d35a:	f104 0919 	add.w	r9, r4, #25
 800d35e:	e7f4      	b.n	800d34a <_printf_float+0x43e>

0800d360 <_printf_common>:
 800d360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d364:	4616      	mov	r6, r2
 800d366:	4698      	mov	r8, r3
 800d368:	688a      	ldr	r2, [r1, #8]
 800d36a:	690b      	ldr	r3, [r1, #16]
 800d36c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d370:	4293      	cmp	r3, r2
 800d372:	bfb8      	it	lt
 800d374:	4613      	movlt	r3, r2
 800d376:	6033      	str	r3, [r6, #0]
 800d378:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d37c:	4607      	mov	r7, r0
 800d37e:	460c      	mov	r4, r1
 800d380:	b10a      	cbz	r2, 800d386 <_printf_common+0x26>
 800d382:	3301      	adds	r3, #1
 800d384:	6033      	str	r3, [r6, #0]
 800d386:	6823      	ldr	r3, [r4, #0]
 800d388:	0699      	lsls	r1, r3, #26
 800d38a:	bf42      	ittt	mi
 800d38c:	6833      	ldrmi	r3, [r6, #0]
 800d38e:	3302      	addmi	r3, #2
 800d390:	6033      	strmi	r3, [r6, #0]
 800d392:	6825      	ldr	r5, [r4, #0]
 800d394:	f015 0506 	ands.w	r5, r5, #6
 800d398:	d106      	bne.n	800d3a8 <_printf_common+0x48>
 800d39a:	f104 0a19 	add.w	sl, r4, #25
 800d39e:	68e3      	ldr	r3, [r4, #12]
 800d3a0:	6832      	ldr	r2, [r6, #0]
 800d3a2:	1a9b      	subs	r3, r3, r2
 800d3a4:	42ab      	cmp	r3, r5
 800d3a6:	dc26      	bgt.n	800d3f6 <_printf_common+0x96>
 800d3a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d3ac:	6822      	ldr	r2, [r4, #0]
 800d3ae:	3b00      	subs	r3, #0
 800d3b0:	bf18      	it	ne
 800d3b2:	2301      	movne	r3, #1
 800d3b4:	0692      	lsls	r2, r2, #26
 800d3b6:	d42b      	bmi.n	800d410 <_printf_common+0xb0>
 800d3b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d3bc:	4641      	mov	r1, r8
 800d3be:	4638      	mov	r0, r7
 800d3c0:	47c8      	blx	r9
 800d3c2:	3001      	adds	r0, #1
 800d3c4:	d01e      	beq.n	800d404 <_printf_common+0xa4>
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	6922      	ldr	r2, [r4, #16]
 800d3ca:	f003 0306 	and.w	r3, r3, #6
 800d3ce:	2b04      	cmp	r3, #4
 800d3d0:	bf02      	ittt	eq
 800d3d2:	68e5      	ldreq	r5, [r4, #12]
 800d3d4:	6833      	ldreq	r3, [r6, #0]
 800d3d6:	1aed      	subeq	r5, r5, r3
 800d3d8:	68a3      	ldr	r3, [r4, #8]
 800d3da:	bf0c      	ite	eq
 800d3dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3e0:	2500      	movne	r5, #0
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	bfc4      	itt	gt
 800d3e6:	1a9b      	subgt	r3, r3, r2
 800d3e8:	18ed      	addgt	r5, r5, r3
 800d3ea:	2600      	movs	r6, #0
 800d3ec:	341a      	adds	r4, #26
 800d3ee:	42b5      	cmp	r5, r6
 800d3f0:	d11a      	bne.n	800d428 <_printf_common+0xc8>
 800d3f2:	2000      	movs	r0, #0
 800d3f4:	e008      	b.n	800d408 <_printf_common+0xa8>
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	4652      	mov	r2, sl
 800d3fa:	4641      	mov	r1, r8
 800d3fc:	4638      	mov	r0, r7
 800d3fe:	47c8      	blx	r9
 800d400:	3001      	adds	r0, #1
 800d402:	d103      	bne.n	800d40c <_printf_common+0xac>
 800d404:	f04f 30ff 	mov.w	r0, #4294967295
 800d408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d40c:	3501      	adds	r5, #1
 800d40e:	e7c6      	b.n	800d39e <_printf_common+0x3e>
 800d410:	18e1      	adds	r1, r4, r3
 800d412:	1c5a      	adds	r2, r3, #1
 800d414:	2030      	movs	r0, #48	@ 0x30
 800d416:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d41a:	4422      	add	r2, r4
 800d41c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d420:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d424:	3302      	adds	r3, #2
 800d426:	e7c7      	b.n	800d3b8 <_printf_common+0x58>
 800d428:	2301      	movs	r3, #1
 800d42a:	4622      	mov	r2, r4
 800d42c:	4641      	mov	r1, r8
 800d42e:	4638      	mov	r0, r7
 800d430:	47c8      	blx	r9
 800d432:	3001      	adds	r0, #1
 800d434:	d0e6      	beq.n	800d404 <_printf_common+0xa4>
 800d436:	3601      	adds	r6, #1
 800d438:	e7d9      	b.n	800d3ee <_printf_common+0x8e>
	...

0800d43c <_printf_i>:
 800d43c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d440:	7e0f      	ldrb	r7, [r1, #24]
 800d442:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d444:	2f78      	cmp	r7, #120	@ 0x78
 800d446:	4691      	mov	r9, r2
 800d448:	4680      	mov	r8, r0
 800d44a:	460c      	mov	r4, r1
 800d44c:	469a      	mov	sl, r3
 800d44e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d452:	d807      	bhi.n	800d464 <_printf_i+0x28>
 800d454:	2f62      	cmp	r7, #98	@ 0x62
 800d456:	d80a      	bhi.n	800d46e <_printf_i+0x32>
 800d458:	2f00      	cmp	r7, #0
 800d45a:	f000 80d1 	beq.w	800d600 <_printf_i+0x1c4>
 800d45e:	2f58      	cmp	r7, #88	@ 0x58
 800d460:	f000 80b8 	beq.w	800d5d4 <_printf_i+0x198>
 800d464:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d468:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d46c:	e03a      	b.n	800d4e4 <_printf_i+0xa8>
 800d46e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d472:	2b15      	cmp	r3, #21
 800d474:	d8f6      	bhi.n	800d464 <_printf_i+0x28>
 800d476:	a101      	add	r1, pc, #4	@ (adr r1, 800d47c <_printf_i+0x40>)
 800d478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d47c:	0800d4d5 	.word	0x0800d4d5
 800d480:	0800d4e9 	.word	0x0800d4e9
 800d484:	0800d465 	.word	0x0800d465
 800d488:	0800d465 	.word	0x0800d465
 800d48c:	0800d465 	.word	0x0800d465
 800d490:	0800d465 	.word	0x0800d465
 800d494:	0800d4e9 	.word	0x0800d4e9
 800d498:	0800d465 	.word	0x0800d465
 800d49c:	0800d465 	.word	0x0800d465
 800d4a0:	0800d465 	.word	0x0800d465
 800d4a4:	0800d465 	.word	0x0800d465
 800d4a8:	0800d5e7 	.word	0x0800d5e7
 800d4ac:	0800d513 	.word	0x0800d513
 800d4b0:	0800d5a1 	.word	0x0800d5a1
 800d4b4:	0800d465 	.word	0x0800d465
 800d4b8:	0800d465 	.word	0x0800d465
 800d4bc:	0800d609 	.word	0x0800d609
 800d4c0:	0800d465 	.word	0x0800d465
 800d4c4:	0800d513 	.word	0x0800d513
 800d4c8:	0800d465 	.word	0x0800d465
 800d4cc:	0800d465 	.word	0x0800d465
 800d4d0:	0800d5a9 	.word	0x0800d5a9
 800d4d4:	6833      	ldr	r3, [r6, #0]
 800d4d6:	1d1a      	adds	r2, r3, #4
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	6032      	str	r2, [r6, #0]
 800d4dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d4e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	e09c      	b.n	800d622 <_printf_i+0x1e6>
 800d4e8:	6833      	ldr	r3, [r6, #0]
 800d4ea:	6820      	ldr	r0, [r4, #0]
 800d4ec:	1d19      	adds	r1, r3, #4
 800d4ee:	6031      	str	r1, [r6, #0]
 800d4f0:	0606      	lsls	r6, r0, #24
 800d4f2:	d501      	bpl.n	800d4f8 <_printf_i+0xbc>
 800d4f4:	681d      	ldr	r5, [r3, #0]
 800d4f6:	e003      	b.n	800d500 <_printf_i+0xc4>
 800d4f8:	0645      	lsls	r5, r0, #25
 800d4fa:	d5fb      	bpl.n	800d4f4 <_printf_i+0xb8>
 800d4fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d500:	2d00      	cmp	r5, #0
 800d502:	da03      	bge.n	800d50c <_printf_i+0xd0>
 800d504:	232d      	movs	r3, #45	@ 0x2d
 800d506:	426d      	negs	r5, r5
 800d508:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d50c:	4858      	ldr	r0, [pc, #352]	@ (800d670 <_printf_i+0x234>)
 800d50e:	230a      	movs	r3, #10
 800d510:	e011      	b.n	800d536 <_printf_i+0xfa>
 800d512:	6821      	ldr	r1, [r4, #0]
 800d514:	6833      	ldr	r3, [r6, #0]
 800d516:	0608      	lsls	r0, r1, #24
 800d518:	f853 5b04 	ldr.w	r5, [r3], #4
 800d51c:	d402      	bmi.n	800d524 <_printf_i+0xe8>
 800d51e:	0649      	lsls	r1, r1, #25
 800d520:	bf48      	it	mi
 800d522:	b2ad      	uxthmi	r5, r5
 800d524:	2f6f      	cmp	r7, #111	@ 0x6f
 800d526:	4852      	ldr	r0, [pc, #328]	@ (800d670 <_printf_i+0x234>)
 800d528:	6033      	str	r3, [r6, #0]
 800d52a:	bf14      	ite	ne
 800d52c:	230a      	movne	r3, #10
 800d52e:	2308      	moveq	r3, #8
 800d530:	2100      	movs	r1, #0
 800d532:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d536:	6866      	ldr	r6, [r4, #4]
 800d538:	60a6      	str	r6, [r4, #8]
 800d53a:	2e00      	cmp	r6, #0
 800d53c:	db05      	blt.n	800d54a <_printf_i+0x10e>
 800d53e:	6821      	ldr	r1, [r4, #0]
 800d540:	432e      	orrs	r6, r5
 800d542:	f021 0104 	bic.w	r1, r1, #4
 800d546:	6021      	str	r1, [r4, #0]
 800d548:	d04b      	beq.n	800d5e2 <_printf_i+0x1a6>
 800d54a:	4616      	mov	r6, r2
 800d54c:	fbb5 f1f3 	udiv	r1, r5, r3
 800d550:	fb03 5711 	mls	r7, r3, r1, r5
 800d554:	5dc7      	ldrb	r7, [r0, r7]
 800d556:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d55a:	462f      	mov	r7, r5
 800d55c:	42bb      	cmp	r3, r7
 800d55e:	460d      	mov	r5, r1
 800d560:	d9f4      	bls.n	800d54c <_printf_i+0x110>
 800d562:	2b08      	cmp	r3, #8
 800d564:	d10b      	bne.n	800d57e <_printf_i+0x142>
 800d566:	6823      	ldr	r3, [r4, #0]
 800d568:	07df      	lsls	r7, r3, #31
 800d56a:	d508      	bpl.n	800d57e <_printf_i+0x142>
 800d56c:	6923      	ldr	r3, [r4, #16]
 800d56e:	6861      	ldr	r1, [r4, #4]
 800d570:	4299      	cmp	r1, r3
 800d572:	bfde      	ittt	le
 800d574:	2330      	movle	r3, #48	@ 0x30
 800d576:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d57a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d57e:	1b92      	subs	r2, r2, r6
 800d580:	6122      	str	r2, [r4, #16]
 800d582:	f8cd a000 	str.w	sl, [sp]
 800d586:	464b      	mov	r3, r9
 800d588:	aa03      	add	r2, sp, #12
 800d58a:	4621      	mov	r1, r4
 800d58c:	4640      	mov	r0, r8
 800d58e:	f7ff fee7 	bl	800d360 <_printf_common>
 800d592:	3001      	adds	r0, #1
 800d594:	d14a      	bne.n	800d62c <_printf_i+0x1f0>
 800d596:	f04f 30ff 	mov.w	r0, #4294967295
 800d59a:	b004      	add	sp, #16
 800d59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5a0:	6823      	ldr	r3, [r4, #0]
 800d5a2:	f043 0320 	orr.w	r3, r3, #32
 800d5a6:	6023      	str	r3, [r4, #0]
 800d5a8:	4832      	ldr	r0, [pc, #200]	@ (800d674 <_printf_i+0x238>)
 800d5aa:	2778      	movs	r7, #120	@ 0x78
 800d5ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d5b0:	6823      	ldr	r3, [r4, #0]
 800d5b2:	6831      	ldr	r1, [r6, #0]
 800d5b4:	061f      	lsls	r7, r3, #24
 800d5b6:	f851 5b04 	ldr.w	r5, [r1], #4
 800d5ba:	d402      	bmi.n	800d5c2 <_printf_i+0x186>
 800d5bc:	065f      	lsls	r7, r3, #25
 800d5be:	bf48      	it	mi
 800d5c0:	b2ad      	uxthmi	r5, r5
 800d5c2:	6031      	str	r1, [r6, #0]
 800d5c4:	07d9      	lsls	r1, r3, #31
 800d5c6:	bf44      	itt	mi
 800d5c8:	f043 0320 	orrmi.w	r3, r3, #32
 800d5cc:	6023      	strmi	r3, [r4, #0]
 800d5ce:	b11d      	cbz	r5, 800d5d8 <_printf_i+0x19c>
 800d5d0:	2310      	movs	r3, #16
 800d5d2:	e7ad      	b.n	800d530 <_printf_i+0xf4>
 800d5d4:	4826      	ldr	r0, [pc, #152]	@ (800d670 <_printf_i+0x234>)
 800d5d6:	e7e9      	b.n	800d5ac <_printf_i+0x170>
 800d5d8:	6823      	ldr	r3, [r4, #0]
 800d5da:	f023 0320 	bic.w	r3, r3, #32
 800d5de:	6023      	str	r3, [r4, #0]
 800d5e0:	e7f6      	b.n	800d5d0 <_printf_i+0x194>
 800d5e2:	4616      	mov	r6, r2
 800d5e4:	e7bd      	b.n	800d562 <_printf_i+0x126>
 800d5e6:	6833      	ldr	r3, [r6, #0]
 800d5e8:	6825      	ldr	r5, [r4, #0]
 800d5ea:	6961      	ldr	r1, [r4, #20]
 800d5ec:	1d18      	adds	r0, r3, #4
 800d5ee:	6030      	str	r0, [r6, #0]
 800d5f0:	062e      	lsls	r6, r5, #24
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	d501      	bpl.n	800d5fa <_printf_i+0x1be>
 800d5f6:	6019      	str	r1, [r3, #0]
 800d5f8:	e002      	b.n	800d600 <_printf_i+0x1c4>
 800d5fa:	0668      	lsls	r0, r5, #25
 800d5fc:	d5fb      	bpl.n	800d5f6 <_printf_i+0x1ba>
 800d5fe:	8019      	strh	r1, [r3, #0]
 800d600:	2300      	movs	r3, #0
 800d602:	6123      	str	r3, [r4, #16]
 800d604:	4616      	mov	r6, r2
 800d606:	e7bc      	b.n	800d582 <_printf_i+0x146>
 800d608:	6833      	ldr	r3, [r6, #0]
 800d60a:	1d1a      	adds	r2, r3, #4
 800d60c:	6032      	str	r2, [r6, #0]
 800d60e:	681e      	ldr	r6, [r3, #0]
 800d610:	6862      	ldr	r2, [r4, #4]
 800d612:	2100      	movs	r1, #0
 800d614:	4630      	mov	r0, r6
 800d616:	f7f2 fdf3 	bl	8000200 <memchr>
 800d61a:	b108      	cbz	r0, 800d620 <_printf_i+0x1e4>
 800d61c:	1b80      	subs	r0, r0, r6
 800d61e:	6060      	str	r0, [r4, #4]
 800d620:	6863      	ldr	r3, [r4, #4]
 800d622:	6123      	str	r3, [r4, #16]
 800d624:	2300      	movs	r3, #0
 800d626:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d62a:	e7aa      	b.n	800d582 <_printf_i+0x146>
 800d62c:	6923      	ldr	r3, [r4, #16]
 800d62e:	4632      	mov	r2, r6
 800d630:	4649      	mov	r1, r9
 800d632:	4640      	mov	r0, r8
 800d634:	47d0      	blx	sl
 800d636:	3001      	adds	r0, #1
 800d638:	d0ad      	beq.n	800d596 <_printf_i+0x15a>
 800d63a:	6823      	ldr	r3, [r4, #0]
 800d63c:	079b      	lsls	r3, r3, #30
 800d63e:	d413      	bmi.n	800d668 <_printf_i+0x22c>
 800d640:	68e0      	ldr	r0, [r4, #12]
 800d642:	9b03      	ldr	r3, [sp, #12]
 800d644:	4298      	cmp	r0, r3
 800d646:	bfb8      	it	lt
 800d648:	4618      	movlt	r0, r3
 800d64a:	e7a6      	b.n	800d59a <_printf_i+0x15e>
 800d64c:	2301      	movs	r3, #1
 800d64e:	4632      	mov	r2, r6
 800d650:	4649      	mov	r1, r9
 800d652:	4640      	mov	r0, r8
 800d654:	47d0      	blx	sl
 800d656:	3001      	adds	r0, #1
 800d658:	d09d      	beq.n	800d596 <_printf_i+0x15a>
 800d65a:	3501      	adds	r5, #1
 800d65c:	68e3      	ldr	r3, [r4, #12]
 800d65e:	9903      	ldr	r1, [sp, #12]
 800d660:	1a5b      	subs	r3, r3, r1
 800d662:	42ab      	cmp	r3, r5
 800d664:	dcf2      	bgt.n	800d64c <_printf_i+0x210>
 800d666:	e7eb      	b.n	800d640 <_printf_i+0x204>
 800d668:	2500      	movs	r5, #0
 800d66a:	f104 0619 	add.w	r6, r4, #25
 800d66e:	e7f5      	b.n	800d65c <_printf_i+0x220>
 800d670:	080a39fa 	.word	0x080a39fa
 800d674:	080a3a0b 	.word	0x080a3a0b

0800d678 <std>:
 800d678:	2300      	movs	r3, #0
 800d67a:	b510      	push	{r4, lr}
 800d67c:	4604      	mov	r4, r0
 800d67e:	e9c0 3300 	strd	r3, r3, [r0]
 800d682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d686:	6083      	str	r3, [r0, #8]
 800d688:	8181      	strh	r1, [r0, #12]
 800d68a:	6643      	str	r3, [r0, #100]	@ 0x64
 800d68c:	81c2      	strh	r2, [r0, #14]
 800d68e:	6183      	str	r3, [r0, #24]
 800d690:	4619      	mov	r1, r3
 800d692:	2208      	movs	r2, #8
 800d694:	305c      	adds	r0, #92	@ 0x5c
 800d696:	f000 f9ab 	bl	800d9f0 <memset>
 800d69a:	4b0d      	ldr	r3, [pc, #52]	@ (800d6d0 <std+0x58>)
 800d69c:	6263      	str	r3, [r4, #36]	@ 0x24
 800d69e:	4b0d      	ldr	r3, [pc, #52]	@ (800d6d4 <std+0x5c>)
 800d6a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d6a2:	4b0d      	ldr	r3, [pc, #52]	@ (800d6d8 <std+0x60>)
 800d6a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d6a6:	4b0d      	ldr	r3, [pc, #52]	@ (800d6dc <std+0x64>)
 800d6a8:	6323      	str	r3, [r4, #48]	@ 0x30
 800d6aa:	4b0d      	ldr	r3, [pc, #52]	@ (800d6e0 <std+0x68>)
 800d6ac:	6224      	str	r4, [r4, #32]
 800d6ae:	429c      	cmp	r4, r3
 800d6b0:	d006      	beq.n	800d6c0 <std+0x48>
 800d6b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d6b6:	4294      	cmp	r4, r2
 800d6b8:	d002      	beq.n	800d6c0 <std+0x48>
 800d6ba:	33d0      	adds	r3, #208	@ 0xd0
 800d6bc:	429c      	cmp	r4, r3
 800d6be:	d105      	bne.n	800d6cc <std+0x54>
 800d6c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6c8:	f000 ba1e 	b.w	800db08 <__retarget_lock_init_recursive>
 800d6cc:	bd10      	pop	{r4, pc}
 800d6ce:	bf00      	nop
 800d6d0:	0800d841 	.word	0x0800d841
 800d6d4:	0800d863 	.word	0x0800d863
 800d6d8:	0800d89b 	.word	0x0800d89b
 800d6dc:	0800d8bf 	.word	0x0800d8bf
 800d6e0:	200082f8 	.word	0x200082f8

0800d6e4 <stdio_exit_handler>:
 800d6e4:	4a02      	ldr	r2, [pc, #8]	@ (800d6f0 <stdio_exit_handler+0xc>)
 800d6e6:	4903      	ldr	r1, [pc, #12]	@ (800d6f4 <stdio_exit_handler+0x10>)
 800d6e8:	4803      	ldr	r0, [pc, #12]	@ (800d6f8 <stdio_exit_handler+0x14>)
 800d6ea:	f000 b869 	b.w	800d7c0 <_fwalk_sglue>
 800d6ee:	bf00      	nop
 800d6f0:	20000a68 	.word	0x20000a68
 800d6f4:	0800f5b5 	.word	0x0800f5b5
 800d6f8:	20000a78 	.word	0x20000a78

0800d6fc <cleanup_stdio>:
 800d6fc:	6841      	ldr	r1, [r0, #4]
 800d6fe:	4b0c      	ldr	r3, [pc, #48]	@ (800d730 <cleanup_stdio+0x34>)
 800d700:	4299      	cmp	r1, r3
 800d702:	b510      	push	{r4, lr}
 800d704:	4604      	mov	r4, r0
 800d706:	d001      	beq.n	800d70c <cleanup_stdio+0x10>
 800d708:	f001 ff54 	bl	800f5b4 <_fflush_r>
 800d70c:	68a1      	ldr	r1, [r4, #8]
 800d70e:	4b09      	ldr	r3, [pc, #36]	@ (800d734 <cleanup_stdio+0x38>)
 800d710:	4299      	cmp	r1, r3
 800d712:	d002      	beq.n	800d71a <cleanup_stdio+0x1e>
 800d714:	4620      	mov	r0, r4
 800d716:	f001 ff4d 	bl	800f5b4 <_fflush_r>
 800d71a:	68e1      	ldr	r1, [r4, #12]
 800d71c:	4b06      	ldr	r3, [pc, #24]	@ (800d738 <cleanup_stdio+0x3c>)
 800d71e:	4299      	cmp	r1, r3
 800d720:	d004      	beq.n	800d72c <cleanup_stdio+0x30>
 800d722:	4620      	mov	r0, r4
 800d724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d728:	f001 bf44 	b.w	800f5b4 <_fflush_r>
 800d72c:	bd10      	pop	{r4, pc}
 800d72e:	bf00      	nop
 800d730:	200082f8 	.word	0x200082f8
 800d734:	20008360 	.word	0x20008360
 800d738:	200083c8 	.word	0x200083c8

0800d73c <global_stdio_init.part.0>:
 800d73c:	b510      	push	{r4, lr}
 800d73e:	4b0b      	ldr	r3, [pc, #44]	@ (800d76c <global_stdio_init.part.0+0x30>)
 800d740:	4c0b      	ldr	r4, [pc, #44]	@ (800d770 <global_stdio_init.part.0+0x34>)
 800d742:	4a0c      	ldr	r2, [pc, #48]	@ (800d774 <global_stdio_init.part.0+0x38>)
 800d744:	601a      	str	r2, [r3, #0]
 800d746:	4620      	mov	r0, r4
 800d748:	2200      	movs	r2, #0
 800d74a:	2104      	movs	r1, #4
 800d74c:	f7ff ff94 	bl	800d678 <std>
 800d750:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d754:	2201      	movs	r2, #1
 800d756:	2109      	movs	r1, #9
 800d758:	f7ff ff8e 	bl	800d678 <std>
 800d75c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d760:	2202      	movs	r2, #2
 800d762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d766:	2112      	movs	r1, #18
 800d768:	f7ff bf86 	b.w	800d678 <std>
 800d76c:	20008430 	.word	0x20008430
 800d770:	200082f8 	.word	0x200082f8
 800d774:	0800d6e5 	.word	0x0800d6e5

0800d778 <__sfp_lock_acquire>:
 800d778:	4801      	ldr	r0, [pc, #4]	@ (800d780 <__sfp_lock_acquire+0x8>)
 800d77a:	f000 b9c6 	b.w	800db0a <__retarget_lock_acquire_recursive>
 800d77e:	bf00      	nop
 800d780:	20008439 	.word	0x20008439

0800d784 <__sfp_lock_release>:
 800d784:	4801      	ldr	r0, [pc, #4]	@ (800d78c <__sfp_lock_release+0x8>)
 800d786:	f000 b9c1 	b.w	800db0c <__retarget_lock_release_recursive>
 800d78a:	bf00      	nop
 800d78c:	20008439 	.word	0x20008439

0800d790 <__sinit>:
 800d790:	b510      	push	{r4, lr}
 800d792:	4604      	mov	r4, r0
 800d794:	f7ff fff0 	bl	800d778 <__sfp_lock_acquire>
 800d798:	6a23      	ldr	r3, [r4, #32]
 800d79a:	b11b      	cbz	r3, 800d7a4 <__sinit+0x14>
 800d79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7a0:	f7ff bff0 	b.w	800d784 <__sfp_lock_release>
 800d7a4:	4b04      	ldr	r3, [pc, #16]	@ (800d7b8 <__sinit+0x28>)
 800d7a6:	6223      	str	r3, [r4, #32]
 800d7a8:	4b04      	ldr	r3, [pc, #16]	@ (800d7bc <__sinit+0x2c>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d1f5      	bne.n	800d79c <__sinit+0xc>
 800d7b0:	f7ff ffc4 	bl	800d73c <global_stdio_init.part.0>
 800d7b4:	e7f2      	b.n	800d79c <__sinit+0xc>
 800d7b6:	bf00      	nop
 800d7b8:	0800d6fd 	.word	0x0800d6fd
 800d7bc:	20008430 	.word	0x20008430

0800d7c0 <_fwalk_sglue>:
 800d7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7c4:	4607      	mov	r7, r0
 800d7c6:	4688      	mov	r8, r1
 800d7c8:	4614      	mov	r4, r2
 800d7ca:	2600      	movs	r6, #0
 800d7cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d7d0:	f1b9 0901 	subs.w	r9, r9, #1
 800d7d4:	d505      	bpl.n	800d7e2 <_fwalk_sglue+0x22>
 800d7d6:	6824      	ldr	r4, [r4, #0]
 800d7d8:	2c00      	cmp	r4, #0
 800d7da:	d1f7      	bne.n	800d7cc <_fwalk_sglue+0xc>
 800d7dc:	4630      	mov	r0, r6
 800d7de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7e2:	89ab      	ldrh	r3, [r5, #12]
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d907      	bls.n	800d7f8 <_fwalk_sglue+0x38>
 800d7e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	d003      	beq.n	800d7f8 <_fwalk_sglue+0x38>
 800d7f0:	4629      	mov	r1, r5
 800d7f2:	4638      	mov	r0, r7
 800d7f4:	47c0      	blx	r8
 800d7f6:	4306      	orrs	r6, r0
 800d7f8:	3568      	adds	r5, #104	@ 0x68
 800d7fa:	e7e9      	b.n	800d7d0 <_fwalk_sglue+0x10>

0800d7fc <siprintf>:
 800d7fc:	b40e      	push	{r1, r2, r3}
 800d7fe:	b510      	push	{r4, lr}
 800d800:	b09d      	sub	sp, #116	@ 0x74
 800d802:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d804:	9002      	str	r0, [sp, #8]
 800d806:	9006      	str	r0, [sp, #24]
 800d808:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d80c:	480a      	ldr	r0, [pc, #40]	@ (800d838 <siprintf+0x3c>)
 800d80e:	9107      	str	r1, [sp, #28]
 800d810:	9104      	str	r1, [sp, #16]
 800d812:	490a      	ldr	r1, [pc, #40]	@ (800d83c <siprintf+0x40>)
 800d814:	f853 2b04 	ldr.w	r2, [r3], #4
 800d818:	9105      	str	r1, [sp, #20]
 800d81a:	2400      	movs	r4, #0
 800d81c:	a902      	add	r1, sp, #8
 800d81e:	6800      	ldr	r0, [r0, #0]
 800d820:	9301      	str	r3, [sp, #4]
 800d822:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d824:	f001 fc04 	bl	800f030 <_svfiprintf_r>
 800d828:	9b02      	ldr	r3, [sp, #8]
 800d82a:	701c      	strb	r4, [r3, #0]
 800d82c:	b01d      	add	sp, #116	@ 0x74
 800d82e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d832:	b003      	add	sp, #12
 800d834:	4770      	bx	lr
 800d836:	bf00      	nop
 800d838:	20000a74 	.word	0x20000a74
 800d83c:	ffff0208 	.word	0xffff0208

0800d840 <__sread>:
 800d840:	b510      	push	{r4, lr}
 800d842:	460c      	mov	r4, r1
 800d844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d848:	f000 f900 	bl	800da4c <_read_r>
 800d84c:	2800      	cmp	r0, #0
 800d84e:	bfab      	itete	ge
 800d850:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d852:	89a3      	ldrhlt	r3, [r4, #12]
 800d854:	181b      	addge	r3, r3, r0
 800d856:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d85a:	bfac      	ite	ge
 800d85c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d85e:	81a3      	strhlt	r3, [r4, #12]
 800d860:	bd10      	pop	{r4, pc}

0800d862 <__swrite>:
 800d862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d866:	461f      	mov	r7, r3
 800d868:	898b      	ldrh	r3, [r1, #12]
 800d86a:	05db      	lsls	r3, r3, #23
 800d86c:	4605      	mov	r5, r0
 800d86e:	460c      	mov	r4, r1
 800d870:	4616      	mov	r6, r2
 800d872:	d505      	bpl.n	800d880 <__swrite+0x1e>
 800d874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d878:	2302      	movs	r3, #2
 800d87a:	2200      	movs	r2, #0
 800d87c:	f000 f8d4 	bl	800da28 <_lseek_r>
 800d880:	89a3      	ldrh	r3, [r4, #12]
 800d882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d886:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d88a:	81a3      	strh	r3, [r4, #12]
 800d88c:	4632      	mov	r2, r6
 800d88e:	463b      	mov	r3, r7
 800d890:	4628      	mov	r0, r5
 800d892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d896:	f000 b8fb 	b.w	800da90 <_write_r>

0800d89a <__sseek>:
 800d89a:	b510      	push	{r4, lr}
 800d89c:	460c      	mov	r4, r1
 800d89e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8a2:	f000 f8c1 	bl	800da28 <_lseek_r>
 800d8a6:	1c43      	adds	r3, r0, #1
 800d8a8:	89a3      	ldrh	r3, [r4, #12]
 800d8aa:	bf15      	itete	ne
 800d8ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d8ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d8b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d8b6:	81a3      	strheq	r3, [r4, #12]
 800d8b8:	bf18      	it	ne
 800d8ba:	81a3      	strhne	r3, [r4, #12]
 800d8bc:	bd10      	pop	{r4, pc}

0800d8be <__sclose>:
 800d8be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8c2:	f000 b8a1 	b.w	800da08 <_close_r>

0800d8c6 <__swbuf_r>:
 800d8c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8c8:	460e      	mov	r6, r1
 800d8ca:	4614      	mov	r4, r2
 800d8cc:	4605      	mov	r5, r0
 800d8ce:	b118      	cbz	r0, 800d8d8 <__swbuf_r+0x12>
 800d8d0:	6a03      	ldr	r3, [r0, #32]
 800d8d2:	b90b      	cbnz	r3, 800d8d8 <__swbuf_r+0x12>
 800d8d4:	f7ff ff5c 	bl	800d790 <__sinit>
 800d8d8:	69a3      	ldr	r3, [r4, #24]
 800d8da:	60a3      	str	r3, [r4, #8]
 800d8dc:	89a3      	ldrh	r3, [r4, #12]
 800d8de:	071a      	lsls	r2, r3, #28
 800d8e0:	d501      	bpl.n	800d8e6 <__swbuf_r+0x20>
 800d8e2:	6923      	ldr	r3, [r4, #16]
 800d8e4:	b943      	cbnz	r3, 800d8f8 <__swbuf_r+0x32>
 800d8e6:	4621      	mov	r1, r4
 800d8e8:	4628      	mov	r0, r5
 800d8ea:	f000 f82b 	bl	800d944 <__swsetup_r>
 800d8ee:	b118      	cbz	r0, 800d8f8 <__swbuf_r+0x32>
 800d8f0:	f04f 37ff 	mov.w	r7, #4294967295
 800d8f4:	4638      	mov	r0, r7
 800d8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8f8:	6823      	ldr	r3, [r4, #0]
 800d8fa:	6922      	ldr	r2, [r4, #16]
 800d8fc:	1a98      	subs	r0, r3, r2
 800d8fe:	6963      	ldr	r3, [r4, #20]
 800d900:	b2f6      	uxtb	r6, r6
 800d902:	4283      	cmp	r3, r0
 800d904:	4637      	mov	r7, r6
 800d906:	dc05      	bgt.n	800d914 <__swbuf_r+0x4e>
 800d908:	4621      	mov	r1, r4
 800d90a:	4628      	mov	r0, r5
 800d90c:	f001 fe52 	bl	800f5b4 <_fflush_r>
 800d910:	2800      	cmp	r0, #0
 800d912:	d1ed      	bne.n	800d8f0 <__swbuf_r+0x2a>
 800d914:	68a3      	ldr	r3, [r4, #8]
 800d916:	3b01      	subs	r3, #1
 800d918:	60a3      	str	r3, [r4, #8]
 800d91a:	6823      	ldr	r3, [r4, #0]
 800d91c:	1c5a      	adds	r2, r3, #1
 800d91e:	6022      	str	r2, [r4, #0]
 800d920:	701e      	strb	r6, [r3, #0]
 800d922:	6962      	ldr	r2, [r4, #20]
 800d924:	1c43      	adds	r3, r0, #1
 800d926:	429a      	cmp	r2, r3
 800d928:	d004      	beq.n	800d934 <__swbuf_r+0x6e>
 800d92a:	89a3      	ldrh	r3, [r4, #12]
 800d92c:	07db      	lsls	r3, r3, #31
 800d92e:	d5e1      	bpl.n	800d8f4 <__swbuf_r+0x2e>
 800d930:	2e0a      	cmp	r6, #10
 800d932:	d1df      	bne.n	800d8f4 <__swbuf_r+0x2e>
 800d934:	4621      	mov	r1, r4
 800d936:	4628      	mov	r0, r5
 800d938:	f001 fe3c 	bl	800f5b4 <_fflush_r>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	d0d9      	beq.n	800d8f4 <__swbuf_r+0x2e>
 800d940:	e7d6      	b.n	800d8f0 <__swbuf_r+0x2a>
	...

0800d944 <__swsetup_r>:
 800d944:	b538      	push	{r3, r4, r5, lr}
 800d946:	4b29      	ldr	r3, [pc, #164]	@ (800d9ec <__swsetup_r+0xa8>)
 800d948:	4605      	mov	r5, r0
 800d94a:	6818      	ldr	r0, [r3, #0]
 800d94c:	460c      	mov	r4, r1
 800d94e:	b118      	cbz	r0, 800d958 <__swsetup_r+0x14>
 800d950:	6a03      	ldr	r3, [r0, #32]
 800d952:	b90b      	cbnz	r3, 800d958 <__swsetup_r+0x14>
 800d954:	f7ff ff1c 	bl	800d790 <__sinit>
 800d958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d95c:	0719      	lsls	r1, r3, #28
 800d95e:	d422      	bmi.n	800d9a6 <__swsetup_r+0x62>
 800d960:	06da      	lsls	r2, r3, #27
 800d962:	d407      	bmi.n	800d974 <__swsetup_r+0x30>
 800d964:	2209      	movs	r2, #9
 800d966:	602a      	str	r2, [r5, #0]
 800d968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d96c:	81a3      	strh	r3, [r4, #12]
 800d96e:	f04f 30ff 	mov.w	r0, #4294967295
 800d972:	e033      	b.n	800d9dc <__swsetup_r+0x98>
 800d974:	0758      	lsls	r0, r3, #29
 800d976:	d512      	bpl.n	800d99e <__swsetup_r+0x5a>
 800d978:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d97a:	b141      	cbz	r1, 800d98e <__swsetup_r+0x4a>
 800d97c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d980:	4299      	cmp	r1, r3
 800d982:	d002      	beq.n	800d98a <__swsetup_r+0x46>
 800d984:	4628      	mov	r0, r5
 800d986:	f000 ff2b 	bl	800e7e0 <_free_r>
 800d98a:	2300      	movs	r3, #0
 800d98c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d98e:	89a3      	ldrh	r3, [r4, #12]
 800d990:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d994:	81a3      	strh	r3, [r4, #12]
 800d996:	2300      	movs	r3, #0
 800d998:	6063      	str	r3, [r4, #4]
 800d99a:	6923      	ldr	r3, [r4, #16]
 800d99c:	6023      	str	r3, [r4, #0]
 800d99e:	89a3      	ldrh	r3, [r4, #12]
 800d9a0:	f043 0308 	orr.w	r3, r3, #8
 800d9a4:	81a3      	strh	r3, [r4, #12]
 800d9a6:	6923      	ldr	r3, [r4, #16]
 800d9a8:	b94b      	cbnz	r3, 800d9be <__swsetup_r+0x7a>
 800d9aa:	89a3      	ldrh	r3, [r4, #12]
 800d9ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d9b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d9b4:	d003      	beq.n	800d9be <__swsetup_r+0x7a>
 800d9b6:	4621      	mov	r1, r4
 800d9b8:	4628      	mov	r0, r5
 800d9ba:	f001 fe49 	bl	800f650 <__smakebuf_r>
 800d9be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9c2:	f013 0201 	ands.w	r2, r3, #1
 800d9c6:	d00a      	beq.n	800d9de <__swsetup_r+0x9a>
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	60a2      	str	r2, [r4, #8]
 800d9cc:	6962      	ldr	r2, [r4, #20]
 800d9ce:	4252      	negs	r2, r2
 800d9d0:	61a2      	str	r2, [r4, #24]
 800d9d2:	6922      	ldr	r2, [r4, #16]
 800d9d4:	b942      	cbnz	r2, 800d9e8 <__swsetup_r+0xa4>
 800d9d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d9da:	d1c5      	bne.n	800d968 <__swsetup_r+0x24>
 800d9dc:	bd38      	pop	{r3, r4, r5, pc}
 800d9de:	0799      	lsls	r1, r3, #30
 800d9e0:	bf58      	it	pl
 800d9e2:	6962      	ldrpl	r2, [r4, #20]
 800d9e4:	60a2      	str	r2, [r4, #8]
 800d9e6:	e7f4      	b.n	800d9d2 <__swsetup_r+0x8e>
 800d9e8:	2000      	movs	r0, #0
 800d9ea:	e7f7      	b.n	800d9dc <__swsetup_r+0x98>
 800d9ec:	20000a74 	.word	0x20000a74

0800d9f0 <memset>:
 800d9f0:	4402      	add	r2, r0
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d100      	bne.n	800d9fa <memset+0xa>
 800d9f8:	4770      	bx	lr
 800d9fa:	f803 1b01 	strb.w	r1, [r3], #1
 800d9fe:	e7f9      	b.n	800d9f4 <memset+0x4>

0800da00 <_localeconv_r>:
 800da00:	4800      	ldr	r0, [pc, #0]	@ (800da04 <_localeconv_r+0x4>)
 800da02:	4770      	bx	lr
 800da04:	20000bb4 	.word	0x20000bb4

0800da08 <_close_r>:
 800da08:	b538      	push	{r3, r4, r5, lr}
 800da0a:	4d06      	ldr	r5, [pc, #24]	@ (800da24 <_close_r+0x1c>)
 800da0c:	2300      	movs	r3, #0
 800da0e:	4604      	mov	r4, r0
 800da10:	4608      	mov	r0, r1
 800da12:	602b      	str	r3, [r5, #0]
 800da14:	f002 f8fe 	bl	800fc14 <_close>
 800da18:	1c43      	adds	r3, r0, #1
 800da1a:	d102      	bne.n	800da22 <_close_r+0x1a>
 800da1c:	682b      	ldr	r3, [r5, #0]
 800da1e:	b103      	cbz	r3, 800da22 <_close_r+0x1a>
 800da20:	6023      	str	r3, [r4, #0]
 800da22:	bd38      	pop	{r3, r4, r5, pc}
 800da24:	20008434 	.word	0x20008434

0800da28 <_lseek_r>:
 800da28:	b538      	push	{r3, r4, r5, lr}
 800da2a:	4d07      	ldr	r5, [pc, #28]	@ (800da48 <_lseek_r+0x20>)
 800da2c:	4604      	mov	r4, r0
 800da2e:	4608      	mov	r0, r1
 800da30:	4611      	mov	r1, r2
 800da32:	2200      	movs	r2, #0
 800da34:	602a      	str	r2, [r5, #0]
 800da36:	461a      	mov	r2, r3
 800da38:	f002 f914 	bl	800fc64 <_lseek>
 800da3c:	1c43      	adds	r3, r0, #1
 800da3e:	d102      	bne.n	800da46 <_lseek_r+0x1e>
 800da40:	682b      	ldr	r3, [r5, #0]
 800da42:	b103      	cbz	r3, 800da46 <_lseek_r+0x1e>
 800da44:	6023      	str	r3, [r4, #0]
 800da46:	bd38      	pop	{r3, r4, r5, pc}
 800da48:	20008434 	.word	0x20008434

0800da4c <_read_r>:
 800da4c:	b538      	push	{r3, r4, r5, lr}
 800da4e:	4d07      	ldr	r5, [pc, #28]	@ (800da6c <_read_r+0x20>)
 800da50:	4604      	mov	r4, r0
 800da52:	4608      	mov	r0, r1
 800da54:	4611      	mov	r1, r2
 800da56:	2200      	movs	r2, #0
 800da58:	602a      	str	r2, [r5, #0]
 800da5a:	461a      	mov	r2, r3
 800da5c:	f002 f90a 	bl	800fc74 <_read>
 800da60:	1c43      	adds	r3, r0, #1
 800da62:	d102      	bne.n	800da6a <_read_r+0x1e>
 800da64:	682b      	ldr	r3, [r5, #0]
 800da66:	b103      	cbz	r3, 800da6a <_read_r+0x1e>
 800da68:	6023      	str	r3, [r4, #0]
 800da6a:	bd38      	pop	{r3, r4, r5, pc}
 800da6c:	20008434 	.word	0x20008434

0800da70 <_sbrk_r>:
 800da70:	b538      	push	{r3, r4, r5, lr}
 800da72:	4d06      	ldr	r5, [pc, #24]	@ (800da8c <_sbrk_r+0x1c>)
 800da74:	2300      	movs	r3, #0
 800da76:	4604      	mov	r4, r0
 800da78:	4608      	mov	r0, r1
 800da7a:	602b      	str	r3, [r5, #0]
 800da7c:	f7f4 fd8c 	bl	8002598 <_sbrk>
 800da80:	1c43      	adds	r3, r0, #1
 800da82:	d102      	bne.n	800da8a <_sbrk_r+0x1a>
 800da84:	682b      	ldr	r3, [r5, #0]
 800da86:	b103      	cbz	r3, 800da8a <_sbrk_r+0x1a>
 800da88:	6023      	str	r3, [r4, #0]
 800da8a:	bd38      	pop	{r3, r4, r5, pc}
 800da8c:	20008434 	.word	0x20008434

0800da90 <_write_r>:
 800da90:	b538      	push	{r3, r4, r5, lr}
 800da92:	4d07      	ldr	r5, [pc, #28]	@ (800dab0 <_write_r+0x20>)
 800da94:	4604      	mov	r4, r0
 800da96:	4608      	mov	r0, r1
 800da98:	4611      	mov	r1, r2
 800da9a:	2200      	movs	r2, #0
 800da9c:	602a      	str	r2, [r5, #0]
 800da9e:	461a      	mov	r2, r3
 800daa0:	f002 f8f0 	bl	800fc84 <_write>
 800daa4:	1c43      	adds	r3, r0, #1
 800daa6:	d102      	bne.n	800daae <_write_r+0x1e>
 800daa8:	682b      	ldr	r3, [r5, #0]
 800daaa:	b103      	cbz	r3, 800daae <_write_r+0x1e>
 800daac:	6023      	str	r3, [r4, #0]
 800daae:	bd38      	pop	{r3, r4, r5, pc}
 800dab0:	20008434 	.word	0x20008434

0800dab4 <__errno>:
 800dab4:	4b01      	ldr	r3, [pc, #4]	@ (800dabc <__errno+0x8>)
 800dab6:	6818      	ldr	r0, [r3, #0]
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop
 800dabc:	20000a74 	.word	0x20000a74

0800dac0 <__libc_init_array>:
 800dac0:	b570      	push	{r4, r5, r6, lr}
 800dac2:	4d0d      	ldr	r5, [pc, #52]	@ (800daf8 <__libc_init_array+0x38>)
 800dac4:	4c0d      	ldr	r4, [pc, #52]	@ (800dafc <__libc_init_array+0x3c>)
 800dac6:	1b64      	subs	r4, r4, r5
 800dac8:	10a4      	asrs	r4, r4, #2
 800daca:	2600      	movs	r6, #0
 800dacc:	42a6      	cmp	r6, r4
 800dace:	d109      	bne.n	800dae4 <__libc_init_array+0x24>
 800dad0:	4d0b      	ldr	r5, [pc, #44]	@ (800db00 <__libc_init_array+0x40>)
 800dad2:	4c0c      	ldr	r4, [pc, #48]	@ (800db04 <__libc_init_array+0x44>)
 800dad4:	f002 f8e0 	bl	800fc98 <_init>
 800dad8:	1b64      	subs	r4, r4, r5
 800dada:	10a4      	asrs	r4, r4, #2
 800dadc:	2600      	movs	r6, #0
 800dade:	42a6      	cmp	r6, r4
 800dae0:	d105      	bne.n	800daee <__libc_init_array+0x2e>
 800dae2:	bd70      	pop	{r4, r5, r6, pc}
 800dae4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dae8:	4798      	blx	r3
 800daea:	3601      	adds	r6, #1
 800daec:	e7ee      	b.n	800dacc <__libc_init_array+0xc>
 800daee:	f855 3b04 	ldr.w	r3, [r5], #4
 800daf2:	4798      	blx	r3
 800daf4:	3601      	adds	r6, #1
 800daf6:	e7f2      	b.n	800dade <__libc_init_array+0x1e>
 800daf8:	080a3d7c 	.word	0x080a3d7c
 800dafc:	080a3d7c 	.word	0x080a3d7c
 800db00:	080a3d7c 	.word	0x080a3d7c
 800db04:	080a3d80 	.word	0x080a3d80

0800db08 <__retarget_lock_init_recursive>:
 800db08:	4770      	bx	lr

0800db0a <__retarget_lock_acquire_recursive>:
 800db0a:	4770      	bx	lr

0800db0c <__retarget_lock_release_recursive>:
 800db0c:	4770      	bx	lr

0800db0e <memcpy>:
 800db0e:	440a      	add	r2, r1
 800db10:	4291      	cmp	r1, r2
 800db12:	f100 33ff 	add.w	r3, r0, #4294967295
 800db16:	d100      	bne.n	800db1a <memcpy+0xc>
 800db18:	4770      	bx	lr
 800db1a:	b510      	push	{r4, lr}
 800db1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db20:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db24:	4291      	cmp	r1, r2
 800db26:	d1f9      	bne.n	800db1c <memcpy+0xe>
 800db28:	bd10      	pop	{r4, pc}

0800db2a <quorem>:
 800db2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db2e:	6903      	ldr	r3, [r0, #16]
 800db30:	690c      	ldr	r4, [r1, #16]
 800db32:	42a3      	cmp	r3, r4
 800db34:	4607      	mov	r7, r0
 800db36:	db7e      	blt.n	800dc36 <quorem+0x10c>
 800db38:	3c01      	subs	r4, #1
 800db3a:	f101 0814 	add.w	r8, r1, #20
 800db3e:	00a3      	lsls	r3, r4, #2
 800db40:	f100 0514 	add.w	r5, r0, #20
 800db44:	9300      	str	r3, [sp, #0]
 800db46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db4a:	9301      	str	r3, [sp, #4]
 800db4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800db50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db54:	3301      	adds	r3, #1
 800db56:	429a      	cmp	r2, r3
 800db58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800db5c:	fbb2 f6f3 	udiv	r6, r2, r3
 800db60:	d32e      	bcc.n	800dbc0 <quorem+0x96>
 800db62:	f04f 0a00 	mov.w	sl, #0
 800db66:	46c4      	mov	ip, r8
 800db68:	46ae      	mov	lr, r5
 800db6a:	46d3      	mov	fp, sl
 800db6c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800db70:	b298      	uxth	r0, r3
 800db72:	fb06 a000 	mla	r0, r6, r0, sl
 800db76:	0c02      	lsrs	r2, r0, #16
 800db78:	0c1b      	lsrs	r3, r3, #16
 800db7a:	fb06 2303 	mla	r3, r6, r3, r2
 800db7e:	f8de 2000 	ldr.w	r2, [lr]
 800db82:	b280      	uxth	r0, r0
 800db84:	b292      	uxth	r2, r2
 800db86:	1a12      	subs	r2, r2, r0
 800db88:	445a      	add	r2, fp
 800db8a:	f8de 0000 	ldr.w	r0, [lr]
 800db8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800db92:	b29b      	uxth	r3, r3
 800db94:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800db98:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800db9c:	b292      	uxth	r2, r2
 800db9e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dba2:	45e1      	cmp	r9, ip
 800dba4:	f84e 2b04 	str.w	r2, [lr], #4
 800dba8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dbac:	d2de      	bcs.n	800db6c <quorem+0x42>
 800dbae:	9b00      	ldr	r3, [sp, #0]
 800dbb0:	58eb      	ldr	r3, [r5, r3]
 800dbb2:	b92b      	cbnz	r3, 800dbc0 <quorem+0x96>
 800dbb4:	9b01      	ldr	r3, [sp, #4]
 800dbb6:	3b04      	subs	r3, #4
 800dbb8:	429d      	cmp	r5, r3
 800dbba:	461a      	mov	r2, r3
 800dbbc:	d32f      	bcc.n	800dc1e <quorem+0xf4>
 800dbbe:	613c      	str	r4, [r7, #16]
 800dbc0:	4638      	mov	r0, r7
 800dbc2:	f001 f8c9 	bl	800ed58 <__mcmp>
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	db25      	blt.n	800dc16 <quorem+0xec>
 800dbca:	4629      	mov	r1, r5
 800dbcc:	2000      	movs	r0, #0
 800dbce:	f858 2b04 	ldr.w	r2, [r8], #4
 800dbd2:	f8d1 c000 	ldr.w	ip, [r1]
 800dbd6:	fa1f fe82 	uxth.w	lr, r2
 800dbda:	fa1f f38c 	uxth.w	r3, ip
 800dbde:	eba3 030e 	sub.w	r3, r3, lr
 800dbe2:	4403      	add	r3, r0
 800dbe4:	0c12      	lsrs	r2, r2, #16
 800dbe6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dbea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbf4:	45c1      	cmp	r9, r8
 800dbf6:	f841 3b04 	str.w	r3, [r1], #4
 800dbfa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dbfe:	d2e6      	bcs.n	800dbce <quorem+0xa4>
 800dc00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc08:	b922      	cbnz	r2, 800dc14 <quorem+0xea>
 800dc0a:	3b04      	subs	r3, #4
 800dc0c:	429d      	cmp	r5, r3
 800dc0e:	461a      	mov	r2, r3
 800dc10:	d30b      	bcc.n	800dc2a <quorem+0x100>
 800dc12:	613c      	str	r4, [r7, #16]
 800dc14:	3601      	adds	r6, #1
 800dc16:	4630      	mov	r0, r6
 800dc18:	b003      	add	sp, #12
 800dc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc1e:	6812      	ldr	r2, [r2, #0]
 800dc20:	3b04      	subs	r3, #4
 800dc22:	2a00      	cmp	r2, #0
 800dc24:	d1cb      	bne.n	800dbbe <quorem+0x94>
 800dc26:	3c01      	subs	r4, #1
 800dc28:	e7c6      	b.n	800dbb8 <quorem+0x8e>
 800dc2a:	6812      	ldr	r2, [r2, #0]
 800dc2c:	3b04      	subs	r3, #4
 800dc2e:	2a00      	cmp	r2, #0
 800dc30:	d1ef      	bne.n	800dc12 <quorem+0xe8>
 800dc32:	3c01      	subs	r4, #1
 800dc34:	e7ea      	b.n	800dc0c <quorem+0xe2>
 800dc36:	2000      	movs	r0, #0
 800dc38:	e7ee      	b.n	800dc18 <quorem+0xee>
 800dc3a:	0000      	movs	r0, r0
 800dc3c:	0000      	movs	r0, r0
	...

0800dc40 <_dtoa_r>:
 800dc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc44:	69c7      	ldr	r7, [r0, #28]
 800dc46:	b097      	sub	sp, #92	@ 0x5c
 800dc48:	ed8d 0b04 	vstr	d0, [sp, #16]
 800dc4c:	ec55 4b10 	vmov	r4, r5, d0
 800dc50:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800dc52:	9107      	str	r1, [sp, #28]
 800dc54:	4681      	mov	r9, r0
 800dc56:	920c      	str	r2, [sp, #48]	@ 0x30
 800dc58:	9311      	str	r3, [sp, #68]	@ 0x44
 800dc5a:	b97f      	cbnz	r7, 800dc7c <_dtoa_r+0x3c>
 800dc5c:	2010      	movs	r0, #16
 800dc5e:	f7fe ffd1 	bl	800cc04 <malloc>
 800dc62:	4602      	mov	r2, r0
 800dc64:	f8c9 001c 	str.w	r0, [r9, #28]
 800dc68:	b920      	cbnz	r0, 800dc74 <_dtoa_r+0x34>
 800dc6a:	4ba9      	ldr	r3, [pc, #676]	@ (800df10 <_dtoa_r+0x2d0>)
 800dc6c:	21ef      	movs	r1, #239	@ 0xef
 800dc6e:	48a9      	ldr	r0, [pc, #676]	@ (800df14 <_dtoa_r+0x2d4>)
 800dc70:	f001 fd66 	bl	800f740 <__assert_func>
 800dc74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dc78:	6007      	str	r7, [r0, #0]
 800dc7a:	60c7      	str	r7, [r0, #12]
 800dc7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dc80:	6819      	ldr	r1, [r3, #0]
 800dc82:	b159      	cbz	r1, 800dc9c <_dtoa_r+0x5c>
 800dc84:	685a      	ldr	r2, [r3, #4]
 800dc86:	604a      	str	r2, [r1, #4]
 800dc88:	2301      	movs	r3, #1
 800dc8a:	4093      	lsls	r3, r2
 800dc8c:	608b      	str	r3, [r1, #8]
 800dc8e:	4648      	mov	r0, r9
 800dc90:	f000 fe30 	bl	800e8f4 <_Bfree>
 800dc94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	601a      	str	r2, [r3, #0]
 800dc9c:	1e2b      	subs	r3, r5, #0
 800dc9e:	bfb9      	ittee	lt
 800dca0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dca4:	9305      	strlt	r3, [sp, #20]
 800dca6:	2300      	movge	r3, #0
 800dca8:	6033      	strge	r3, [r6, #0]
 800dcaa:	9f05      	ldr	r7, [sp, #20]
 800dcac:	4b9a      	ldr	r3, [pc, #616]	@ (800df18 <_dtoa_r+0x2d8>)
 800dcae:	bfbc      	itt	lt
 800dcb0:	2201      	movlt	r2, #1
 800dcb2:	6032      	strlt	r2, [r6, #0]
 800dcb4:	43bb      	bics	r3, r7
 800dcb6:	d112      	bne.n	800dcde <_dtoa_r+0x9e>
 800dcb8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dcba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dcbe:	6013      	str	r3, [r2, #0]
 800dcc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dcc4:	4323      	orrs	r3, r4
 800dcc6:	f000 855a 	beq.w	800e77e <_dtoa_r+0xb3e>
 800dcca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dccc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800df2c <_dtoa_r+0x2ec>
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	f000 855c 	beq.w	800e78e <_dtoa_r+0xb4e>
 800dcd6:	f10a 0303 	add.w	r3, sl, #3
 800dcda:	f000 bd56 	b.w	800e78a <_dtoa_r+0xb4a>
 800dcde:	ed9d 7b04 	vldr	d7, [sp, #16]
 800dce2:	2200      	movs	r2, #0
 800dce4:	ec51 0b17 	vmov	r0, r1, d7
 800dce8:	2300      	movs	r3, #0
 800dcea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800dcee:	f7f2 ff03 	bl	8000af8 <__aeabi_dcmpeq>
 800dcf2:	4680      	mov	r8, r0
 800dcf4:	b158      	cbz	r0, 800dd0e <_dtoa_r+0xce>
 800dcf6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	6013      	str	r3, [r2, #0]
 800dcfc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dcfe:	b113      	cbz	r3, 800dd06 <_dtoa_r+0xc6>
 800dd00:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dd02:	4b86      	ldr	r3, [pc, #536]	@ (800df1c <_dtoa_r+0x2dc>)
 800dd04:	6013      	str	r3, [r2, #0]
 800dd06:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800df30 <_dtoa_r+0x2f0>
 800dd0a:	f000 bd40 	b.w	800e78e <_dtoa_r+0xb4e>
 800dd0e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800dd12:	aa14      	add	r2, sp, #80	@ 0x50
 800dd14:	a915      	add	r1, sp, #84	@ 0x54
 800dd16:	4648      	mov	r0, r9
 800dd18:	f001 f8ce 	bl	800eeb8 <__d2b>
 800dd1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dd20:	9002      	str	r0, [sp, #8]
 800dd22:	2e00      	cmp	r6, #0
 800dd24:	d078      	beq.n	800de18 <_dtoa_r+0x1d8>
 800dd26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd28:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800dd2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dd34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dd38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dd3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dd40:	4619      	mov	r1, r3
 800dd42:	2200      	movs	r2, #0
 800dd44:	4b76      	ldr	r3, [pc, #472]	@ (800df20 <_dtoa_r+0x2e0>)
 800dd46:	f7f2 fab7 	bl	80002b8 <__aeabi_dsub>
 800dd4a:	a36b      	add	r3, pc, #428	@ (adr r3, 800def8 <_dtoa_r+0x2b8>)
 800dd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd50:	f7f2 fc6a 	bl	8000628 <__aeabi_dmul>
 800dd54:	a36a      	add	r3, pc, #424	@ (adr r3, 800df00 <_dtoa_r+0x2c0>)
 800dd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5a:	f7f2 faaf 	bl	80002bc <__adddf3>
 800dd5e:	4604      	mov	r4, r0
 800dd60:	4630      	mov	r0, r6
 800dd62:	460d      	mov	r5, r1
 800dd64:	f7f2 fbf6 	bl	8000554 <__aeabi_i2d>
 800dd68:	a367      	add	r3, pc, #412	@ (adr r3, 800df08 <_dtoa_r+0x2c8>)
 800dd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6e:	f7f2 fc5b 	bl	8000628 <__aeabi_dmul>
 800dd72:	4602      	mov	r2, r0
 800dd74:	460b      	mov	r3, r1
 800dd76:	4620      	mov	r0, r4
 800dd78:	4629      	mov	r1, r5
 800dd7a:	f7f2 fa9f 	bl	80002bc <__adddf3>
 800dd7e:	4604      	mov	r4, r0
 800dd80:	460d      	mov	r5, r1
 800dd82:	f7f2 ff01 	bl	8000b88 <__aeabi_d2iz>
 800dd86:	2200      	movs	r2, #0
 800dd88:	4607      	mov	r7, r0
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	4629      	mov	r1, r5
 800dd90:	f7f2 febc 	bl	8000b0c <__aeabi_dcmplt>
 800dd94:	b140      	cbz	r0, 800dda8 <_dtoa_r+0x168>
 800dd96:	4638      	mov	r0, r7
 800dd98:	f7f2 fbdc 	bl	8000554 <__aeabi_i2d>
 800dd9c:	4622      	mov	r2, r4
 800dd9e:	462b      	mov	r3, r5
 800dda0:	f7f2 feaa 	bl	8000af8 <__aeabi_dcmpeq>
 800dda4:	b900      	cbnz	r0, 800dda8 <_dtoa_r+0x168>
 800dda6:	3f01      	subs	r7, #1
 800dda8:	2f16      	cmp	r7, #22
 800ddaa:	d852      	bhi.n	800de52 <_dtoa_r+0x212>
 800ddac:	4b5d      	ldr	r3, [pc, #372]	@ (800df24 <_dtoa_r+0x2e4>)
 800ddae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ddb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ddba:	f7f2 fea7 	bl	8000b0c <__aeabi_dcmplt>
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d049      	beq.n	800de56 <_dtoa_r+0x216>
 800ddc2:	3f01      	subs	r7, #1
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	9310      	str	r3, [sp, #64]	@ 0x40
 800ddc8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ddca:	1b9b      	subs	r3, r3, r6
 800ddcc:	1e5a      	subs	r2, r3, #1
 800ddce:	bf45      	ittet	mi
 800ddd0:	f1c3 0301 	rsbmi	r3, r3, #1
 800ddd4:	9300      	strmi	r3, [sp, #0]
 800ddd6:	2300      	movpl	r3, #0
 800ddd8:	2300      	movmi	r3, #0
 800ddda:	9206      	str	r2, [sp, #24]
 800dddc:	bf54      	ite	pl
 800ddde:	9300      	strpl	r3, [sp, #0]
 800dde0:	9306      	strmi	r3, [sp, #24]
 800dde2:	2f00      	cmp	r7, #0
 800dde4:	db39      	blt.n	800de5a <_dtoa_r+0x21a>
 800dde6:	9b06      	ldr	r3, [sp, #24]
 800dde8:	970d      	str	r7, [sp, #52]	@ 0x34
 800ddea:	443b      	add	r3, r7
 800ddec:	9306      	str	r3, [sp, #24]
 800ddee:	2300      	movs	r3, #0
 800ddf0:	9308      	str	r3, [sp, #32]
 800ddf2:	9b07      	ldr	r3, [sp, #28]
 800ddf4:	2b09      	cmp	r3, #9
 800ddf6:	d863      	bhi.n	800dec0 <_dtoa_r+0x280>
 800ddf8:	2b05      	cmp	r3, #5
 800ddfa:	bfc4      	itt	gt
 800ddfc:	3b04      	subgt	r3, #4
 800ddfe:	9307      	strgt	r3, [sp, #28]
 800de00:	9b07      	ldr	r3, [sp, #28]
 800de02:	f1a3 0302 	sub.w	r3, r3, #2
 800de06:	bfcc      	ite	gt
 800de08:	2400      	movgt	r4, #0
 800de0a:	2401      	movle	r4, #1
 800de0c:	2b03      	cmp	r3, #3
 800de0e:	d863      	bhi.n	800ded8 <_dtoa_r+0x298>
 800de10:	e8df f003 	tbb	[pc, r3]
 800de14:	2b375452 	.word	0x2b375452
 800de18:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800de1c:	441e      	add	r6, r3
 800de1e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800de22:	2b20      	cmp	r3, #32
 800de24:	bfc1      	itttt	gt
 800de26:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800de2a:	409f      	lslgt	r7, r3
 800de2c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800de30:	fa24 f303 	lsrgt.w	r3, r4, r3
 800de34:	bfd6      	itet	le
 800de36:	f1c3 0320 	rsble	r3, r3, #32
 800de3a:	ea47 0003 	orrgt.w	r0, r7, r3
 800de3e:	fa04 f003 	lslle.w	r0, r4, r3
 800de42:	f7f2 fb77 	bl	8000534 <__aeabi_ui2d>
 800de46:	2201      	movs	r2, #1
 800de48:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800de4c:	3e01      	subs	r6, #1
 800de4e:	9212      	str	r2, [sp, #72]	@ 0x48
 800de50:	e776      	b.n	800dd40 <_dtoa_r+0x100>
 800de52:	2301      	movs	r3, #1
 800de54:	e7b7      	b.n	800ddc6 <_dtoa_r+0x186>
 800de56:	9010      	str	r0, [sp, #64]	@ 0x40
 800de58:	e7b6      	b.n	800ddc8 <_dtoa_r+0x188>
 800de5a:	9b00      	ldr	r3, [sp, #0]
 800de5c:	1bdb      	subs	r3, r3, r7
 800de5e:	9300      	str	r3, [sp, #0]
 800de60:	427b      	negs	r3, r7
 800de62:	9308      	str	r3, [sp, #32]
 800de64:	2300      	movs	r3, #0
 800de66:	930d      	str	r3, [sp, #52]	@ 0x34
 800de68:	e7c3      	b.n	800ddf2 <_dtoa_r+0x1b2>
 800de6a:	2301      	movs	r3, #1
 800de6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800de6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de70:	eb07 0b03 	add.w	fp, r7, r3
 800de74:	f10b 0301 	add.w	r3, fp, #1
 800de78:	2b01      	cmp	r3, #1
 800de7a:	9303      	str	r3, [sp, #12]
 800de7c:	bfb8      	it	lt
 800de7e:	2301      	movlt	r3, #1
 800de80:	e006      	b.n	800de90 <_dtoa_r+0x250>
 800de82:	2301      	movs	r3, #1
 800de84:	9309      	str	r3, [sp, #36]	@ 0x24
 800de86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de88:	2b00      	cmp	r3, #0
 800de8a:	dd28      	ble.n	800dede <_dtoa_r+0x29e>
 800de8c:	469b      	mov	fp, r3
 800de8e:	9303      	str	r3, [sp, #12]
 800de90:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800de94:	2100      	movs	r1, #0
 800de96:	2204      	movs	r2, #4
 800de98:	f102 0514 	add.w	r5, r2, #20
 800de9c:	429d      	cmp	r5, r3
 800de9e:	d926      	bls.n	800deee <_dtoa_r+0x2ae>
 800dea0:	6041      	str	r1, [r0, #4]
 800dea2:	4648      	mov	r0, r9
 800dea4:	f000 fce6 	bl	800e874 <_Balloc>
 800dea8:	4682      	mov	sl, r0
 800deaa:	2800      	cmp	r0, #0
 800deac:	d142      	bne.n	800df34 <_dtoa_r+0x2f4>
 800deae:	4b1e      	ldr	r3, [pc, #120]	@ (800df28 <_dtoa_r+0x2e8>)
 800deb0:	4602      	mov	r2, r0
 800deb2:	f240 11af 	movw	r1, #431	@ 0x1af
 800deb6:	e6da      	b.n	800dc6e <_dtoa_r+0x2e>
 800deb8:	2300      	movs	r3, #0
 800deba:	e7e3      	b.n	800de84 <_dtoa_r+0x244>
 800debc:	2300      	movs	r3, #0
 800debe:	e7d5      	b.n	800de6c <_dtoa_r+0x22c>
 800dec0:	2401      	movs	r4, #1
 800dec2:	2300      	movs	r3, #0
 800dec4:	9307      	str	r3, [sp, #28]
 800dec6:	9409      	str	r4, [sp, #36]	@ 0x24
 800dec8:	f04f 3bff 	mov.w	fp, #4294967295
 800decc:	2200      	movs	r2, #0
 800dece:	f8cd b00c 	str.w	fp, [sp, #12]
 800ded2:	2312      	movs	r3, #18
 800ded4:	920c      	str	r2, [sp, #48]	@ 0x30
 800ded6:	e7db      	b.n	800de90 <_dtoa_r+0x250>
 800ded8:	2301      	movs	r3, #1
 800deda:	9309      	str	r3, [sp, #36]	@ 0x24
 800dedc:	e7f4      	b.n	800dec8 <_dtoa_r+0x288>
 800dede:	f04f 0b01 	mov.w	fp, #1
 800dee2:	f8cd b00c 	str.w	fp, [sp, #12]
 800dee6:	465b      	mov	r3, fp
 800dee8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800deec:	e7d0      	b.n	800de90 <_dtoa_r+0x250>
 800deee:	3101      	adds	r1, #1
 800def0:	0052      	lsls	r2, r2, #1
 800def2:	e7d1      	b.n	800de98 <_dtoa_r+0x258>
 800def4:	f3af 8000 	nop.w
 800def8:	636f4361 	.word	0x636f4361
 800defc:	3fd287a7 	.word	0x3fd287a7
 800df00:	8b60c8b3 	.word	0x8b60c8b3
 800df04:	3fc68a28 	.word	0x3fc68a28
 800df08:	509f79fb 	.word	0x509f79fb
 800df0c:	3fd34413 	.word	0x3fd34413
 800df10:	080a3a29 	.word	0x080a3a29
 800df14:	080a3a40 	.word	0x080a3a40
 800df18:	7ff00000 	.word	0x7ff00000
 800df1c:	080a39f9 	.word	0x080a39f9
 800df20:	3ff80000 	.word	0x3ff80000
 800df24:	080a3b90 	.word	0x080a3b90
 800df28:	080a3a98 	.word	0x080a3a98
 800df2c:	080a3a25 	.word	0x080a3a25
 800df30:	080a39f8 	.word	0x080a39f8
 800df34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800df38:	6018      	str	r0, [r3, #0]
 800df3a:	9b03      	ldr	r3, [sp, #12]
 800df3c:	2b0e      	cmp	r3, #14
 800df3e:	f200 80a1 	bhi.w	800e084 <_dtoa_r+0x444>
 800df42:	2c00      	cmp	r4, #0
 800df44:	f000 809e 	beq.w	800e084 <_dtoa_r+0x444>
 800df48:	2f00      	cmp	r7, #0
 800df4a:	dd33      	ble.n	800dfb4 <_dtoa_r+0x374>
 800df4c:	4b9c      	ldr	r3, [pc, #624]	@ (800e1c0 <_dtoa_r+0x580>)
 800df4e:	f007 020f 	and.w	r2, r7, #15
 800df52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df56:	ed93 7b00 	vldr	d7, [r3]
 800df5a:	05f8      	lsls	r0, r7, #23
 800df5c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800df60:	ea4f 1427 	mov.w	r4, r7, asr #4
 800df64:	d516      	bpl.n	800df94 <_dtoa_r+0x354>
 800df66:	4b97      	ldr	r3, [pc, #604]	@ (800e1c4 <_dtoa_r+0x584>)
 800df68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800df6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df70:	f7f2 fc84 	bl	800087c <__aeabi_ddiv>
 800df74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df78:	f004 040f 	and.w	r4, r4, #15
 800df7c:	2603      	movs	r6, #3
 800df7e:	4d91      	ldr	r5, [pc, #580]	@ (800e1c4 <_dtoa_r+0x584>)
 800df80:	b954      	cbnz	r4, 800df98 <_dtoa_r+0x358>
 800df82:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800df86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df8a:	f7f2 fc77 	bl	800087c <__aeabi_ddiv>
 800df8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df92:	e028      	b.n	800dfe6 <_dtoa_r+0x3a6>
 800df94:	2602      	movs	r6, #2
 800df96:	e7f2      	b.n	800df7e <_dtoa_r+0x33e>
 800df98:	07e1      	lsls	r1, r4, #31
 800df9a:	d508      	bpl.n	800dfae <_dtoa_r+0x36e>
 800df9c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dfa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dfa4:	f7f2 fb40 	bl	8000628 <__aeabi_dmul>
 800dfa8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dfac:	3601      	adds	r6, #1
 800dfae:	1064      	asrs	r4, r4, #1
 800dfb0:	3508      	adds	r5, #8
 800dfb2:	e7e5      	b.n	800df80 <_dtoa_r+0x340>
 800dfb4:	f000 80af 	beq.w	800e116 <_dtoa_r+0x4d6>
 800dfb8:	427c      	negs	r4, r7
 800dfba:	4b81      	ldr	r3, [pc, #516]	@ (800e1c0 <_dtoa_r+0x580>)
 800dfbc:	4d81      	ldr	r5, [pc, #516]	@ (800e1c4 <_dtoa_r+0x584>)
 800dfbe:	f004 020f 	and.w	r2, r4, #15
 800dfc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dfce:	f7f2 fb2b 	bl	8000628 <__aeabi_dmul>
 800dfd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dfd6:	1124      	asrs	r4, r4, #4
 800dfd8:	2300      	movs	r3, #0
 800dfda:	2602      	movs	r6, #2
 800dfdc:	2c00      	cmp	r4, #0
 800dfde:	f040 808f 	bne.w	800e100 <_dtoa_r+0x4c0>
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d1d3      	bne.n	800df8e <_dtoa_r+0x34e>
 800dfe6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dfe8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	f000 8094 	beq.w	800e11a <_dtoa_r+0x4da>
 800dff2:	4b75      	ldr	r3, [pc, #468]	@ (800e1c8 <_dtoa_r+0x588>)
 800dff4:	2200      	movs	r2, #0
 800dff6:	4620      	mov	r0, r4
 800dff8:	4629      	mov	r1, r5
 800dffa:	f7f2 fd87 	bl	8000b0c <__aeabi_dcmplt>
 800dffe:	2800      	cmp	r0, #0
 800e000:	f000 808b 	beq.w	800e11a <_dtoa_r+0x4da>
 800e004:	9b03      	ldr	r3, [sp, #12]
 800e006:	2b00      	cmp	r3, #0
 800e008:	f000 8087 	beq.w	800e11a <_dtoa_r+0x4da>
 800e00c:	f1bb 0f00 	cmp.w	fp, #0
 800e010:	dd34      	ble.n	800e07c <_dtoa_r+0x43c>
 800e012:	4620      	mov	r0, r4
 800e014:	4b6d      	ldr	r3, [pc, #436]	@ (800e1cc <_dtoa_r+0x58c>)
 800e016:	2200      	movs	r2, #0
 800e018:	4629      	mov	r1, r5
 800e01a:	f7f2 fb05 	bl	8000628 <__aeabi_dmul>
 800e01e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e022:	f107 38ff 	add.w	r8, r7, #4294967295
 800e026:	3601      	adds	r6, #1
 800e028:	465c      	mov	r4, fp
 800e02a:	4630      	mov	r0, r6
 800e02c:	f7f2 fa92 	bl	8000554 <__aeabi_i2d>
 800e030:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e034:	f7f2 faf8 	bl	8000628 <__aeabi_dmul>
 800e038:	4b65      	ldr	r3, [pc, #404]	@ (800e1d0 <_dtoa_r+0x590>)
 800e03a:	2200      	movs	r2, #0
 800e03c:	f7f2 f93e 	bl	80002bc <__adddf3>
 800e040:	4605      	mov	r5, r0
 800e042:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e046:	2c00      	cmp	r4, #0
 800e048:	d16a      	bne.n	800e120 <_dtoa_r+0x4e0>
 800e04a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e04e:	4b61      	ldr	r3, [pc, #388]	@ (800e1d4 <_dtoa_r+0x594>)
 800e050:	2200      	movs	r2, #0
 800e052:	f7f2 f931 	bl	80002b8 <__aeabi_dsub>
 800e056:	4602      	mov	r2, r0
 800e058:	460b      	mov	r3, r1
 800e05a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e05e:	462a      	mov	r2, r5
 800e060:	4633      	mov	r3, r6
 800e062:	f7f2 fd71 	bl	8000b48 <__aeabi_dcmpgt>
 800e066:	2800      	cmp	r0, #0
 800e068:	f040 8298 	bne.w	800e59c <_dtoa_r+0x95c>
 800e06c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e070:	462a      	mov	r2, r5
 800e072:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e076:	f7f2 fd49 	bl	8000b0c <__aeabi_dcmplt>
 800e07a:	bb38      	cbnz	r0, 800e0cc <_dtoa_r+0x48c>
 800e07c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e080:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e084:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e086:	2b00      	cmp	r3, #0
 800e088:	f2c0 8157 	blt.w	800e33a <_dtoa_r+0x6fa>
 800e08c:	2f0e      	cmp	r7, #14
 800e08e:	f300 8154 	bgt.w	800e33a <_dtoa_r+0x6fa>
 800e092:	4b4b      	ldr	r3, [pc, #300]	@ (800e1c0 <_dtoa_r+0x580>)
 800e094:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e098:	ed93 7b00 	vldr	d7, [r3]
 800e09c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	ed8d 7b00 	vstr	d7, [sp]
 800e0a4:	f280 80e5 	bge.w	800e272 <_dtoa_r+0x632>
 800e0a8:	9b03      	ldr	r3, [sp, #12]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	f300 80e1 	bgt.w	800e272 <_dtoa_r+0x632>
 800e0b0:	d10c      	bne.n	800e0cc <_dtoa_r+0x48c>
 800e0b2:	4b48      	ldr	r3, [pc, #288]	@ (800e1d4 <_dtoa_r+0x594>)
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	ec51 0b17 	vmov	r0, r1, d7
 800e0ba:	f7f2 fab5 	bl	8000628 <__aeabi_dmul>
 800e0be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e0c2:	f7f2 fd37 	bl	8000b34 <__aeabi_dcmpge>
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	f000 8266 	beq.w	800e598 <_dtoa_r+0x958>
 800e0cc:	2400      	movs	r4, #0
 800e0ce:	4625      	mov	r5, r4
 800e0d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e0d2:	4656      	mov	r6, sl
 800e0d4:	ea6f 0803 	mvn.w	r8, r3
 800e0d8:	2700      	movs	r7, #0
 800e0da:	4621      	mov	r1, r4
 800e0dc:	4648      	mov	r0, r9
 800e0de:	f000 fc09 	bl	800e8f4 <_Bfree>
 800e0e2:	2d00      	cmp	r5, #0
 800e0e4:	f000 80bd 	beq.w	800e262 <_dtoa_r+0x622>
 800e0e8:	b12f      	cbz	r7, 800e0f6 <_dtoa_r+0x4b6>
 800e0ea:	42af      	cmp	r7, r5
 800e0ec:	d003      	beq.n	800e0f6 <_dtoa_r+0x4b6>
 800e0ee:	4639      	mov	r1, r7
 800e0f0:	4648      	mov	r0, r9
 800e0f2:	f000 fbff 	bl	800e8f4 <_Bfree>
 800e0f6:	4629      	mov	r1, r5
 800e0f8:	4648      	mov	r0, r9
 800e0fa:	f000 fbfb 	bl	800e8f4 <_Bfree>
 800e0fe:	e0b0      	b.n	800e262 <_dtoa_r+0x622>
 800e100:	07e2      	lsls	r2, r4, #31
 800e102:	d505      	bpl.n	800e110 <_dtoa_r+0x4d0>
 800e104:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e108:	f7f2 fa8e 	bl	8000628 <__aeabi_dmul>
 800e10c:	3601      	adds	r6, #1
 800e10e:	2301      	movs	r3, #1
 800e110:	1064      	asrs	r4, r4, #1
 800e112:	3508      	adds	r5, #8
 800e114:	e762      	b.n	800dfdc <_dtoa_r+0x39c>
 800e116:	2602      	movs	r6, #2
 800e118:	e765      	b.n	800dfe6 <_dtoa_r+0x3a6>
 800e11a:	9c03      	ldr	r4, [sp, #12]
 800e11c:	46b8      	mov	r8, r7
 800e11e:	e784      	b.n	800e02a <_dtoa_r+0x3ea>
 800e120:	4b27      	ldr	r3, [pc, #156]	@ (800e1c0 <_dtoa_r+0x580>)
 800e122:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e124:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e128:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e12c:	4454      	add	r4, sl
 800e12e:	2900      	cmp	r1, #0
 800e130:	d054      	beq.n	800e1dc <_dtoa_r+0x59c>
 800e132:	4929      	ldr	r1, [pc, #164]	@ (800e1d8 <_dtoa_r+0x598>)
 800e134:	2000      	movs	r0, #0
 800e136:	f7f2 fba1 	bl	800087c <__aeabi_ddiv>
 800e13a:	4633      	mov	r3, r6
 800e13c:	462a      	mov	r2, r5
 800e13e:	f7f2 f8bb 	bl	80002b8 <__aeabi_dsub>
 800e142:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e146:	4656      	mov	r6, sl
 800e148:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e14c:	f7f2 fd1c 	bl	8000b88 <__aeabi_d2iz>
 800e150:	4605      	mov	r5, r0
 800e152:	f7f2 f9ff 	bl	8000554 <__aeabi_i2d>
 800e156:	4602      	mov	r2, r0
 800e158:	460b      	mov	r3, r1
 800e15a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e15e:	f7f2 f8ab 	bl	80002b8 <__aeabi_dsub>
 800e162:	3530      	adds	r5, #48	@ 0x30
 800e164:	4602      	mov	r2, r0
 800e166:	460b      	mov	r3, r1
 800e168:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e16c:	f806 5b01 	strb.w	r5, [r6], #1
 800e170:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e174:	f7f2 fcca 	bl	8000b0c <__aeabi_dcmplt>
 800e178:	2800      	cmp	r0, #0
 800e17a:	d172      	bne.n	800e262 <_dtoa_r+0x622>
 800e17c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e180:	4911      	ldr	r1, [pc, #68]	@ (800e1c8 <_dtoa_r+0x588>)
 800e182:	2000      	movs	r0, #0
 800e184:	f7f2 f898 	bl	80002b8 <__aeabi_dsub>
 800e188:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e18c:	f7f2 fcbe 	bl	8000b0c <__aeabi_dcmplt>
 800e190:	2800      	cmp	r0, #0
 800e192:	f040 80b4 	bne.w	800e2fe <_dtoa_r+0x6be>
 800e196:	42a6      	cmp	r6, r4
 800e198:	f43f af70 	beq.w	800e07c <_dtoa_r+0x43c>
 800e19c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e1a0:	4b0a      	ldr	r3, [pc, #40]	@ (800e1cc <_dtoa_r+0x58c>)
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f7f2 fa40 	bl	8000628 <__aeabi_dmul>
 800e1a8:	4b08      	ldr	r3, [pc, #32]	@ (800e1cc <_dtoa_r+0x58c>)
 800e1aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1b4:	f7f2 fa38 	bl	8000628 <__aeabi_dmul>
 800e1b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e1bc:	e7c4      	b.n	800e148 <_dtoa_r+0x508>
 800e1be:	bf00      	nop
 800e1c0:	080a3b90 	.word	0x080a3b90
 800e1c4:	080a3b68 	.word	0x080a3b68
 800e1c8:	3ff00000 	.word	0x3ff00000
 800e1cc:	40240000 	.word	0x40240000
 800e1d0:	401c0000 	.word	0x401c0000
 800e1d4:	40140000 	.word	0x40140000
 800e1d8:	3fe00000 	.word	0x3fe00000
 800e1dc:	4631      	mov	r1, r6
 800e1de:	4628      	mov	r0, r5
 800e1e0:	f7f2 fa22 	bl	8000628 <__aeabi_dmul>
 800e1e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e1e8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e1ea:	4656      	mov	r6, sl
 800e1ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1f0:	f7f2 fcca 	bl	8000b88 <__aeabi_d2iz>
 800e1f4:	4605      	mov	r5, r0
 800e1f6:	f7f2 f9ad 	bl	8000554 <__aeabi_i2d>
 800e1fa:	4602      	mov	r2, r0
 800e1fc:	460b      	mov	r3, r1
 800e1fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e202:	f7f2 f859 	bl	80002b8 <__aeabi_dsub>
 800e206:	3530      	adds	r5, #48	@ 0x30
 800e208:	f806 5b01 	strb.w	r5, [r6], #1
 800e20c:	4602      	mov	r2, r0
 800e20e:	460b      	mov	r3, r1
 800e210:	42a6      	cmp	r6, r4
 800e212:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e216:	f04f 0200 	mov.w	r2, #0
 800e21a:	d124      	bne.n	800e266 <_dtoa_r+0x626>
 800e21c:	4baf      	ldr	r3, [pc, #700]	@ (800e4dc <_dtoa_r+0x89c>)
 800e21e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e222:	f7f2 f84b 	bl	80002bc <__adddf3>
 800e226:	4602      	mov	r2, r0
 800e228:	460b      	mov	r3, r1
 800e22a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e22e:	f7f2 fc8b 	bl	8000b48 <__aeabi_dcmpgt>
 800e232:	2800      	cmp	r0, #0
 800e234:	d163      	bne.n	800e2fe <_dtoa_r+0x6be>
 800e236:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e23a:	49a8      	ldr	r1, [pc, #672]	@ (800e4dc <_dtoa_r+0x89c>)
 800e23c:	2000      	movs	r0, #0
 800e23e:	f7f2 f83b 	bl	80002b8 <__aeabi_dsub>
 800e242:	4602      	mov	r2, r0
 800e244:	460b      	mov	r3, r1
 800e246:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e24a:	f7f2 fc5f 	bl	8000b0c <__aeabi_dcmplt>
 800e24e:	2800      	cmp	r0, #0
 800e250:	f43f af14 	beq.w	800e07c <_dtoa_r+0x43c>
 800e254:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e256:	1e73      	subs	r3, r6, #1
 800e258:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e25a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e25e:	2b30      	cmp	r3, #48	@ 0x30
 800e260:	d0f8      	beq.n	800e254 <_dtoa_r+0x614>
 800e262:	4647      	mov	r7, r8
 800e264:	e03b      	b.n	800e2de <_dtoa_r+0x69e>
 800e266:	4b9e      	ldr	r3, [pc, #632]	@ (800e4e0 <_dtoa_r+0x8a0>)
 800e268:	f7f2 f9de 	bl	8000628 <__aeabi_dmul>
 800e26c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e270:	e7bc      	b.n	800e1ec <_dtoa_r+0x5ac>
 800e272:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e276:	4656      	mov	r6, sl
 800e278:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e27c:	4620      	mov	r0, r4
 800e27e:	4629      	mov	r1, r5
 800e280:	f7f2 fafc 	bl	800087c <__aeabi_ddiv>
 800e284:	f7f2 fc80 	bl	8000b88 <__aeabi_d2iz>
 800e288:	4680      	mov	r8, r0
 800e28a:	f7f2 f963 	bl	8000554 <__aeabi_i2d>
 800e28e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e292:	f7f2 f9c9 	bl	8000628 <__aeabi_dmul>
 800e296:	4602      	mov	r2, r0
 800e298:	460b      	mov	r3, r1
 800e29a:	4620      	mov	r0, r4
 800e29c:	4629      	mov	r1, r5
 800e29e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e2a2:	f7f2 f809 	bl	80002b8 <__aeabi_dsub>
 800e2a6:	f806 4b01 	strb.w	r4, [r6], #1
 800e2aa:	9d03      	ldr	r5, [sp, #12]
 800e2ac:	eba6 040a 	sub.w	r4, r6, sl
 800e2b0:	42a5      	cmp	r5, r4
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	d133      	bne.n	800e320 <_dtoa_r+0x6e0>
 800e2b8:	f7f2 f800 	bl	80002bc <__adddf3>
 800e2bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2c0:	4604      	mov	r4, r0
 800e2c2:	460d      	mov	r5, r1
 800e2c4:	f7f2 fc40 	bl	8000b48 <__aeabi_dcmpgt>
 800e2c8:	b9c0      	cbnz	r0, 800e2fc <_dtoa_r+0x6bc>
 800e2ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2ce:	4620      	mov	r0, r4
 800e2d0:	4629      	mov	r1, r5
 800e2d2:	f7f2 fc11 	bl	8000af8 <__aeabi_dcmpeq>
 800e2d6:	b110      	cbz	r0, 800e2de <_dtoa_r+0x69e>
 800e2d8:	f018 0f01 	tst.w	r8, #1
 800e2dc:	d10e      	bne.n	800e2fc <_dtoa_r+0x6bc>
 800e2de:	9902      	ldr	r1, [sp, #8]
 800e2e0:	4648      	mov	r0, r9
 800e2e2:	f000 fb07 	bl	800e8f4 <_Bfree>
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	7033      	strb	r3, [r6, #0]
 800e2ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e2ec:	3701      	adds	r7, #1
 800e2ee:	601f      	str	r7, [r3, #0]
 800e2f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	f000 824b 	beq.w	800e78e <_dtoa_r+0xb4e>
 800e2f8:	601e      	str	r6, [r3, #0]
 800e2fa:	e248      	b.n	800e78e <_dtoa_r+0xb4e>
 800e2fc:	46b8      	mov	r8, r7
 800e2fe:	4633      	mov	r3, r6
 800e300:	461e      	mov	r6, r3
 800e302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e306:	2a39      	cmp	r2, #57	@ 0x39
 800e308:	d106      	bne.n	800e318 <_dtoa_r+0x6d8>
 800e30a:	459a      	cmp	sl, r3
 800e30c:	d1f8      	bne.n	800e300 <_dtoa_r+0x6c0>
 800e30e:	2230      	movs	r2, #48	@ 0x30
 800e310:	f108 0801 	add.w	r8, r8, #1
 800e314:	f88a 2000 	strb.w	r2, [sl]
 800e318:	781a      	ldrb	r2, [r3, #0]
 800e31a:	3201      	adds	r2, #1
 800e31c:	701a      	strb	r2, [r3, #0]
 800e31e:	e7a0      	b.n	800e262 <_dtoa_r+0x622>
 800e320:	4b6f      	ldr	r3, [pc, #444]	@ (800e4e0 <_dtoa_r+0x8a0>)
 800e322:	2200      	movs	r2, #0
 800e324:	f7f2 f980 	bl	8000628 <__aeabi_dmul>
 800e328:	2200      	movs	r2, #0
 800e32a:	2300      	movs	r3, #0
 800e32c:	4604      	mov	r4, r0
 800e32e:	460d      	mov	r5, r1
 800e330:	f7f2 fbe2 	bl	8000af8 <__aeabi_dcmpeq>
 800e334:	2800      	cmp	r0, #0
 800e336:	d09f      	beq.n	800e278 <_dtoa_r+0x638>
 800e338:	e7d1      	b.n	800e2de <_dtoa_r+0x69e>
 800e33a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e33c:	2a00      	cmp	r2, #0
 800e33e:	f000 80ea 	beq.w	800e516 <_dtoa_r+0x8d6>
 800e342:	9a07      	ldr	r2, [sp, #28]
 800e344:	2a01      	cmp	r2, #1
 800e346:	f300 80cd 	bgt.w	800e4e4 <_dtoa_r+0x8a4>
 800e34a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e34c:	2a00      	cmp	r2, #0
 800e34e:	f000 80c1 	beq.w	800e4d4 <_dtoa_r+0x894>
 800e352:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e356:	9c08      	ldr	r4, [sp, #32]
 800e358:	9e00      	ldr	r6, [sp, #0]
 800e35a:	9a00      	ldr	r2, [sp, #0]
 800e35c:	441a      	add	r2, r3
 800e35e:	9200      	str	r2, [sp, #0]
 800e360:	9a06      	ldr	r2, [sp, #24]
 800e362:	2101      	movs	r1, #1
 800e364:	441a      	add	r2, r3
 800e366:	4648      	mov	r0, r9
 800e368:	9206      	str	r2, [sp, #24]
 800e36a:	f000 fb77 	bl	800ea5c <__i2b>
 800e36e:	4605      	mov	r5, r0
 800e370:	b166      	cbz	r6, 800e38c <_dtoa_r+0x74c>
 800e372:	9b06      	ldr	r3, [sp, #24]
 800e374:	2b00      	cmp	r3, #0
 800e376:	dd09      	ble.n	800e38c <_dtoa_r+0x74c>
 800e378:	42b3      	cmp	r3, r6
 800e37a:	9a00      	ldr	r2, [sp, #0]
 800e37c:	bfa8      	it	ge
 800e37e:	4633      	movge	r3, r6
 800e380:	1ad2      	subs	r2, r2, r3
 800e382:	9200      	str	r2, [sp, #0]
 800e384:	9a06      	ldr	r2, [sp, #24]
 800e386:	1af6      	subs	r6, r6, r3
 800e388:	1ad3      	subs	r3, r2, r3
 800e38a:	9306      	str	r3, [sp, #24]
 800e38c:	9b08      	ldr	r3, [sp, #32]
 800e38e:	b30b      	cbz	r3, 800e3d4 <_dtoa_r+0x794>
 800e390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e392:	2b00      	cmp	r3, #0
 800e394:	f000 80c6 	beq.w	800e524 <_dtoa_r+0x8e4>
 800e398:	2c00      	cmp	r4, #0
 800e39a:	f000 80c0 	beq.w	800e51e <_dtoa_r+0x8de>
 800e39e:	4629      	mov	r1, r5
 800e3a0:	4622      	mov	r2, r4
 800e3a2:	4648      	mov	r0, r9
 800e3a4:	f000 fc12 	bl	800ebcc <__pow5mult>
 800e3a8:	9a02      	ldr	r2, [sp, #8]
 800e3aa:	4601      	mov	r1, r0
 800e3ac:	4605      	mov	r5, r0
 800e3ae:	4648      	mov	r0, r9
 800e3b0:	f000 fb6a 	bl	800ea88 <__multiply>
 800e3b4:	9902      	ldr	r1, [sp, #8]
 800e3b6:	4680      	mov	r8, r0
 800e3b8:	4648      	mov	r0, r9
 800e3ba:	f000 fa9b 	bl	800e8f4 <_Bfree>
 800e3be:	9b08      	ldr	r3, [sp, #32]
 800e3c0:	1b1b      	subs	r3, r3, r4
 800e3c2:	9308      	str	r3, [sp, #32]
 800e3c4:	f000 80b1 	beq.w	800e52a <_dtoa_r+0x8ea>
 800e3c8:	9a08      	ldr	r2, [sp, #32]
 800e3ca:	4641      	mov	r1, r8
 800e3cc:	4648      	mov	r0, r9
 800e3ce:	f000 fbfd 	bl	800ebcc <__pow5mult>
 800e3d2:	9002      	str	r0, [sp, #8]
 800e3d4:	2101      	movs	r1, #1
 800e3d6:	4648      	mov	r0, r9
 800e3d8:	f000 fb40 	bl	800ea5c <__i2b>
 800e3dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e3de:	4604      	mov	r4, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	f000 81d8 	beq.w	800e796 <_dtoa_r+0xb56>
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	4601      	mov	r1, r0
 800e3ea:	4648      	mov	r0, r9
 800e3ec:	f000 fbee 	bl	800ebcc <__pow5mult>
 800e3f0:	9b07      	ldr	r3, [sp, #28]
 800e3f2:	2b01      	cmp	r3, #1
 800e3f4:	4604      	mov	r4, r0
 800e3f6:	f300 809f 	bgt.w	800e538 <_dtoa_r+0x8f8>
 800e3fa:	9b04      	ldr	r3, [sp, #16]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	f040 8097 	bne.w	800e530 <_dtoa_r+0x8f0>
 800e402:	9b05      	ldr	r3, [sp, #20]
 800e404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e408:	2b00      	cmp	r3, #0
 800e40a:	f040 8093 	bne.w	800e534 <_dtoa_r+0x8f4>
 800e40e:	9b05      	ldr	r3, [sp, #20]
 800e410:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e414:	0d1b      	lsrs	r3, r3, #20
 800e416:	051b      	lsls	r3, r3, #20
 800e418:	b133      	cbz	r3, 800e428 <_dtoa_r+0x7e8>
 800e41a:	9b00      	ldr	r3, [sp, #0]
 800e41c:	3301      	adds	r3, #1
 800e41e:	9300      	str	r3, [sp, #0]
 800e420:	9b06      	ldr	r3, [sp, #24]
 800e422:	3301      	adds	r3, #1
 800e424:	9306      	str	r3, [sp, #24]
 800e426:	2301      	movs	r3, #1
 800e428:	9308      	str	r3, [sp, #32]
 800e42a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	f000 81b8 	beq.w	800e7a2 <_dtoa_r+0xb62>
 800e432:	6923      	ldr	r3, [r4, #16]
 800e434:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e438:	6918      	ldr	r0, [r3, #16]
 800e43a:	f000 fac3 	bl	800e9c4 <__hi0bits>
 800e43e:	f1c0 0020 	rsb	r0, r0, #32
 800e442:	9b06      	ldr	r3, [sp, #24]
 800e444:	4418      	add	r0, r3
 800e446:	f010 001f 	ands.w	r0, r0, #31
 800e44a:	f000 8082 	beq.w	800e552 <_dtoa_r+0x912>
 800e44e:	f1c0 0320 	rsb	r3, r0, #32
 800e452:	2b04      	cmp	r3, #4
 800e454:	dd73      	ble.n	800e53e <_dtoa_r+0x8fe>
 800e456:	9b00      	ldr	r3, [sp, #0]
 800e458:	f1c0 001c 	rsb	r0, r0, #28
 800e45c:	4403      	add	r3, r0
 800e45e:	9300      	str	r3, [sp, #0]
 800e460:	9b06      	ldr	r3, [sp, #24]
 800e462:	4403      	add	r3, r0
 800e464:	4406      	add	r6, r0
 800e466:	9306      	str	r3, [sp, #24]
 800e468:	9b00      	ldr	r3, [sp, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	dd05      	ble.n	800e47a <_dtoa_r+0x83a>
 800e46e:	9902      	ldr	r1, [sp, #8]
 800e470:	461a      	mov	r2, r3
 800e472:	4648      	mov	r0, r9
 800e474:	f000 fc04 	bl	800ec80 <__lshift>
 800e478:	9002      	str	r0, [sp, #8]
 800e47a:	9b06      	ldr	r3, [sp, #24]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	dd05      	ble.n	800e48c <_dtoa_r+0x84c>
 800e480:	4621      	mov	r1, r4
 800e482:	461a      	mov	r2, r3
 800e484:	4648      	mov	r0, r9
 800e486:	f000 fbfb 	bl	800ec80 <__lshift>
 800e48a:	4604      	mov	r4, r0
 800e48c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d061      	beq.n	800e556 <_dtoa_r+0x916>
 800e492:	9802      	ldr	r0, [sp, #8]
 800e494:	4621      	mov	r1, r4
 800e496:	f000 fc5f 	bl	800ed58 <__mcmp>
 800e49a:	2800      	cmp	r0, #0
 800e49c:	da5b      	bge.n	800e556 <_dtoa_r+0x916>
 800e49e:	2300      	movs	r3, #0
 800e4a0:	9902      	ldr	r1, [sp, #8]
 800e4a2:	220a      	movs	r2, #10
 800e4a4:	4648      	mov	r0, r9
 800e4a6:	f000 fa47 	bl	800e938 <__multadd>
 800e4aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4ac:	9002      	str	r0, [sp, #8]
 800e4ae:	f107 38ff 	add.w	r8, r7, #4294967295
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	f000 8177 	beq.w	800e7a6 <_dtoa_r+0xb66>
 800e4b8:	4629      	mov	r1, r5
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	220a      	movs	r2, #10
 800e4be:	4648      	mov	r0, r9
 800e4c0:	f000 fa3a 	bl	800e938 <__multadd>
 800e4c4:	f1bb 0f00 	cmp.w	fp, #0
 800e4c8:	4605      	mov	r5, r0
 800e4ca:	dc6f      	bgt.n	800e5ac <_dtoa_r+0x96c>
 800e4cc:	9b07      	ldr	r3, [sp, #28]
 800e4ce:	2b02      	cmp	r3, #2
 800e4d0:	dc49      	bgt.n	800e566 <_dtoa_r+0x926>
 800e4d2:	e06b      	b.n	800e5ac <_dtoa_r+0x96c>
 800e4d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e4d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e4da:	e73c      	b.n	800e356 <_dtoa_r+0x716>
 800e4dc:	3fe00000 	.word	0x3fe00000
 800e4e0:	40240000 	.word	0x40240000
 800e4e4:	9b03      	ldr	r3, [sp, #12]
 800e4e6:	1e5c      	subs	r4, r3, #1
 800e4e8:	9b08      	ldr	r3, [sp, #32]
 800e4ea:	42a3      	cmp	r3, r4
 800e4ec:	db09      	blt.n	800e502 <_dtoa_r+0x8c2>
 800e4ee:	1b1c      	subs	r4, r3, r4
 800e4f0:	9b03      	ldr	r3, [sp, #12]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	f6bf af30 	bge.w	800e358 <_dtoa_r+0x718>
 800e4f8:	9b00      	ldr	r3, [sp, #0]
 800e4fa:	9a03      	ldr	r2, [sp, #12]
 800e4fc:	1a9e      	subs	r6, r3, r2
 800e4fe:	2300      	movs	r3, #0
 800e500:	e72b      	b.n	800e35a <_dtoa_r+0x71a>
 800e502:	9b08      	ldr	r3, [sp, #32]
 800e504:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e506:	9408      	str	r4, [sp, #32]
 800e508:	1ae3      	subs	r3, r4, r3
 800e50a:	441a      	add	r2, r3
 800e50c:	9e00      	ldr	r6, [sp, #0]
 800e50e:	9b03      	ldr	r3, [sp, #12]
 800e510:	920d      	str	r2, [sp, #52]	@ 0x34
 800e512:	2400      	movs	r4, #0
 800e514:	e721      	b.n	800e35a <_dtoa_r+0x71a>
 800e516:	9c08      	ldr	r4, [sp, #32]
 800e518:	9e00      	ldr	r6, [sp, #0]
 800e51a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e51c:	e728      	b.n	800e370 <_dtoa_r+0x730>
 800e51e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e522:	e751      	b.n	800e3c8 <_dtoa_r+0x788>
 800e524:	9a08      	ldr	r2, [sp, #32]
 800e526:	9902      	ldr	r1, [sp, #8]
 800e528:	e750      	b.n	800e3cc <_dtoa_r+0x78c>
 800e52a:	f8cd 8008 	str.w	r8, [sp, #8]
 800e52e:	e751      	b.n	800e3d4 <_dtoa_r+0x794>
 800e530:	2300      	movs	r3, #0
 800e532:	e779      	b.n	800e428 <_dtoa_r+0x7e8>
 800e534:	9b04      	ldr	r3, [sp, #16]
 800e536:	e777      	b.n	800e428 <_dtoa_r+0x7e8>
 800e538:	2300      	movs	r3, #0
 800e53a:	9308      	str	r3, [sp, #32]
 800e53c:	e779      	b.n	800e432 <_dtoa_r+0x7f2>
 800e53e:	d093      	beq.n	800e468 <_dtoa_r+0x828>
 800e540:	9a00      	ldr	r2, [sp, #0]
 800e542:	331c      	adds	r3, #28
 800e544:	441a      	add	r2, r3
 800e546:	9200      	str	r2, [sp, #0]
 800e548:	9a06      	ldr	r2, [sp, #24]
 800e54a:	441a      	add	r2, r3
 800e54c:	441e      	add	r6, r3
 800e54e:	9206      	str	r2, [sp, #24]
 800e550:	e78a      	b.n	800e468 <_dtoa_r+0x828>
 800e552:	4603      	mov	r3, r0
 800e554:	e7f4      	b.n	800e540 <_dtoa_r+0x900>
 800e556:	9b03      	ldr	r3, [sp, #12]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	46b8      	mov	r8, r7
 800e55c:	dc20      	bgt.n	800e5a0 <_dtoa_r+0x960>
 800e55e:	469b      	mov	fp, r3
 800e560:	9b07      	ldr	r3, [sp, #28]
 800e562:	2b02      	cmp	r3, #2
 800e564:	dd1e      	ble.n	800e5a4 <_dtoa_r+0x964>
 800e566:	f1bb 0f00 	cmp.w	fp, #0
 800e56a:	f47f adb1 	bne.w	800e0d0 <_dtoa_r+0x490>
 800e56e:	4621      	mov	r1, r4
 800e570:	465b      	mov	r3, fp
 800e572:	2205      	movs	r2, #5
 800e574:	4648      	mov	r0, r9
 800e576:	f000 f9df 	bl	800e938 <__multadd>
 800e57a:	4601      	mov	r1, r0
 800e57c:	4604      	mov	r4, r0
 800e57e:	9802      	ldr	r0, [sp, #8]
 800e580:	f000 fbea 	bl	800ed58 <__mcmp>
 800e584:	2800      	cmp	r0, #0
 800e586:	f77f ada3 	ble.w	800e0d0 <_dtoa_r+0x490>
 800e58a:	4656      	mov	r6, sl
 800e58c:	2331      	movs	r3, #49	@ 0x31
 800e58e:	f806 3b01 	strb.w	r3, [r6], #1
 800e592:	f108 0801 	add.w	r8, r8, #1
 800e596:	e59f      	b.n	800e0d8 <_dtoa_r+0x498>
 800e598:	9c03      	ldr	r4, [sp, #12]
 800e59a:	46b8      	mov	r8, r7
 800e59c:	4625      	mov	r5, r4
 800e59e:	e7f4      	b.n	800e58a <_dtoa_r+0x94a>
 800e5a0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e5a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	f000 8101 	beq.w	800e7ae <_dtoa_r+0xb6e>
 800e5ac:	2e00      	cmp	r6, #0
 800e5ae:	dd05      	ble.n	800e5bc <_dtoa_r+0x97c>
 800e5b0:	4629      	mov	r1, r5
 800e5b2:	4632      	mov	r2, r6
 800e5b4:	4648      	mov	r0, r9
 800e5b6:	f000 fb63 	bl	800ec80 <__lshift>
 800e5ba:	4605      	mov	r5, r0
 800e5bc:	9b08      	ldr	r3, [sp, #32]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d05c      	beq.n	800e67c <_dtoa_r+0xa3c>
 800e5c2:	6869      	ldr	r1, [r5, #4]
 800e5c4:	4648      	mov	r0, r9
 800e5c6:	f000 f955 	bl	800e874 <_Balloc>
 800e5ca:	4606      	mov	r6, r0
 800e5cc:	b928      	cbnz	r0, 800e5da <_dtoa_r+0x99a>
 800e5ce:	4b82      	ldr	r3, [pc, #520]	@ (800e7d8 <_dtoa_r+0xb98>)
 800e5d0:	4602      	mov	r2, r0
 800e5d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e5d6:	f7ff bb4a 	b.w	800dc6e <_dtoa_r+0x2e>
 800e5da:	692a      	ldr	r2, [r5, #16]
 800e5dc:	3202      	adds	r2, #2
 800e5de:	0092      	lsls	r2, r2, #2
 800e5e0:	f105 010c 	add.w	r1, r5, #12
 800e5e4:	300c      	adds	r0, #12
 800e5e6:	f7ff fa92 	bl	800db0e <memcpy>
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	4631      	mov	r1, r6
 800e5ee:	4648      	mov	r0, r9
 800e5f0:	f000 fb46 	bl	800ec80 <__lshift>
 800e5f4:	f10a 0301 	add.w	r3, sl, #1
 800e5f8:	9300      	str	r3, [sp, #0]
 800e5fa:	eb0a 030b 	add.w	r3, sl, fp
 800e5fe:	9308      	str	r3, [sp, #32]
 800e600:	9b04      	ldr	r3, [sp, #16]
 800e602:	f003 0301 	and.w	r3, r3, #1
 800e606:	462f      	mov	r7, r5
 800e608:	9306      	str	r3, [sp, #24]
 800e60a:	4605      	mov	r5, r0
 800e60c:	9b00      	ldr	r3, [sp, #0]
 800e60e:	9802      	ldr	r0, [sp, #8]
 800e610:	4621      	mov	r1, r4
 800e612:	f103 3bff 	add.w	fp, r3, #4294967295
 800e616:	f7ff fa88 	bl	800db2a <quorem>
 800e61a:	4603      	mov	r3, r0
 800e61c:	3330      	adds	r3, #48	@ 0x30
 800e61e:	9003      	str	r0, [sp, #12]
 800e620:	4639      	mov	r1, r7
 800e622:	9802      	ldr	r0, [sp, #8]
 800e624:	9309      	str	r3, [sp, #36]	@ 0x24
 800e626:	f000 fb97 	bl	800ed58 <__mcmp>
 800e62a:	462a      	mov	r2, r5
 800e62c:	9004      	str	r0, [sp, #16]
 800e62e:	4621      	mov	r1, r4
 800e630:	4648      	mov	r0, r9
 800e632:	f000 fbad 	bl	800ed90 <__mdiff>
 800e636:	68c2      	ldr	r2, [r0, #12]
 800e638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e63a:	4606      	mov	r6, r0
 800e63c:	bb02      	cbnz	r2, 800e680 <_dtoa_r+0xa40>
 800e63e:	4601      	mov	r1, r0
 800e640:	9802      	ldr	r0, [sp, #8]
 800e642:	f000 fb89 	bl	800ed58 <__mcmp>
 800e646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e648:	4602      	mov	r2, r0
 800e64a:	4631      	mov	r1, r6
 800e64c:	4648      	mov	r0, r9
 800e64e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e650:	9309      	str	r3, [sp, #36]	@ 0x24
 800e652:	f000 f94f 	bl	800e8f4 <_Bfree>
 800e656:	9b07      	ldr	r3, [sp, #28]
 800e658:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e65a:	9e00      	ldr	r6, [sp, #0]
 800e65c:	ea42 0103 	orr.w	r1, r2, r3
 800e660:	9b06      	ldr	r3, [sp, #24]
 800e662:	4319      	orrs	r1, r3
 800e664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e666:	d10d      	bne.n	800e684 <_dtoa_r+0xa44>
 800e668:	2b39      	cmp	r3, #57	@ 0x39
 800e66a:	d027      	beq.n	800e6bc <_dtoa_r+0xa7c>
 800e66c:	9a04      	ldr	r2, [sp, #16]
 800e66e:	2a00      	cmp	r2, #0
 800e670:	dd01      	ble.n	800e676 <_dtoa_r+0xa36>
 800e672:	9b03      	ldr	r3, [sp, #12]
 800e674:	3331      	adds	r3, #49	@ 0x31
 800e676:	f88b 3000 	strb.w	r3, [fp]
 800e67a:	e52e      	b.n	800e0da <_dtoa_r+0x49a>
 800e67c:	4628      	mov	r0, r5
 800e67e:	e7b9      	b.n	800e5f4 <_dtoa_r+0x9b4>
 800e680:	2201      	movs	r2, #1
 800e682:	e7e2      	b.n	800e64a <_dtoa_r+0xa0a>
 800e684:	9904      	ldr	r1, [sp, #16]
 800e686:	2900      	cmp	r1, #0
 800e688:	db04      	blt.n	800e694 <_dtoa_r+0xa54>
 800e68a:	9807      	ldr	r0, [sp, #28]
 800e68c:	4301      	orrs	r1, r0
 800e68e:	9806      	ldr	r0, [sp, #24]
 800e690:	4301      	orrs	r1, r0
 800e692:	d120      	bne.n	800e6d6 <_dtoa_r+0xa96>
 800e694:	2a00      	cmp	r2, #0
 800e696:	ddee      	ble.n	800e676 <_dtoa_r+0xa36>
 800e698:	9902      	ldr	r1, [sp, #8]
 800e69a:	9300      	str	r3, [sp, #0]
 800e69c:	2201      	movs	r2, #1
 800e69e:	4648      	mov	r0, r9
 800e6a0:	f000 faee 	bl	800ec80 <__lshift>
 800e6a4:	4621      	mov	r1, r4
 800e6a6:	9002      	str	r0, [sp, #8]
 800e6a8:	f000 fb56 	bl	800ed58 <__mcmp>
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	9b00      	ldr	r3, [sp, #0]
 800e6b0:	dc02      	bgt.n	800e6b8 <_dtoa_r+0xa78>
 800e6b2:	d1e0      	bne.n	800e676 <_dtoa_r+0xa36>
 800e6b4:	07da      	lsls	r2, r3, #31
 800e6b6:	d5de      	bpl.n	800e676 <_dtoa_r+0xa36>
 800e6b8:	2b39      	cmp	r3, #57	@ 0x39
 800e6ba:	d1da      	bne.n	800e672 <_dtoa_r+0xa32>
 800e6bc:	2339      	movs	r3, #57	@ 0x39
 800e6be:	f88b 3000 	strb.w	r3, [fp]
 800e6c2:	4633      	mov	r3, r6
 800e6c4:	461e      	mov	r6, r3
 800e6c6:	3b01      	subs	r3, #1
 800e6c8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e6cc:	2a39      	cmp	r2, #57	@ 0x39
 800e6ce:	d04e      	beq.n	800e76e <_dtoa_r+0xb2e>
 800e6d0:	3201      	adds	r2, #1
 800e6d2:	701a      	strb	r2, [r3, #0]
 800e6d4:	e501      	b.n	800e0da <_dtoa_r+0x49a>
 800e6d6:	2a00      	cmp	r2, #0
 800e6d8:	dd03      	ble.n	800e6e2 <_dtoa_r+0xaa2>
 800e6da:	2b39      	cmp	r3, #57	@ 0x39
 800e6dc:	d0ee      	beq.n	800e6bc <_dtoa_r+0xa7c>
 800e6de:	3301      	adds	r3, #1
 800e6e0:	e7c9      	b.n	800e676 <_dtoa_r+0xa36>
 800e6e2:	9a00      	ldr	r2, [sp, #0]
 800e6e4:	9908      	ldr	r1, [sp, #32]
 800e6e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e6ea:	428a      	cmp	r2, r1
 800e6ec:	d028      	beq.n	800e740 <_dtoa_r+0xb00>
 800e6ee:	9902      	ldr	r1, [sp, #8]
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	220a      	movs	r2, #10
 800e6f4:	4648      	mov	r0, r9
 800e6f6:	f000 f91f 	bl	800e938 <__multadd>
 800e6fa:	42af      	cmp	r7, r5
 800e6fc:	9002      	str	r0, [sp, #8]
 800e6fe:	f04f 0300 	mov.w	r3, #0
 800e702:	f04f 020a 	mov.w	r2, #10
 800e706:	4639      	mov	r1, r7
 800e708:	4648      	mov	r0, r9
 800e70a:	d107      	bne.n	800e71c <_dtoa_r+0xadc>
 800e70c:	f000 f914 	bl	800e938 <__multadd>
 800e710:	4607      	mov	r7, r0
 800e712:	4605      	mov	r5, r0
 800e714:	9b00      	ldr	r3, [sp, #0]
 800e716:	3301      	adds	r3, #1
 800e718:	9300      	str	r3, [sp, #0]
 800e71a:	e777      	b.n	800e60c <_dtoa_r+0x9cc>
 800e71c:	f000 f90c 	bl	800e938 <__multadd>
 800e720:	4629      	mov	r1, r5
 800e722:	4607      	mov	r7, r0
 800e724:	2300      	movs	r3, #0
 800e726:	220a      	movs	r2, #10
 800e728:	4648      	mov	r0, r9
 800e72a:	f000 f905 	bl	800e938 <__multadd>
 800e72e:	4605      	mov	r5, r0
 800e730:	e7f0      	b.n	800e714 <_dtoa_r+0xad4>
 800e732:	f1bb 0f00 	cmp.w	fp, #0
 800e736:	bfcc      	ite	gt
 800e738:	465e      	movgt	r6, fp
 800e73a:	2601      	movle	r6, #1
 800e73c:	4456      	add	r6, sl
 800e73e:	2700      	movs	r7, #0
 800e740:	9902      	ldr	r1, [sp, #8]
 800e742:	9300      	str	r3, [sp, #0]
 800e744:	2201      	movs	r2, #1
 800e746:	4648      	mov	r0, r9
 800e748:	f000 fa9a 	bl	800ec80 <__lshift>
 800e74c:	4621      	mov	r1, r4
 800e74e:	9002      	str	r0, [sp, #8]
 800e750:	f000 fb02 	bl	800ed58 <__mcmp>
 800e754:	2800      	cmp	r0, #0
 800e756:	dcb4      	bgt.n	800e6c2 <_dtoa_r+0xa82>
 800e758:	d102      	bne.n	800e760 <_dtoa_r+0xb20>
 800e75a:	9b00      	ldr	r3, [sp, #0]
 800e75c:	07db      	lsls	r3, r3, #31
 800e75e:	d4b0      	bmi.n	800e6c2 <_dtoa_r+0xa82>
 800e760:	4633      	mov	r3, r6
 800e762:	461e      	mov	r6, r3
 800e764:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e768:	2a30      	cmp	r2, #48	@ 0x30
 800e76a:	d0fa      	beq.n	800e762 <_dtoa_r+0xb22>
 800e76c:	e4b5      	b.n	800e0da <_dtoa_r+0x49a>
 800e76e:	459a      	cmp	sl, r3
 800e770:	d1a8      	bne.n	800e6c4 <_dtoa_r+0xa84>
 800e772:	2331      	movs	r3, #49	@ 0x31
 800e774:	f108 0801 	add.w	r8, r8, #1
 800e778:	f88a 3000 	strb.w	r3, [sl]
 800e77c:	e4ad      	b.n	800e0da <_dtoa_r+0x49a>
 800e77e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e780:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e7dc <_dtoa_r+0xb9c>
 800e784:	b11b      	cbz	r3, 800e78e <_dtoa_r+0xb4e>
 800e786:	f10a 0308 	add.w	r3, sl, #8
 800e78a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e78c:	6013      	str	r3, [r2, #0]
 800e78e:	4650      	mov	r0, sl
 800e790:	b017      	add	sp, #92	@ 0x5c
 800e792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e796:	9b07      	ldr	r3, [sp, #28]
 800e798:	2b01      	cmp	r3, #1
 800e79a:	f77f ae2e 	ble.w	800e3fa <_dtoa_r+0x7ba>
 800e79e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e7a0:	9308      	str	r3, [sp, #32]
 800e7a2:	2001      	movs	r0, #1
 800e7a4:	e64d      	b.n	800e442 <_dtoa_r+0x802>
 800e7a6:	f1bb 0f00 	cmp.w	fp, #0
 800e7aa:	f77f aed9 	ble.w	800e560 <_dtoa_r+0x920>
 800e7ae:	4656      	mov	r6, sl
 800e7b0:	9802      	ldr	r0, [sp, #8]
 800e7b2:	4621      	mov	r1, r4
 800e7b4:	f7ff f9b9 	bl	800db2a <quorem>
 800e7b8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e7bc:	f806 3b01 	strb.w	r3, [r6], #1
 800e7c0:	eba6 020a 	sub.w	r2, r6, sl
 800e7c4:	4593      	cmp	fp, r2
 800e7c6:	ddb4      	ble.n	800e732 <_dtoa_r+0xaf2>
 800e7c8:	9902      	ldr	r1, [sp, #8]
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	220a      	movs	r2, #10
 800e7ce:	4648      	mov	r0, r9
 800e7d0:	f000 f8b2 	bl	800e938 <__multadd>
 800e7d4:	9002      	str	r0, [sp, #8]
 800e7d6:	e7eb      	b.n	800e7b0 <_dtoa_r+0xb70>
 800e7d8:	080a3a98 	.word	0x080a3a98
 800e7dc:	080a3a1c 	.word	0x080a3a1c

0800e7e0 <_free_r>:
 800e7e0:	b538      	push	{r3, r4, r5, lr}
 800e7e2:	4605      	mov	r5, r0
 800e7e4:	2900      	cmp	r1, #0
 800e7e6:	d041      	beq.n	800e86c <_free_r+0x8c>
 800e7e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7ec:	1f0c      	subs	r4, r1, #4
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	bfb8      	it	lt
 800e7f2:	18e4      	addlt	r4, r4, r3
 800e7f4:	f7fe fab0 	bl	800cd58 <__malloc_lock>
 800e7f8:	4a1d      	ldr	r2, [pc, #116]	@ (800e870 <_free_r+0x90>)
 800e7fa:	6813      	ldr	r3, [r2, #0]
 800e7fc:	b933      	cbnz	r3, 800e80c <_free_r+0x2c>
 800e7fe:	6063      	str	r3, [r4, #4]
 800e800:	6014      	str	r4, [r2, #0]
 800e802:	4628      	mov	r0, r5
 800e804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e808:	f7fe baac 	b.w	800cd64 <__malloc_unlock>
 800e80c:	42a3      	cmp	r3, r4
 800e80e:	d908      	bls.n	800e822 <_free_r+0x42>
 800e810:	6820      	ldr	r0, [r4, #0]
 800e812:	1821      	adds	r1, r4, r0
 800e814:	428b      	cmp	r3, r1
 800e816:	bf01      	itttt	eq
 800e818:	6819      	ldreq	r1, [r3, #0]
 800e81a:	685b      	ldreq	r3, [r3, #4]
 800e81c:	1809      	addeq	r1, r1, r0
 800e81e:	6021      	streq	r1, [r4, #0]
 800e820:	e7ed      	b.n	800e7fe <_free_r+0x1e>
 800e822:	461a      	mov	r2, r3
 800e824:	685b      	ldr	r3, [r3, #4]
 800e826:	b10b      	cbz	r3, 800e82c <_free_r+0x4c>
 800e828:	42a3      	cmp	r3, r4
 800e82a:	d9fa      	bls.n	800e822 <_free_r+0x42>
 800e82c:	6811      	ldr	r1, [r2, #0]
 800e82e:	1850      	adds	r0, r2, r1
 800e830:	42a0      	cmp	r0, r4
 800e832:	d10b      	bne.n	800e84c <_free_r+0x6c>
 800e834:	6820      	ldr	r0, [r4, #0]
 800e836:	4401      	add	r1, r0
 800e838:	1850      	adds	r0, r2, r1
 800e83a:	4283      	cmp	r3, r0
 800e83c:	6011      	str	r1, [r2, #0]
 800e83e:	d1e0      	bne.n	800e802 <_free_r+0x22>
 800e840:	6818      	ldr	r0, [r3, #0]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	6053      	str	r3, [r2, #4]
 800e846:	4408      	add	r0, r1
 800e848:	6010      	str	r0, [r2, #0]
 800e84a:	e7da      	b.n	800e802 <_free_r+0x22>
 800e84c:	d902      	bls.n	800e854 <_free_r+0x74>
 800e84e:	230c      	movs	r3, #12
 800e850:	602b      	str	r3, [r5, #0]
 800e852:	e7d6      	b.n	800e802 <_free_r+0x22>
 800e854:	6820      	ldr	r0, [r4, #0]
 800e856:	1821      	adds	r1, r4, r0
 800e858:	428b      	cmp	r3, r1
 800e85a:	bf04      	itt	eq
 800e85c:	6819      	ldreq	r1, [r3, #0]
 800e85e:	685b      	ldreq	r3, [r3, #4]
 800e860:	6063      	str	r3, [r4, #4]
 800e862:	bf04      	itt	eq
 800e864:	1809      	addeq	r1, r1, r0
 800e866:	6021      	streq	r1, [r4, #0]
 800e868:	6054      	str	r4, [r2, #4]
 800e86a:	e7ca      	b.n	800e802 <_free_r+0x22>
 800e86c:	bd38      	pop	{r3, r4, r5, pc}
 800e86e:	bf00      	nop
 800e870:	200082f4 	.word	0x200082f4

0800e874 <_Balloc>:
 800e874:	b570      	push	{r4, r5, r6, lr}
 800e876:	69c6      	ldr	r6, [r0, #28]
 800e878:	4604      	mov	r4, r0
 800e87a:	460d      	mov	r5, r1
 800e87c:	b976      	cbnz	r6, 800e89c <_Balloc+0x28>
 800e87e:	2010      	movs	r0, #16
 800e880:	f7fe f9c0 	bl	800cc04 <malloc>
 800e884:	4602      	mov	r2, r0
 800e886:	61e0      	str	r0, [r4, #28]
 800e888:	b920      	cbnz	r0, 800e894 <_Balloc+0x20>
 800e88a:	4b18      	ldr	r3, [pc, #96]	@ (800e8ec <_Balloc+0x78>)
 800e88c:	4818      	ldr	r0, [pc, #96]	@ (800e8f0 <_Balloc+0x7c>)
 800e88e:	216b      	movs	r1, #107	@ 0x6b
 800e890:	f000 ff56 	bl	800f740 <__assert_func>
 800e894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e898:	6006      	str	r6, [r0, #0]
 800e89a:	60c6      	str	r6, [r0, #12]
 800e89c:	69e6      	ldr	r6, [r4, #28]
 800e89e:	68f3      	ldr	r3, [r6, #12]
 800e8a0:	b183      	cbz	r3, 800e8c4 <_Balloc+0x50>
 800e8a2:	69e3      	ldr	r3, [r4, #28]
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e8aa:	b9b8      	cbnz	r0, 800e8dc <_Balloc+0x68>
 800e8ac:	2101      	movs	r1, #1
 800e8ae:	fa01 f605 	lsl.w	r6, r1, r5
 800e8b2:	1d72      	adds	r2, r6, #5
 800e8b4:	0092      	lsls	r2, r2, #2
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	f000 ff60 	bl	800f77c <_calloc_r>
 800e8bc:	b160      	cbz	r0, 800e8d8 <_Balloc+0x64>
 800e8be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e8c2:	e00e      	b.n	800e8e2 <_Balloc+0x6e>
 800e8c4:	2221      	movs	r2, #33	@ 0x21
 800e8c6:	2104      	movs	r1, #4
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	f000 ff57 	bl	800f77c <_calloc_r>
 800e8ce:	69e3      	ldr	r3, [r4, #28]
 800e8d0:	60f0      	str	r0, [r6, #12]
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d1e4      	bne.n	800e8a2 <_Balloc+0x2e>
 800e8d8:	2000      	movs	r0, #0
 800e8da:	bd70      	pop	{r4, r5, r6, pc}
 800e8dc:	6802      	ldr	r2, [r0, #0]
 800e8de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e8e8:	e7f7      	b.n	800e8da <_Balloc+0x66>
 800e8ea:	bf00      	nop
 800e8ec:	080a3a29 	.word	0x080a3a29
 800e8f0:	080a3aa9 	.word	0x080a3aa9

0800e8f4 <_Bfree>:
 800e8f4:	b570      	push	{r4, r5, r6, lr}
 800e8f6:	69c6      	ldr	r6, [r0, #28]
 800e8f8:	4605      	mov	r5, r0
 800e8fa:	460c      	mov	r4, r1
 800e8fc:	b976      	cbnz	r6, 800e91c <_Bfree+0x28>
 800e8fe:	2010      	movs	r0, #16
 800e900:	f7fe f980 	bl	800cc04 <malloc>
 800e904:	4602      	mov	r2, r0
 800e906:	61e8      	str	r0, [r5, #28]
 800e908:	b920      	cbnz	r0, 800e914 <_Bfree+0x20>
 800e90a:	4b09      	ldr	r3, [pc, #36]	@ (800e930 <_Bfree+0x3c>)
 800e90c:	4809      	ldr	r0, [pc, #36]	@ (800e934 <_Bfree+0x40>)
 800e90e:	218f      	movs	r1, #143	@ 0x8f
 800e910:	f000 ff16 	bl	800f740 <__assert_func>
 800e914:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e918:	6006      	str	r6, [r0, #0]
 800e91a:	60c6      	str	r6, [r0, #12]
 800e91c:	b13c      	cbz	r4, 800e92e <_Bfree+0x3a>
 800e91e:	69eb      	ldr	r3, [r5, #28]
 800e920:	6862      	ldr	r2, [r4, #4]
 800e922:	68db      	ldr	r3, [r3, #12]
 800e924:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e928:	6021      	str	r1, [r4, #0]
 800e92a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e92e:	bd70      	pop	{r4, r5, r6, pc}
 800e930:	080a3a29 	.word	0x080a3a29
 800e934:	080a3aa9 	.word	0x080a3aa9

0800e938 <__multadd>:
 800e938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e93c:	690d      	ldr	r5, [r1, #16]
 800e93e:	4607      	mov	r7, r0
 800e940:	460c      	mov	r4, r1
 800e942:	461e      	mov	r6, r3
 800e944:	f101 0c14 	add.w	ip, r1, #20
 800e948:	2000      	movs	r0, #0
 800e94a:	f8dc 3000 	ldr.w	r3, [ip]
 800e94e:	b299      	uxth	r1, r3
 800e950:	fb02 6101 	mla	r1, r2, r1, r6
 800e954:	0c1e      	lsrs	r6, r3, #16
 800e956:	0c0b      	lsrs	r3, r1, #16
 800e958:	fb02 3306 	mla	r3, r2, r6, r3
 800e95c:	b289      	uxth	r1, r1
 800e95e:	3001      	adds	r0, #1
 800e960:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e964:	4285      	cmp	r5, r0
 800e966:	f84c 1b04 	str.w	r1, [ip], #4
 800e96a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e96e:	dcec      	bgt.n	800e94a <__multadd+0x12>
 800e970:	b30e      	cbz	r6, 800e9b6 <__multadd+0x7e>
 800e972:	68a3      	ldr	r3, [r4, #8]
 800e974:	42ab      	cmp	r3, r5
 800e976:	dc19      	bgt.n	800e9ac <__multadd+0x74>
 800e978:	6861      	ldr	r1, [r4, #4]
 800e97a:	4638      	mov	r0, r7
 800e97c:	3101      	adds	r1, #1
 800e97e:	f7ff ff79 	bl	800e874 <_Balloc>
 800e982:	4680      	mov	r8, r0
 800e984:	b928      	cbnz	r0, 800e992 <__multadd+0x5a>
 800e986:	4602      	mov	r2, r0
 800e988:	4b0c      	ldr	r3, [pc, #48]	@ (800e9bc <__multadd+0x84>)
 800e98a:	480d      	ldr	r0, [pc, #52]	@ (800e9c0 <__multadd+0x88>)
 800e98c:	21ba      	movs	r1, #186	@ 0xba
 800e98e:	f000 fed7 	bl	800f740 <__assert_func>
 800e992:	6922      	ldr	r2, [r4, #16]
 800e994:	3202      	adds	r2, #2
 800e996:	f104 010c 	add.w	r1, r4, #12
 800e99a:	0092      	lsls	r2, r2, #2
 800e99c:	300c      	adds	r0, #12
 800e99e:	f7ff f8b6 	bl	800db0e <memcpy>
 800e9a2:	4621      	mov	r1, r4
 800e9a4:	4638      	mov	r0, r7
 800e9a6:	f7ff ffa5 	bl	800e8f4 <_Bfree>
 800e9aa:	4644      	mov	r4, r8
 800e9ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e9b0:	3501      	adds	r5, #1
 800e9b2:	615e      	str	r6, [r3, #20]
 800e9b4:	6125      	str	r5, [r4, #16]
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9bc:	080a3a98 	.word	0x080a3a98
 800e9c0:	080a3aa9 	.word	0x080a3aa9

0800e9c4 <__hi0bits>:
 800e9c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	bf36      	itet	cc
 800e9cc:	0403      	lslcc	r3, r0, #16
 800e9ce:	2000      	movcs	r0, #0
 800e9d0:	2010      	movcc	r0, #16
 800e9d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e9d6:	bf3c      	itt	cc
 800e9d8:	021b      	lslcc	r3, r3, #8
 800e9da:	3008      	addcc	r0, #8
 800e9dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e9e0:	bf3c      	itt	cc
 800e9e2:	011b      	lslcc	r3, r3, #4
 800e9e4:	3004      	addcc	r0, #4
 800e9e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e9ea:	bf3c      	itt	cc
 800e9ec:	009b      	lslcc	r3, r3, #2
 800e9ee:	3002      	addcc	r0, #2
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	db05      	blt.n	800ea00 <__hi0bits+0x3c>
 800e9f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e9f8:	f100 0001 	add.w	r0, r0, #1
 800e9fc:	bf08      	it	eq
 800e9fe:	2020      	moveq	r0, #32
 800ea00:	4770      	bx	lr

0800ea02 <__lo0bits>:
 800ea02:	6803      	ldr	r3, [r0, #0]
 800ea04:	4602      	mov	r2, r0
 800ea06:	f013 0007 	ands.w	r0, r3, #7
 800ea0a:	d00b      	beq.n	800ea24 <__lo0bits+0x22>
 800ea0c:	07d9      	lsls	r1, r3, #31
 800ea0e:	d421      	bmi.n	800ea54 <__lo0bits+0x52>
 800ea10:	0798      	lsls	r0, r3, #30
 800ea12:	bf49      	itett	mi
 800ea14:	085b      	lsrmi	r3, r3, #1
 800ea16:	089b      	lsrpl	r3, r3, #2
 800ea18:	2001      	movmi	r0, #1
 800ea1a:	6013      	strmi	r3, [r2, #0]
 800ea1c:	bf5c      	itt	pl
 800ea1e:	6013      	strpl	r3, [r2, #0]
 800ea20:	2002      	movpl	r0, #2
 800ea22:	4770      	bx	lr
 800ea24:	b299      	uxth	r1, r3
 800ea26:	b909      	cbnz	r1, 800ea2c <__lo0bits+0x2a>
 800ea28:	0c1b      	lsrs	r3, r3, #16
 800ea2a:	2010      	movs	r0, #16
 800ea2c:	b2d9      	uxtb	r1, r3
 800ea2e:	b909      	cbnz	r1, 800ea34 <__lo0bits+0x32>
 800ea30:	3008      	adds	r0, #8
 800ea32:	0a1b      	lsrs	r3, r3, #8
 800ea34:	0719      	lsls	r1, r3, #28
 800ea36:	bf04      	itt	eq
 800ea38:	091b      	lsreq	r3, r3, #4
 800ea3a:	3004      	addeq	r0, #4
 800ea3c:	0799      	lsls	r1, r3, #30
 800ea3e:	bf04      	itt	eq
 800ea40:	089b      	lsreq	r3, r3, #2
 800ea42:	3002      	addeq	r0, #2
 800ea44:	07d9      	lsls	r1, r3, #31
 800ea46:	d403      	bmi.n	800ea50 <__lo0bits+0x4e>
 800ea48:	085b      	lsrs	r3, r3, #1
 800ea4a:	f100 0001 	add.w	r0, r0, #1
 800ea4e:	d003      	beq.n	800ea58 <__lo0bits+0x56>
 800ea50:	6013      	str	r3, [r2, #0]
 800ea52:	4770      	bx	lr
 800ea54:	2000      	movs	r0, #0
 800ea56:	4770      	bx	lr
 800ea58:	2020      	movs	r0, #32
 800ea5a:	4770      	bx	lr

0800ea5c <__i2b>:
 800ea5c:	b510      	push	{r4, lr}
 800ea5e:	460c      	mov	r4, r1
 800ea60:	2101      	movs	r1, #1
 800ea62:	f7ff ff07 	bl	800e874 <_Balloc>
 800ea66:	4602      	mov	r2, r0
 800ea68:	b928      	cbnz	r0, 800ea76 <__i2b+0x1a>
 800ea6a:	4b05      	ldr	r3, [pc, #20]	@ (800ea80 <__i2b+0x24>)
 800ea6c:	4805      	ldr	r0, [pc, #20]	@ (800ea84 <__i2b+0x28>)
 800ea6e:	f240 1145 	movw	r1, #325	@ 0x145
 800ea72:	f000 fe65 	bl	800f740 <__assert_func>
 800ea76:	2301      	movs	r3, #1
 800ea78:	6144      	str	r4, [r0, #20]
 800ea7a:	6103      	str	r3, [r0, #16]
 800ea7c:	bd10      	pop	{r4, pc}
 800ea7e:	bf00      	nop
 800ea80:	080a3a98 	.word	0x080a3a98
 800ea84:	080a3aa9 	.word	0x080a3aa9

0800ea88 <__multiply>:
 800ea88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea8c:	4617      	mov	r7, r2
 800ea8e:	690a      	ldr	r2, [r1, #16]
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	429a      	cmp	r2, r3
 800ea94:	bfa8      	it	ge
 800ea96:	463b      	movge	r3, r7
 800ea98:	4689      	mov	r9, r1
 800ea9a:	bfa4      	itt	ge
 800ea9c:	460f      	movge	r7, r1
 800ea9e:	4699      	movge	r9, r3
 800eaa0:	693d      	ldr	r5, [r7, #16]
 800eaa2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	6879      	ldr	r1, [r7, #4]
 800eaaa:	eb05 060a 	add.w	r6, r5, sl
 800eaae:	42b3      	cmp	r3, r6
 800eab0:	b085      	sub	sp, #20
 800eab2:	bfb8      	it	lt
 800eab4:	3101      	addlt	r1, #1
 800eab6:	f7ff fedd 	bl	800e874 <_Balloc>
 800eaba:	b930      	cbnz	r0, 800eaca <__multiply+0x42>
 800eabc:	4602      	mov	r2, r0
 800eabe:	4b41      	ldr	r3, [pc, #260]	@ (800ebc4 <__multiply+0x13c>)
 800eac0:	4841      	ldr	r0, [pc, #260]	@ (800ebc8 <__multiply+0x140>)
 800eac2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800eac6:	f000 fe3b 	bl	800f740 <__assert_func>
 800eaca:	f100 0414 	add.w	r4, r0, #20
 800eace:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ead2:	4623      	mov	r3, r4
 800ead4:	2200      	movs	r2, #0
 800ead6:	4573      	cmp	r3, lr
 800ead8:	d320      	bcc.n	800eb1c <__multiply+0x94>
 800eada:	f107 0814 	add.w	r8, r7, #20
 800eade:	f109 0114 	add.w	r1, r9, #20
 800eae2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800eae6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800eaea:	9302      	str	r3, [sp, #8]
 800eaec:	1beb      	subs	r3, r5, r7
 800eaee:	3b15      	subs	r3, #21
 800eaf0:	f023 0303 	bic.w	r3, r3, #3
 800eaf4:	3304      	adds	r3, #4
 800eaf6:	3715      	adds	r7, #21
 800eaf8:	42bd      	cmp	r5, r7
 800eafa:	bf38      	it	cc
 800eafc:	2304      	movcc	r3, #4
 800eafe:	9301      	str	r3, [sp, #4]
 800eb00:	9b02      	ldr	r3, [sp, #8]
 800eb02:	9103      	str	r1, [sp, #12]
 800eb04:	428b      	cmp	r3, r1
 800eb06:	d80c      	bhi.n	800eb22 <__multiply+0x9a>
 800eb08:	2e00      	cmp	r6, #0
 800eb0a:	dd03      	ble.n	800eb14 <__multiply+0x8c>
 800eb0c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d055      	beq.n	800ebc0 <__multiply+0x138>
 800eb14:	6106      	str	r6, [r0, #16]
 800eb16:	b005      	add	sp, #20
 800eb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb1c:	f843 2b04 	str.w	r2, [r3], #4
 800eb20:	e7d9      	b.n	800ead6 <__multiply+0x4e>
 800eb22:	f8b1 a000 	ldrh.w	sl, [r1]
 800eb26:	f1ba 0f00 	cmp.w	sl, #0
 800eb2a:	d01f      	beq.n	800eb6c <__multiply+0xe4>
 800eb2c:	46c4      	mov	ip, r8
 800eb2e:	46a1      	mov	r9, r4
 800eb30:	2700      	movs	r7, #0
 800eb32:	f85c 2b04 	ldr.w	r2, [ip], #4
 800eb36:	f8d9 3000 	ldr.w	r3, [r9]
 800eb3a:	fa1f fb82 	uxth.w	fp, r2
 800eb3e:	b29b      	uxth	r3, r3
 800eb40:	fb0a 330b 	mla	r3, sl, fp, r3
 800eb44:	443b      	add	r3, r7
 800eb46:	f8d9 7000 	ldr.w	r7, [r9]
 800eb4a:	0c12      	lsrs	r2, r2, #16
 800eb4c:	0c3f      	lsrs	r7, r7, #16
 800eb4e:	fb0a 7202 	mla	r2, sl, r2, r7
 800eb52:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb5c:	4565      	cmp	r5, ip
 800eb5e:	f849 3b04 	str.w	r3, [r9], #4
 800eb62:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800eb66:	d8e4      	bhi.n	800eb32 <__multiply+0xaa>
 800eb68:	9b01      	ldr	r3, [sp, #4]
 800eb6a:	50e7      	str	r7, [r4, r3]
 800eb6c:	9b03      	ldr	r3, [sp, #12]
 800eb6e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800eb72:	3104      	adds	r1, #4
 800eb74:	f1b9 0f00 	cmp.w	r9, #0
 800eb78:	d020      	beq.n	800ebbc <__multiply+0x134>
 800eb7a:	6823      	ldr	r3, [r4, #0]
 800eb7c:	4647      	mov	r7, r8
 800eb7e:	46a4      	mov	ip, r4
 800eb80:	f04f 0a00 	mov.w	sl, #0
 800eb84:	f8b7 b000 	ldrh.w	fp, [r7]
 800eb88:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800eb8c:	fb09 220b 	mla	r2, r9, fp, r2
 800eb90:	4452      	add	r2, sl
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb98:	f84c 3b04 	str.w	r3, [ip], #4
 800eb9c:	f857 3b04 	ldr.w	r3, [r7], #4
 800eba0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eba4:	f8bc 3000 	ldrh.w	r3, [ip]
 800eba8:	fb09 330a 	mla	r3, r9, sl, r3
 800ebac:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ebb0:	42bd      	cmp	r5, r7
 800ebb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ebb6:	d8e5      	bhi.n	800eb84 <__multiply+0xfc>
 800ebb8:	9a01      	ldr	r2, [sp, #4]
 800ebba:	50a3      	str	r3, [r4, r2]
 800ebbc:	3404      	adds	r4, #4
 800ebbe:	e79f      	b.n	800eb00 <__multiply+0x78>
 800ebc0:	3e01      	subs	r6, #1
 800ebc2:	e7a1      	b.n	800eb08 <__multiply+0x80>
 800ebc4:	080a3a98 	.word	0x080a3a98
 800ebc8:	080a3aa9 	.word	0x080a3aa9

0800ebcc <__pow5mult>:
 800ebcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebd0:	4615      	mov	r5, r2
 800ebd2:	f012 0203 	ands.w	r2, r2, #3
 800ebd6:	4607      	mov	r7, r0
 800ebd8:	460e      	mov	r6, r1
 800ebda:	d007      	beq.n	800ebec <__pow5mult+0x20>
 800ebdc:	4c25      	ldr	r4, [pc, #148]	@ (800ec74 <__pow5mult+0xa8>)
 800ebde:	3a01      	subs	r2, #1
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ebe6:	f7ff fea7 	bl	800e938 <__multadd>
 800ebea:	4606      	mov	r6, r0
 800ebec:	10ad      	asrs	r5, r5, #2
 800ebee:	d03d      	beq.n	800ec6c <__pow5mult+0xa0>
 800ebf0:	69fc      	ldr	r4, [r7, #28]
 800ebf2:	b97c      	cbnz	r4, 800ec14 <__pow5mult+0x48>
 800ebf4:	2010      	movs	r0, #16
 800ebf6:	f7fe f805 	bl	800cc04 <malloc>
 800ebfa:	4602      	mov	r2, r0
 800ebfc:	61f8      	str	r0, [r7, #28]
 800ebfe:	b928      	cbnz	r0, 800ec0c <__pow5mult+0x40>
 800ec00:	4b1d      	ldr	r3, [pc, #116]	@ (800ec78 <__pow5mult+0xac>)
 800ec02:	481e      	ldr	r0, [pc, #120]	@ (800ec7c <__pow5mult+0xb0>)
 800ec04:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ec08:	f000 fd9a 	bl	800f740 <__assert_func>
 800ec0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec10:	6004      	str	r4, [r0, #0]
 800ec12:	60c4      	str	r4, [r0, #12]
 800ec14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ec18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ec1c:	b94c      	cbnz	r4, 800ec32 <__pow5mult+0x66>
 800ec1e:	f240 2171 	movw	r1, #625	@ 0x271
 800ec22:	4638      	mov	r0, r7
 800ec24:	f7ff ff1a 	bl	800ea5c <__i2b>
 800ec28:	2300      	movs	r3, #0
 800ec2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ec2e:	4604      	mov	r4, r0
 800ec30:	6003      	str	r3, [r0, #0]
 800ec32:	f04f 0900 	mov.w	r9, #0
 800ec36:	07eb      	lsls	r3, r5, #31
 800ec38:	d50a      	bpl.n	800ec50 <__pow5mult+0x84>
 800ec3a:	4631      	mov	r1, r6
 800ec3c:	4622      	mov	r2, r4
 800ec3e:	4638      	mov	r0, r7
 800ec40:	f7ff ff22 	bl	800ea88 <__multiply>
 800ec44:	4631      	mov	r1, r6
 800ec46:	4680      	mov	r8, r0
 800ec48:	4638      	mov	r0, r7
 800ec4a:	f7ff fe53 	bl	800e8f4 <_Bfree>
 800ec4e:	4646      	mov	r6, r8
 800ec50:	106d      	asrs	r5, r5, #1
 800ec52:	d00b      	beq.n	800ec6c <__pow5mult+0xa0>
 800ec54:	6820      	ldr	r0, [r4, #0]
 800ec56:	b938      	cbnz	r0, 800ec68 <__pow5mult+0x9c>
 800ec58:	4622      	mov	r2, r4
 800ec5a:	4621      	mov	r1, r4
 800ec5c:	4638      	mov	r0, r7
 800ec5e:	f7ff ff13 	bl	800ea88 <__multiply>
 800ec62:	6020      	str	r0, [r4, #0]
 800ec64:	f8c0 9000 	str.w	r9, [r0]
 800ec68:	4604      	mov	r4, r0
 800ec6a:	e7e4      	b.n	800ec36 <__pow5mult+0x6a>
 800ec6c:	4630      	mov	r0, r6
 800ec6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec72:	bf00      	nop
 800ec74:	080a3b5c 	.word	0x080a3b5c
 800ec78:	080a3a29 	.word	0x080a3a29
 800ec7c:	080a3aa9 	.word	0x080a3aa9

0800ec80 <__lshift>:
 800ec80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec84:	460c      	mov	r4, r1
 800ec86:	6849      	ldr	r1, [r1, #4]
 800ec88:	6923      	ldr	r3, [r4, #16]
 800ec8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec8e:	68a3      	ldr	r3, [r4, #8]
 800ec90:	4607      	mov	r7, r0
 800ec92:	4691      	mov	r9, r2
 800ec94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec98:	f108 0601 	add.w	r6, r8, #1
 800ec9c:	42b3      	cmp	r3, r6
 800ec9e:	db0b      	blt.n	800ecb8 <__lshift+0x38>
 800eca0:	4638      	mov	r0, r7
 800eca2:	f7ff fde7 	bl	800e874 <_Balloc>
 800eca6:	4605      	mov	r5, r0
 800eca8:	b948      	cbnz	r0, 800ecbe <__lshift+0x3e>
 800ecaa:	4602      	mov	r2, r0
 800ecac:	4b28      	ldr	r3, [pc, #160]	@ (800ed50 <__lshift+0xd0>)
 800ecae:	4829      	ldr	r0, [pc, #164]	@ (800ed54 <__lshift+0xd4>)
 800ecb0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ecb4:	f000 fd44 	bl	800f740 <__assert_func>
 800ecb8:	3101      	adds	r1, #1
 800ecba:	005b      	lsls	r3, r3, #1
 800ecbc:	e7ee      	b.n	800ec9c <__lshift+0x1c>
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	f100 0114 	add.w	r1, r0, #20
 800ecc4:	f100 0210 	add.w	r2, r0, #16
 800ecc8:	4618      	mov	r0, r3
 800ecca:	4553      	cmp	r3, sl
 800eccc:	db33      	blt.n	800ed36 <__lshift+0xb6>
 800ecce:	6920      	ldr	r0, [r4, #16]
 800ecd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ecd4:	f104 0314 	add.w	r3, r4, #20
 800ecd8:	f019 091f 	ands.w	r9, r9, #31
 800ecdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ece0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ece4:	d02b      	beq.n	800ed3e <__lshift+0xbe>
 800ece6:	f1c9 0e20 	rsb	lr, r9, #32
 800ecea:	468a      	mov	sl, r1
 800ecec:	2200      	movs	r2, #0
 800ecee:	6818      	ldr	r0, [r3, #0]
 800ecf0:	fa00 f009 	lsl.w	r0, r0, r9
 800ecf4:	4310      	orrs	r0, r2
 800ecf6:	f84a 0b04 	str.w	r0, [sl], #4
 800ecfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecfe:	459c      	cmp	ip, r3
 800ed00:	fa22 f20e 	lsr.w	r2, r2, lr
 800ed04:	d8f3      	bhi.n	800ecee <__lshift+0x6e>
 800ed06:	ebac 0304 	sub.w	r3, ip, r4
 800ed0a:	3b15      	subs	r3, #21
 800ed0c:	f023 0303 	bic.w	r3, r3, #3
 800ed10:	3304      	adds	r3, #4
 800ed12:	f104 0015 	add.w	r0, r4, #21
 800ed16:	4560      	cmp	r0, ip
 800ed18:	bf88      	it	hi
 800ed1a:	2304      	movhi	r3, #4
 800ed1c:	50ca      	str	r2, [r1, r3]
 800ed1e:	b10a      	cbz	r2, 800ed24 <__lshift+0xa4>
 800ed20:	f108 0602 	add.w	r6, r8, #2
 800ed24:	3e01      	subs	r6, #1
 800ed26:	4638      	mov	r0, r7
 800ed28:	612e      	str	r6, [r5, #16]
 800ed2a:	4621      	mov	r1, r4
 800ed2c:	f7ff fde2 	bl	800e8f4 <_Bfree>
 800ed30:	4628      	mov	r0, r5
 800ed32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed36:	f842 0f04 	str.w	r0, [r2, #4]!
 800ed3a:	3301      	adds	r3, #1
 800ed3c:	e7c5      	b.n	800ecca <__lshift+0x4a>
 800ed3e:	3904      	subs	r1, #4
 800ed40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed44:	f841 2f04 	str.w	r2, [r1, #4]!
 800ed48:	459c      	cmp	ip, r3
 800ed4a:	d8f9      	bhi.n	800ed40 <__lshift+0xc0>
 800ed4c:	e7ea      	b.n	800ed24 <__lshift+0xa4>
 800ed4e:	bf00      	nop
 800ed50:	080a3a98 	.word	0x080a3a98
 800ed54:	080a3aa9 	.word	0x080a3aa9

0800ed58 <__mcmp>:
 800ed58:	690a      	ldr	r2, [r1, #16]
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	6900      	ldr	r0, [r0, #16]
 800ed5e:	1a80      	subs	r0, r0, r2
 800ed60:	b530      	push	{r4, r5, lr}
 800ed62:	d10e      	bne.n	800ed82 <__mcmp+0x2a>
 800ed64:	3314      	adds	r3, #20
 800ed66:	3114      	adds	r1, #20
 800ed68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ed6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ed70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ed74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ed78:	4295      	cmp	r5, r2
 800ed7a:	d003      	beq.n	800ed84 <__mcmp+0x2c>
 800ed7c:	d205      	bcs.n	800ed8a <__mcmp+0x32>
 800ed7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ed82:	bd30      	pop	{r4, r5, pc}
 800ed84:	42a3      	cmp	r3, r4
 800ed86:	d3f3      	bcc.n	800ed70 <__mcmp+0x18>
 800ed88:	e7fb      	b.n	800ed82 <__mcmp+0x2a>
 800ed8a:	2001      	movs	r0, #1
 800ed8c:	e7f9      	b.n	800ed82 <__mcmp+0x2a>
	...

0800ed90 <__mdiff>:
 800ed90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed94:	4689      	mov	r9, r1
 800ed96:	4606      	mov	r6, r0
 800ed98:	4611      	mov	r1, r2
 800ed9a:	4648      	mov	r0, r9
 800ed9c:	4614      	mov	r4, r2
 800ed9e:	f7ff ffdb 	bl	800ed58 <__mcmp>
 800eda2:	1e05      	subs	r5, r0, #0
 800eda4:	d112      	bne.n	800edcc <__mdiff+0x3c>
 800eda6:	4629      	mov	r1, r5
 800eda8:	4630      	mov	r0, r6
 800edaa:	f7ff fd63 	bl	800e874 <_Balloc>
 800edae:	4602      	mov	r2, r0
 800edb0:	b928      	cbnz	r0, 800edbe <__mdiff+0x2e>
 800edb2:	4b3f      	ldr	r3, [pc, #252]	@ (800eeb0 <__mdiff+0x120>)
 800edb4:	f240 2137 	movw	r1, #567	@ 0x237
 800edb8:	483e      	ldr	r0, [pc, #248]	@ (800eeb4 <__mdiff+0x124>)
 800edba:	f000 fcc1 	bl	800f740 <__assert_func>
 800edbe:	2301      	movs	r3, #1
 800edc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800edc4:	4610      	mov	r0, r2
 800edc6:	b003      	add	sp, #12
 800edc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edcc:	bfbc      	itt	lt
 800edce:	464b      	movlt	r3, r9
 800edd0:	46a1      	movlt	r9, r4
 800edd2:	4630      	mov	r0, r6
 800edd4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800edd8:	bfba      	itte	lt
 800edda:	461c      	movlt	r4, r3
 800eddc:	2501      	movlt	r5, #1
 800edde:	2500      	movge	r5, #0
 800ede0:	f7ff fd48 	bl	800e874 <_Balloc>
 800ede4:	4602      	mov	r2, r0
 800ede6:	b918      	cbnz	r0, 800edf0 <__mdiff+0x60>
 800ede8:	4b31      	ldr	r3, [pc, #196]	@ (800eeb0 <__mdiff+0x120>)
 800edea:	f240 2145 	movw	r1, #581	@ 0x245
 800edee:	e7e3      	b.n	800edb8 <__mdiff+0x28>
 800edf0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800edf4:	6926      	ldr	r6, [r4, #16]
 800edf6:	60c5      	str	r5, [r0, #12]
 800edf8:	f109 0310 	add.w	r3, r9, #16
 800edfc:	f109 0514 	add.w	r5, r9, #20
 800ee00:	f104 0e14 	add.w	lr, r4, #20
 800ee04:	f100 0b14 	add.w	fp, r0, #20
 800ee08:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ee0c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ee10:	9301      	str	r3, [sp, #4]
 800ee12:	46d9      	mov	r9, fp
 800ee14:	f04f 0c00 	mov.w	ip, #0
 800ee18:	9b01      	ldr	r3, [sp, #4]
 800ee1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ee1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ee22:	9301      	str	r3, [sp, #4]
 800ee24:	fa1f f38a 	uxth.w	r3, sl
 800ee28:	4619      	mov	r1, r3
 800ee2a:	b283      	uxth	r3, r0
 800ee2c:	1acb      	subs	r3, r1, r3
 800ee2e:	0c00      	lsrs	r0, r0, #16
 800ee30:	4463      	add	r3, ip
 800ee32:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ee36:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ee3a:	b29b      	uxth	r3, r3
 800ee3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ee40:	4576      	cmp	r6, lr
 800ee42:	f849 3b04 	str.w	r3, [r9], #4
 800ee46:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ee4a:	d8e5      	bhi.n	800ee18 <__mdiff+0x88>
 800ee4c:	1b33      	subs	r3, r6, r4
 800ee4e:	3b15      	subs	r3, #21
 800ee50:	f023 0303 	bic.w	r3, r3, #3
 800ee54:	3415      	adds	r4, #21
 800ee56:	3304      	adds	r3, #4
 800ee58:	42a6      	cmp	r6, r4
 800ee5a:	bf38      	it	cc
 800ee5c:	2304      	movcc	r3, #4
 800ee5e:	441d      	add	r5, r3
 800ee60:	445b      	add	r3, fp
 800ee62:	461e      	mov	r6, r3
 800ee64:	462c      	mov	r4, r5
 800ee66:	4544      	cmp	r4, r8
 800ee68:	d30e      	bcc.n	800ee88 <__mdiff+0xf8>
 800ee6a:	f108 0103 	add.w	r1, r8, #3
 800ee6e:	1b49      	subs	r1, r1, r5
 800ee70:	f021 0103 	bic.w	r1, r1, #3
 800ee74:	3d03      	subs	r5, #3
 800ee76:	45a8      	cmp	r8, r5
 800ee78:	bf38      	it	cc
 800ee7a:	2100      	movcc	r1, #0
 800ee7c:	440b      	add	r3, r1
 800ee7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee82:	b191      	cbz	r1, 800eeaa <__mdiff+0x11a>
 800ee84:	6117      	str	r7, [r2, #16]
 800ee86:	e79d      	b.n	800edc4 <__mdiff+0x34>
 800ee88:	f854 1b04 	ldr.w	r1, [r4], #4
 800ee8c:	46e6      	mov	lr, ip
 800ee8e:	0c08      	lsrs	r0, r1, #16
 800ee90:	fa1c fc81 	uxtah	ip, ip, r1
 800ee94:	4471      	add	r1, lr
 800ee96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ee9a:	b289      	uxth	r1, r1
 800ee9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800eea0:	f846 1b04 	str.w	r1, [r6], #4
 800eea4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eea8:	e7dd      	b.n	800ee66 <__mdiff+0xd6>
 800eeaa:	3f01      	subs	r7, #1
 800eeac:	e7e7      	b.n	800ee7e <__mdiff+0xee>
 800eeae:	bf00      	nop
 800eeb0:	080a3a98 	.word	0x080a3a98
 800eeb4:	080a3aa9 	.word	0x080a3aa9

0800eeb8 <__d2b>:
 800eeb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eebc:	460f      	mov	r7, r1
 800eebe:	2101      	movs	r1, #1
 800eec0:	ec59 8b10 	vmov	r8, r9, d0
 800eec4:	4616      	mov	r6, r2
 800eec6:	f7ff fcd5 	bl	800e874 <_Balloc>
 800eeca:	4604      	mov	r4, r0
 800eecc:	b930      	cbnz	r0, 800eedc <__d2b+0x24>
 800eece:	4602      	mov	r2, r0
 800eed0:	4b23      	ldr	r3, [pc, #140]	@ (800ef60 <__d2b+0xa8>)
 800eed2:	4824      	ldr	r0, [pc, #144]	@ (800ef64 <__d2b+0xac>)
 800eed4:	f240 310f 	movw	r1, #783	@ 0x30f
 800eed8:	f000 fc32 	bl	800f740 <__assert_func>
 800eedc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eee0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eee4:	b10d      	cbz	r5, 800eeea <__d2b+0x32>
 800eee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eeea:	9301      	str	r3, [sp, #4]
 800eeec:	f1b8 0300 	subs.w	r3, r8, #0
 800eef0:	d023      	beq.n	800ef3a <__d2b+0x82>
 800eef2:	4668      	mov	r0, sp
 800eef4:	9300      	str	r3, [sp, #0]
 800eef6:	f7ff fd84 	bl	800ea02 <__lo0bits>
 800eefa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eefe:	b1d0      	cbz	r0, 800ef36 <__d2b+0x7e>
 800ef00:	f1c0 0320 	rsb	r3, r0, #32
 800ef04:	fa02 f303 	lsl.w	r3, r2, r3
 800ef08:	430b      	orrs	r3, r1
 800ef0a:	40c2      	lsrs	r2, r0
 800ef0c:	6163      	str	r3, [r4, #20]
 800ef0e:	9201      	str	r2, [sp, #4]
 800ef10:	9b01      	ldr	r3, [sp, #4]
 800ef12:	61a3      	str	r3, [r4, #24]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	bf0c      	ite	eq
 800ef18:	2201      	moveq	r2, #1
 800ef1a:	2202      	movne	r2, #2
 800ef1c:	6122      	str	r2, [r4, #16]
 800ef1e:	b1a5      	cbz	r5, 800ef4a <__d2b+0x92>
 800ef20:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ef24:	4405      	add	r5, r0
 800ef26:	603d      	str	r5, [r7, #0]
 800ef28:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ef2c:	6030      	str	r0, [r6, #0]
 800ef2e:	4620      	mov	r0, r4
 800ef30:	b003      	add	sp, #12
 800ef32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef36:	6161      	str	r1, [r4, #20]
 800ef38:	e7ea      	b.n	800ef10 <__d2b+0x58>
 800ef3a:	a801      	add	r0, sp, #4
 800ef3c:	f7ff fd61 	bl	800ea02 <__lo0bits>
 800ef40:	9b01      	ldr	r3, [sp, #4]
 800ef42:	6163      	str	r3, [r4, #20]
 800ef44:	3020      	adds	r0, #32
 800ef46:	2201      	movs	r2, #1
 800ef48:	e7e8      	b.n	800ef1c <__d2b+0x64>
 800ef4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ef4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ef52:	6038      	str	r0, [r7, #0]
 800ef54:	6918      	ldr	r0, [r3, #16]
 800ef56:	f7ff fd35 	bl	800e9c4 <__hi0bits>
 800ef5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ef5e:	e7e5      	b.n	800ef2c <__d2b+0x74>
 800ef60:	080a3a98 	.word	0x080a3a98
 800ef64:	080a3aa9 	.word	0x080a3aa9

0800ef68 <_malloc_usable_size_r>:
 800ef68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef6c:	1f18      	subs	r0, r3, #4
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	bfbc      	itt	lt
 800ef72:	580b      	ldrlt	r3, [r1, r0]
 800ef74:	18c0      	addlt	r0, r0, r3
 800ef76:	4770      	bx	lr

0800ef78 <__ssputs_r>:
 800ef78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef7c:	688e      	ldr	r6, [r1, #8]
 800ef7e:	461f      	mov	r7, r3
 800ef80:	42be      	cmp	r6, r7
 800ef82:	680b      	ldr	r3, [r1, #0]
 800ef84:	4682      	mov	sl, r0
 800ef86:	460c      	mov	r4, r1
 800ef88:	4690      	mov	r8, r2
 800ef8a:	d82d      	bhi.n	800efe8 <__ssputs_r+0x70>
 800ef8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ef94:	d026      	beq.n	800efe4 <__ssputs_r+0x6c>
 800ef96:	6965      	ldr	r5, [r4, #20]
 800ef98:	6909      	ldr	r1, [r1, #16]
 800ef9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef9e:	eba3 0901 	sub.w	r9, r3, r1
 800efa2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800efa6:	1c7b      	adds	r3, r7, #1
 800efa8:	444b      	add	r3, r9
 800efaa:	106d      	asrs	r5, r5, #1
 800efac:	429d      	cmp	r5, r3
 800efae:	bf38      	it	cc
 800efb0:	461d      	movcc	r5, r3
 800efb2:	0553      	lsls	r3, r2, #21
 800efb4:	d527      	bpl.n	800f006 <__ssputs_r+0x8e>
 800efb6:	4629      	mov	r1, r5
 800efb8:	f7fd fe4e 	bl	800cc58 <_malloc_r>
 800efbc:	4606      	mov	r6, r0
 800efbe:	b360      	cbz	r0, 800f01a <__ssputs_r+0xa2>
 800efc0:	6921      	ldr	r1, [r4, #16]
 800efc2:	464a      	mov	r2, r9
 800efc4:	f7fe fda3 	bl	800db0e <memcpy>
 800efc8:	89a3      	ldrh	r3, [r4, #12]
 800efca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800efce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800efd2:	81a3      	strh	r3, [r4, #12]
 800efd4:	6126      	str	r6, [r4, #16]
 800efd6:	6165      	str	r5, [r4, #20]
 800efd8:	444e      	add	r6, r9
 800efda:	eba5 0509 	sub.w	r5, r5, r9
 800efde:	6026      	str	r6, [r4, #0]
 800efe0:	60a5      	str	r5, [r4, #8]
 800efe2:	463e      	mov	r6, r7
 800efe4:	42be      	cmp	r6, r7
 800efe6:	d900      	bls.n	800efea <__ssputs_r+0x72>
 800efe8:	463e      	mov	r6, r7
 800efea:	6820      	ldr	r0, [r4, #0]
 800efec:	4632      	mov	r2, r6
 800efee:	4641      	mov	r1, r8
 800eff0:	f000 fb6a 	bl	800f6c8 <memmove>
 800eff4:	68a3      	ldr	r3, [r4, #8]
 800eff6:	1b9b      	subs	r3, r3, r6
 800eff8:	60a3      	str	r3, [r4, #8]
 800effa:	6823      	ldr	r3, [r4, #0]
 800effc:	4433      	add	r3, r6
 800effe:	6023      	str	r3, [r4, #0]
 800f000:	2000      	movs	r0, #0
 800f002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f006:	462a      	mov	r2, r5
 800f008:	f7fd feb2 	bl	800cd70 <_realloc_r>
 800f00c:	4606      	mov	r6, r0
 800f00e:	2800      	cmp	r0, #0
 800f010:	d1e0      	bne.n	800efd4 <__ssputs_r+0x5c>
 800f012:	6921      	ldr	r1, [r4, #16]
 800f014:	4650      	mov	r0, sl
 800f016:	f7ff fbe3 	bl	800e7e0 <_free_r>
 800f01a:	230c      	movs	r3, #12
 800f01c:	f8ca 3000 	str.w	r3, [sl]
 800f020:	89a3      	ldrh	r3, [r4, #12]
 800f022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f026:	81a3      	strh	r3, [r4, #12]
 800f028:	f04f 30ff 	mov.w	r0, #4294967295
 800f02c:	e7e9      	b.n	800f002 <__ssputs_r+0x8a>
	...

0800f030 <_svfiprintf_r>:
 800f030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f034:	4698      	mov	r8, r3
 800f036:	898b      	ldrh	r3, [r1, #12]
 800f038:	061b      	lsls	r3, r3, #24
 800f03a:	b09d      	sub	sp, #116	@ 0x74
 800f03c:	4607      	mov	r7, r0
 800f03e:	460d      	mov	r5, r1
 800f040:	4614      	mov	r4, r2
 800f042:	d510      	bpl.n	800f066 <_svfiprintf_r+0x36>
 800f044:	690b      	ldr	r3, [r1, #16]
 800f046:	b973      	cbnz	r3, 800f066 <_svfiprintf_r+0x36>
 800f048:	2140      	movs	r1, #64	@ 0x40
 800f04a:	f7fd fe05 	bl	800cc58 <_malloc_r>
 800f04e:	6028      	str	r0, [r5, #0]
 800f050:	6128      	str	r0, [r5, #16]
 800f052:	b930      	cbnz	r0, 800f062 <_svfiprintf_r+0x32>
 800f054:	230c      	movs	r3, #12
 800f056:	603b      	str	r3, [r7, #0]
 800f058:	f04f 30ff 	mov.w	r0, #4294967295
 800f05c:	b01d      	add	sp, #116	@ 0x74
 800f05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f062:	2340      	movs	r3, #64	@ 0x40
 800f064:	616b      	str	r3, [r5, #20]
 800f066:	2300      	movs	r3, #0
 800f068:	9309      	str	r3, [sp, #36]	@ 0x24
 800f06a:	2320      	movs	r3, #32
 800f06c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f070:	f8cd 800c 	str.w	r8, [sp, #12]
 800f074:	2330      	movs	r3, #48	@ 0x30
 800f076:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f214 <_svfiprintf_r+0x1e4>
 800f07a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f07e:	f04f 0901 	mov.w	r9, #1
 800f082:	4623      	mov	r3, r4
 800f084:	469a      	mov	sl, r3
 800f086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f08a:	b10a      	cbz	r2, 800f090 <_svfiprintf_r+0x60>
 800f08c:	2a25      	cmp	r2, #37	@ 0x25
 800f08e:	d1f9      	bne.n	800f084 <_svfiprintf_r+0x54>
 800f090:	ebba 0b04 	subs.w	fp, sl, r4
 800f094:	d00b      	beq.n	800f0ae <_svfiprintf_r+0x7e>
 800f096:	465b      	mov	r3, fp
 800f098:	4622      	mov	r2, r4
 800f09a:	4629      	mov	r1, r5
 800f09c:	4638      	mov	r0, r7
 800f09e:	f7ff ff6b 	bl	800ef78 <__ssputs_r>
 800f0a2:	3001      	adds	r0, #1
 800f0a4:	f000 80a7 	beq.w	800f1f6 <_svfiprintf_r+0x1c6>
 800f0a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f0aa:	445a      	add	r2, fp
 800f0ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800f0ae:	f89a 3000 	ldrb.w	r3, [sl]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	f000 809f 	beq.w	800f1f6 <_svfiprintf_r+0x1c6>
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	f04f 32ff 	mov.w	r2, #4294967295
 800f0be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0c2:	f10a 0a01 	add.w	sl, sl, #1
 800f0c6:	9304      	str	r3, [sp, #16]
 800f0c8:	9307      	str	r3, [sp, #28]
 800f0ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f0ce:	931a      	str	r3, [sp, #104]	@ 0x68
 800f0d0:	4654      	mov	r4, sl
 800f0d2:	2205      	movs	r2, #5
 800f0d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0d8:	484e      	ldr	r0, [pc, #312]	@ (800f214 <_svfiprintf_r+0x1e4>)
 800f0da:	f7f1 f891 	bl	8000200 <memchr>
 800f0de:	9a04      	ldr	r2, [sp, #16]
 800f0e0:	b9d8      	cbnz	r0, 800f11a <_svfiprintf_r+0xea>
 800f0e2:	06d0      	lsls	r0, r2, #27
 800f0e4:	bf44      	itt	mi
 800f0e6:	2320      	movmi	r3, #32
 800f0e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0ec:	0711      	lsls	r1, r2, #28
 800f0ee:	bf44      	itt	mi
 800f0f0:	232b      	movmi	r3, #43	@ 0x2b
 800f0f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0f6:	f89a 3000 	ldrb.w	r3, [sl]
 800f0fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0fc:	d015      	beq.n	800f12a <_svfiprintf_r+0xfa>
 800f0fe:	9a07      	ldr	r2, [sp, #28]
 800f100:	4654      	mov	r4, sl
 800f102:	2000      	movs	r0, #0
 800f104:	f04f 0c0a 	mov.w	ip, #10
 800f108:	4621      	mov	r1, r4
 800f10a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f10e:	3b30      	subs	r3, #48	@ 0x30
 800f110:	2b09      	cmp	r3, #9
 800f112:	d94b      	bls.n	800f1ac <_svfiprintf_r+0x17c>
 800f114:	b1b0      	cbz	r0, 800f144 <_svfiprintf_r+0x114>
 800f116:	9207      	str	r2, [sp, #28]
 800f118:	e014      	b.n	800f144 <_svfiprintf_r+0x114>
 800f11a:	eba0 0308 	sub.w	r3, r0, r8
 800f11e:	fa09 f303 	lsl.w	r3, r9, r3
 800f122:	4313      	orrs	r3, r2
 800f124:	9304      	str	r3, [sp, #16]
 800f126:	46a2      	mov	sl, r4
 800f128:	e7d2      	b.n	800f0d0 <_svfiprintf_r+0xa0>
 800f12a:	9b03      	ldr	r3, [sp, #12]
 800f12c:	1d19      	adds	r1, r3, #4
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	9103      	str	r1, [sp, #12]
 800f132:	2b00      	cmp	r3, #0
 800f134:	bfbb      	ittet	lt
 800f136:	425b      	neglt	r3, r3
 800f138:	f042 0202 	orrlt.w	r2, r2, #2
 800f13c:	9307      	strge	r3, [sp, #28]
 800f13e:	9307      	strlt	r3, [sp, #28]
 800f140:	bfb8      	it	lt
 800f142:	9204      	strlt	r2, [sp, #16]
 800f144:	7823      	ldrb	r3, [r4, #0]
 800f146:	2b2e      	cmp	r3, #46	@ 0x2e
 800f148:	d10a      	bne.n	800f160 <_svfiprintf_r+0x130>
 800f14a:	7863      	ldrb	r3, [r4, #1]
 800f14c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f14e:	d132      	bne.n	800f1b6 <_svfiprintf_r+0x186>
 800f150:	9b03      	ldr	r3, [sp, #12]
 800f152:	1d1a      	adds	r2, r3, #4
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	9203      	str	r2, [sp, #12]
 800f158:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f15c:	3402      	adds	r4, #2
 800f15e:	9305      	str	r3, [sp, #20]
 800f160:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f224 <_svfiprintf_r+0x1f4>
 800f164:	7821      	ldrb	r1, [r4, #0]
 800f166:	2203      	movs	r2, #3
 800f168:	4650      	mov	r0, sl
 800f16a:	f7f1 f849 	bl	8000200 <memchr>
 800f16e:	b138      	cbz	r0, 800f180 <_svfiprintf_r+0x150>
 800f170:	9b04      	ldr	r3, [sp, #16]
 800f172:	eba0 000a 	sub.w	r0, r0, sl
 800f176:	2240      	movs	r2, #64	@ 0x40
 800f178:	4082      	lsls	r2, r0
 800f17a:	4313      	orrs	r3, r2
 800f17c:	3401      	adds	r4, #1
 800f17e:	9304      	str	r3, [sp, #16]
 800f180:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f184:	4824      	ldr	r0, [pc, #144]	@ (800f218 <_svfiprintf_r+0x1e8>)
 800f186:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f18a:	2206      	movs	r2, #6
 800f18c:	f7f1 f838 	bl	8000200 <memchr>
 800f190:	2800      	cmp	r0, #0
 800f192:	d036      	beq.n	800f202 <_svfiprintf_r+0x1d2>
 800f194:	4b21      	ldr	r3, [pc, #132]	@ (800f21c <_svfiprintf_r+0x1ec>)
 800f196:	bb1b      	cbnz	r3, 800f1e0 <_svfiprintf_r+0x1b0>
 800f198:	9b03      	ldr	r3, [sp, #12]
 800f19a:	3307      	adds	r3, #7
 800f19c:	f023 0307 	bic.w	r3, r3, #7
 800f1a0:	3308      	adds	r3, #8
 800f1a2:	9303      	str	r3, [sp, #12]
 800f1a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1a6:	4433      	add	r3, r6
 800f1a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1aa:	e76a      	b.n	800f082 <_svfiprintf_r+0x52>
 800f1ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1b0:	460c      	mov	r4, r1
 800f1b2:	2001      	movs	r0, #1
 800f1b4:	e7a8      	b.n	800f108 <_svfiprintf_r+0xd8>
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	3401      	adds	r4, #1
 800f1ba:	9305      	str	r3, [sp, #20]
 800f1bc:	4619      	mov	r1, r3
 800f1be:	f04f 0c0a 	mov.w	ip, #10
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1c8:	3a30      	subs	r2, #48	@ 0x30
 800f1ca:	2a09      	cmp	r2, #9
 800f1cc:	d903      	bls.n	800f1d6 <_svfiprintf_r+0x1a6>
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d0c6      	beq.n	800f160 <_svfiprintf_r+0x130>
 800f1d2:	9105      	str	r1, [sp, #20]
 800f1d4:	e7c4      	b.n	800f160 <_svfiprintf_r+0x130>
 800f1d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1da:	4604      	mov	r4, r0
 800f1dc:	2301      	movs	r3, #1
 800f1de:	e7f0      	b.n	800f1c2 <_svfiprintf_r+0x192>
 800f1e0:	ab03      	add	r3, sp, #12
 800f1e2:	9300      	str	r3, [sp, #0]
 800f1e4:	462a      	mov	r2, r5
 800f1e6:	4b0e      	ldr	r3, [pc, #56]	@ (800f220 <_svfiprintf_r+0x1f0>)
 800f1e8:	a904      	add	r1, sp, #16
 800f1ea:	4638      	mov	r0, r7
 800f1ec:	f7fd fe8e 	bl	800cf0c <_printf_float>
 800f1f0:	1c42      	adds	r2, r0, #1
 800f1f2:	4606      	mov	r6, r0
 800f1f4:	d1d6      	bne.n	800f1a4 <_svfiprintf_r+0x174>
 800f1f6:	89ab      	ldrh	r3, [r5, #12]
 800f1f8:	065b      	lsls	r3, r3, #25
 800f1fa:	f53f af2d 	bmi.w	800f058 <_svfiprintf_r+0x28>
 800f1fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f200:	e72c      	b.n	800f05c <_svfiprintf_r+0x2c>
 800f202:	ab03      	add	r3, sp, #12
 800f204:	9300      	str	r3, [sp, #0]
 800f206:	462a      	mov	r2, r5
 800f208:	4b05      	ldr	r3, [pc, #20]	@ (800f220 <_svfiprintf_r+0x1f0>)
 800f20a:	a904      	add	r1, sp, #16
 800f20c:	4638      	mov	r0, r7
 800f20e:	f7fe f915 	bl	800d43c <_printf_i>
 800f212:	e7ed      	b.n	800f1f0 <_svfiprintf_r+0x1c0>
 800f214:	080a3b02 	.word	0x080a3b02
 800f218:	080a3b0c 	.word	0x080a3b0c
 800f21c:	0800cf0d 	.word	0x0800cf0d
 800f220:	0800ef79 	.word	0x0800ef79
 800f224:	080a3b08 	.word	0x080a3b08

0800f228 <__sfputc_r>:
 800f228:	6893      	ldr	r3, [r2, #8]
 800f22a:	3b01      	subs	r3, #1
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	b410      	push	{r4}
 800f230:	6093      	str	r3, [r2, #8]
 800f232:	da08      	bge.n	800f246 <__sfputc_r+0x1e>
 800f234:	6994      	ldr	r4, [r2, #24]
 800f236:	42a3      	cmp	r3, r4
 800f238:	db01      	blt.n	800f23e <__sfputc_r+0x16>
 800f23a:	290a      	cmp	r1, #10
 800f23c:	d103      	bne.n	800f246 <__sfputc_r+0x1e>
 800f23e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f242:	f7fe bb40 	b.w	800d8c6 <__swbuf_r>
 800f246:	6813      	ldr	r3, [r2, #0]
 800f248:	1c58      	adds	r0, r3, #1
 800f24a:	6010      	str	r0, [r2, #0]
 800f24c:	7019      	strb	r1, [r3, #0]
 800f24e:	4608      	mov	r0, r1
 800f250:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f254:	4770      	bx	lr

0800f256 <__sfputs_r>:
 800f256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f258:	4606      	mov	r6, r0
 800f25a:	460f      	mov	r7, r1
 800f25c:	4614      	mov	r4, r2
 800f25e:	18d5      	adds	r5, r2, r3
 800f260:	42ac      	cmp	r4, r5
 800f262:	d101      	bne.n	800f268 <__sfputs_r+0x12>
 800f264:	2000      	movs	r0, #0
 800f266:	e007      	b.n	800f278 <__sfputs_r+0x22>
 800f268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f26c:	463a      	mov	r2, r7
 800f26e:	4630      	mov	r0, r6
 800f270:	f7ff ffda 	bl	800f228 <__sfputc_r>
 800f274:	1c43      	adds	r3, r0, #1
 800f276:	d1f3      	bne.n	800f260 <__sfputs_r+0xa>
 800f278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f27c <_vfiprintf_r>:
 800f27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f280:	460d      	mov	r5, r1
 800f282:	b09d      	sub	sp, #116	@ 0x74
 800f284:	4614      	mov	r4, r2
 800f286:	4698      	mov	r8, r3
 800f288:	4606      	mov	r6, r0
 800f28a:	b118      	cbz	r0, 800f294 <_vfiprintf_r+0x18>
 800f28c:	6a03      	ldr	r3, [r0, #32]
 800f28e:	b90b      	cbnz	r3, 800f294 <_vfiprintf_r+0x18>
 800f290:	f7fe fa7e 	bl	800d790 <__sinit>
 800f294:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f296:	07d9      	lsls	r1, r3, #31
 800f298:	d405      	bmi.n	800f2a6 <_vfiprintf_r+0x2a>
 800f29a:	89ab      	ldrh	r3, [r5, #12]
 800f29c:	059a      	lsls	r2, r3, #22
 800f29e:	d402      	bmi.n	800f2a6 <_vfiprintf_r+0x2a>
 800f2a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f2a2:	f7fe fc32 	bl	800db0a <__retarget_lock_acquire_recursive>
 800f2a6:	89ab      	ldrh	r3, [r5, #12]
 800f2a8:	071b      	lsls	r3, r3, #28
 800f2aa:	d501      	bpl.n	800f2b0 <_vfiprintf_r+0x34>
 800f2ac:	692b      	ldr	r3, [r5, #16]
 800f2ae:	b99b      	cbnz	r3, 800f2d8 <_vfiprintf_r+0x5c>
 800f2b0:	4629      	mov	r1, r5
 800f2b2:	4630      	mov	r0, r6
 800f2b4:	f7fe fb46 	bl	800d944 <__swsetup_r>
 800f2b8:	b170      	cbz	r0, 800f2d8 <_vfiprintf_r+0x5c>
 800f2ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f2bc:	07dc      	lsls	r4, r3, #31
 800f2be:	d504      	bpl.n	800f2ca <_vfiprintf_r+0x4e>
 800f2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f2c4:	b01d      	add	sp, #116	@ 0x74
 800f2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ca:	89ab      	ldrh	r3, [r5, #12]
 800f2cc:	0598      	lsls	r0, r3, #22
 800f2ce:	d4f7      	bmi.n	800f2c0 <_vfiprintf_r+0x44>
 800f2d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f2d2:	f7fe fc1b 	bl	800db0c <__retarget_lock_release_recursive>
 800f2d6:	e7f3      	b.n	800f2c0 <_vfiprintf_r+0x44>
 800f2d8:	2300      	movs	r3, #0
 800f2da:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2dc:	2320      	movs	r3, #32
 800f2de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f2e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2e6:	2330      	movs	r3, #48	@ 0x30
 800f2e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f498 <_vfiprintf_r+0x21c>
 800f2ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f2f0:	f04f 0901 	mov.w	r9, #1
 800f2f4:	4623      	mov	r3, r4
 800f2f6:	469a      	mov	sl, r3
 800f2f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2fc:	b10a      	cbz	r2, 800f302 <_vfiprintf_r+0x86>
 800f2fe:	2a25      	cmp	r2, #37	@ 0x25
 800f300:	d1f9      	bne.n	800f2f6 <_vfiprintf_r+0x7a>
 800f302:	ebba 0b04 	subs.w	fp, sl, r4
 800f306:	d00b      	beq.n	800f320 <_vfiprintf_r+0xa4>
 800f308:	465b      	mov	r3, fp
 800f30a:	4622      	mov	r2, r4
 800f30c:	4629      	mov	r1, r5
 800f30e:	4630      	mov	r0, r6
 800f310:	f7ff ffa1 	bl	800f256 <__sfputs_r>
 800f314:	3001      	adds	r0, #1
 800f316:	f000 80a7 	beq.w	800f468 <_vfiprintf_r+0x1ec>
 800f31a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f31c:	445a      	add	r2, fp
 800f31e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f320:	f89a 3000 	ldrb.w	r3, [sl]
 800f324:	2b00      	cmp	r3, #0
 800f326:	f000 809f 	beq.w	800f468 <_vfiprintf_r+0x1ec>
 800f32a:	2300      	movs	r3, #0
 800f32c:	f04f 32ff 	mov.w	r2, #4294967295
 800f330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f334:	f10a 0a01 	add.w	sl, sl, #1
 800f338:	9304      	str	r3, [sp, #16]
 800f33a:	9307      	str	r3, [sp, #28]
 800f33c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f340:	931a      	str	r3, [sp, #104]	@ 0x68
 800f342:	4654      	mov	r4, sl
 800f344:	2205      	movs	r2, #5
 800f346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f34a:	4853      	ldr	r0, [pc, #332]	@ (800f498 <_vfiprintf_r+0x21c>)
 800f34c:	f7f0 ff58 	bl	8000200 <memchr>
 800f350:	9a04      	ldr	r2, [sp, #16]
 800f352:	b9d8      	cbnz	r0, 800f38c <_vfiprintf_r+0x110>
 800f354:	06d1      	lsls	r1, r2, #27
 800f356:	bf44      	itt	mi
 800f358:	2320      	movmi	r3, #32
 800f35a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f35e:	0713      	lsls	r3, r2, #28
 800f360:	bf44      	itt	mi
 800f362:	232b      	movmi	r3, #43	@ 0x2b
 800f364:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f368:	f89a 3000 	ldrb.w	r3, [sl]
 800f36c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f36e:	d015      	beq.n	800f39c <_vfiprintf_r+0x120>
 800f370:	9a07      	ldr	r2, [sp, #28]
 800f372:	4654      	mov	r4, sl
 800f374:	2000      	movs	r0, #0
 800f376:	f04f 0c0a 	mov.w	ip, #10
 800f37a:	4621      	mov	r1, r4
 800f37c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f380:	3b30      	subs	r3, #48	@ 0x30
 800f382:	2b09      	cmp	r3, #9
 800f384:	d94b      	bls.n	800f41e <_vfiprintf_r+0x1a2>
 800f386:	b1b0      	cbz	r0, 800f3b6 <_vfiprintf_r+0x13a>
 800f388:	9207      	str	r2, [sp, #28]
 800f38a:	e014      	b.n	800f3b6 <_vfiprintf_r+0x13a>
 800f38c:	eba0 0308 	sub.w	r3, r0, r8
 800f390:	fa09 f303 	lsl.w	r3, r9, r3
 800f394:	4313      	orrs	r3, r2
 800f396:	9304      	str	r3, [sp, #16]
 800f398:	46a2      	mov	sl, r4
 800f39a:	e7d2      	b.n	800f342 <_vfiprintf_r+0xc6>
 800f39c:	9b03      	ldr	r3, [sp, #12]
 800f39e:	1d19      	adds	r1, r3, #4
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	9103      	str	r1, [sp, #12]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	bfbb      	ittet	lt
 800f3a8:	425b      	neglt	r3, r3
 800f3aa:	f042 0202 	orrlt.w	r2, r2, #2
 800f3ae:	9307      	strge	r3, [sp, #28]
 800f3b0:	9307      	strlt	r3, [sp, #28]
 800f3b2:	bfb8      	it	lt
 800f3b4:	9204      	strlt	r2, [sp, #16]
 800f3b6:	7823      	ldrb	r3, [r4, #0]
 800f3b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f3ba:	d10a      	bne.n	800f3d2 <_vfiprintf_r+0x156>
 800f3bc:	7863      	ldrb	r3, [r4, #1]
 800f3be:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3c0:	d132      	bne.n	800f428 <_vfiprintf_r+0x1ac>
 800f3c2:	9b03      	ldr	r3, [sp, #12]
 800f3c4:	1d1a      	adds	r2, r3, #4
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	9203      	str	r2, [sp, #12]
 800f3ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f3ce:	3402      	adds	r4, #2
 800f3d0:	9305      	str	r3, [sp, #20]
 800f3d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f4a8 <_vfiprintf_r+0x22c>
 800f3d6:	7821      	ldrb	r1, [r4, #0]
 800f3d8:	2203      	movs	r2, #3
 800f3da:	4650      	mov	r0, sl
 800f3dc:	f7f0 ff10 	bl	8000200 <memchr>
 800f3e0:	b138      	cbz	r0, 800f3f2 <_vfiprintf_r+0x176>
 800f3e2:	9b04      	ldr	r3, [sp, #16]
 800f3e4:	eba0 000a 	sub.w	r0, r0, sl
 800f3e8:	2240      	movs	r2, #64	@ 0x40
 800f3ea:	4082      	lsls	r2, r0
 800f3ec:	4313      	orrs	r3, r2
 800f3ee:	3401      	adds	r4, #1
 800f3f0:	9304      	str	r3, [sp, #16]
 800f3f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3f6:	4829      	ldr	r0, [pc, #164]	@ (800f49c <_vfiprintf_r+0x220>)
 800f3f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f3fc:	2206      	movs	r2, #6
 800f3fe:	f7f0 feff 	bl	8000200 <memchr>
 800f402:	2800      	cmp	r0, #0
 800f404:	d03f      	beq.n	800f486 <_vfiprintf_r+0x20a>
 800f406:	4b26      	ldr	r3, [pc, #152]	@ (800f4a0 <_vfiprintf_r+0x224>)
 800f408:	bb1b      	cbnz	r3, 800f452 <_vfiprintf_r+0x1d6>
 800f40a:	9b03      	ldr	r3, [sp, #12]
 800f40c:	3307      	adds	r3, #7
 800f40e:	f023 0307 	bic.w	r3, r3, #7
 800f412:	3308      	adds	r3, #8
 800f414:	9303      	str	r3, [sp, #12]
 800f416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f418:	443b      	add	r3, r7
 800f41a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f41c:	e76a      	b.n	800f2f4 <_vfiprintf_r+0x78>
 800f41e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f422:	460c      	mov	r4, r1
 800f424:	2001      	movs	r0, #1
 800f426:	e7a8      	b.n	800f37a <_vfiprintf_r+0xfe>
 800f428:	2300      	movs	r3, #0
 800f42a:	3401      	adds	r4, #1
 800f42c:	9305      	str	r3, [sp, #20]
 800f42e:	4619      	mov	r1, r3
 800f430:	f04f 0c0a 	mov.w	ip, #10
 800f434:	4620      	mov	r0, r4
 800f436:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f43a:	3a30      	subs	r2, #48	@ 0x30
 800f43c:	2a09      	cmp	r2, #9
 800f43e:	d903      	bls.n	800f448 <_vfiprintf_r+0x1cc>
 800f440:	2b00      	cmp	r3, #0
 800f442:	d0c6      	beq.n	800f3d2 <_vfiprintf_r+0x156>
 800f444:	9105      	str	r1, [sp, #20]
 800f446:	e7c4      	b.n	800f3d2 <_vfiprintf_r+0x156>
 800f448:	fb0c 2101 	mla	r1, ip, r1, r2
 800f44c:	4604      	mov	r4, r0
 800f44e:	2301      	movs	r3, #1
 800f450:	e7f0      	b.n	800f434 <_vfiprintf_r+0x1b8>
 800f452:	ab03      	add	r3, sp, #12
 800f454:	9300      	str	r3, [sp, #0]
 800f456:	462a      	mov	r2, r5
 800f458:	4b12      	ldr	r3, [pc, #72]	@ (800f4a4 <_vfiprintf_r+0x228>)
 800f45a:	a904      	add	r1, sp, #16
 800f45c:	4630      	mov	r0, r6
 800f45e:	f7fd fd55 	bl	800cf0c <_printf_float>
 800f462:	4607      	mov	r7, r0
 800f464:	1c78      	adds	r0, r7, #1
 800f466:	d1d6      	bne.n	800f416 <_vfiprintf_r+0x19a>
 800f468:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f46a:	07d9      	lsls	r1, r3, #31
 800f46c:	d405      	bmi.n	800f47a <_vfiprintf_r+0x1fe>
 800f46e:	89ab      	ldrh	r3, [r5, #12]
 800f470:	059a      	lsls	r2, r3, #22
 800f472:	d402      	bmi.n	800f47a <_vfiprintf_r+0x1fe>
 800f474:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f476:	f7fe fb49 	bl	800db0c <__retarget_lock_release_recursive>
 800f47a:	89ab      	ldrh	r3, [r5, #12]
 800f47c:	065b      	lsls	r3, r3, #25
 800f47e:	f53f af1f 	bmi.w	800f2c0 <_vfiprintf_r+0x44>
 800f482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f484:	e71e      	b.n	800f2c4 <_vfiprintf_r+0x48>
 800f486:	ab03      	add	r3, sp, #12
 800f488:	9300      	str	r3, [sp, #0]
 800f48a:	462a      	mov	r2, r5
 800f48c:	4b05      	ldr	r3, [pc, #20]	@ (800f4a4 <_vfiprintf_r+0x228>)
 800f48e:	a904      	add	r1, sp, #16
 800f490:	4630      	mov	r0, r6
 800f492:	f7fd ffd3 	bl	800d43c <_printf_i>
 800f496:	e7e4      	b.n	800f462 <_vfiprintf_r+0x1e6>
 800f498:	080a3b02 	.word	0x080a3b02
 800f49c:	080a3b0c 	.word	0x080a3b0c
 800f4a0:	0800cf0d 	.word	0x0800cf0d
 800f4a4:	0800f257 	.word	0x0800f257
 800f4a8:	080a3b08 	.word	0x080a3b08

0800f4ac <__sflush_r>:
 800f4ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4b4:	0716      	lsls	r6, r2, #28
 800f4b6:	4605      	mov	r5, r0
 800f4b8:	460c      	mov	r4, r1
 800f4ba:	d454      	bmi.n	800f566 <__sflush_r+0xba>
 800f4bc:	684b      	ldr	r3, [r1, #4]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	dc02      	bgt.n	800f4c8 <__sflush_r+0x1c>
 800f4c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	dd48      	ble.n	800f55a <__sflush_r+0xae>
 800f4c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f4ca:	2e00      	cmp	r6, #0
 800f4cc:	d045      	beq.n	800f55a <__sflush_r+0xae>
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f4d4:	682f      	ldr	r7, [r5, #0]
 800f4d6:	6a21      	ldr	r1, [r4, #32]
 800f4d8:	602b      	str	r3, [r5, #0]
 800f4da:	d030      	beq.n	800f53e <__sflush_r+0x92>
 800f4dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f4de:	89a3      	ldrh	r3, [r4, #12]
 800f4e0:	0759      	lsls	r1, r3, #29
 800f4e2:	d505      	bpl.n	800f4f0 <__sflush_r+0x44>
 800f4e4:	6863      	ldr	r3, [r4, #4]
 800f4e6:	1ad2      	subs	r2, r2, r3
 800f4e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f4ea:	b10b      	cbz	r3, 800f4f0 <__sflush_r+0x44>
 800f4ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f4ee:	1ad2      	subs	r2, r2, r3
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f4f4:	6a21      	ldr	r1, [r4, #32]
 800f4f6:	4628      	mov	r0, r5
 800f4f8:	47b0      	blx	r6
 800f4fa:	1c43      	adds	r3, r0, #1
 800f4fc:	89a3      	ldrh	r3, [r4, #12]
 800f4fe:	d106      	bne.n	800f50e <__sflush_r+0x62>
 800f500:	6829      	ldr	r1, [r5, #0]
 800f502:	291d      	cmp	r1, #29
 800f504:	d82b      	bhi.n	800f55e <__sflush_r+0xb2>
 800f506:	4a2a      	ldr	r2, [pc, #168]	@ (800f5b0 <__sflush_r+0x104>)
 800f508:	40ca      	lsrs	r2, r1
 800f50a:	07d6      	lsls	r6, r2, #31
 800f50c:	d527      	bpl.n	800f55e <__sflush_r+0xb2>
 800f50e:	2200      	movs	r2, #0
 800f510:	6062      	str	r2, [r4, #4]
 800f512:	04d9      	lsls	r1, r3, #19
 800f514:	6922      	ldr	r2, [r4, #16]
 800f516:	6022      	str	r2, [r4, #0]
 800f518:	d504      	bpl.n	800f524 <__sflush_r+0x78>
 800f51a:	1c42      	adds	r2, r0, #1
 800f51c:	d101      	bne.n	800f522 <__sflush_r+0x76>
 800f51e:	682b      	ldr	r3, [r5, #0]
 800f520:	b903      	cbnz	r3, 800f524 <__sflush_r+0x78>
 800f522:	6560      	str	r0, [r4, #84]	@ 0x54
 800f524:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f526:	602f      	str	r7, [r5, #0]
 800f528:	b1b9      	cbz	r1, 800f55a <__sflush_r+0xae>
 800f52a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f52e:	4299      	cmp	r1, r3
 800f530:	d002      	beq.n	800f538 <__sflush_r+0x8c>
 800f532:	4628      	mov	r0, r5
 800f534:	f7ff f954 	bl	800e7e0 <_free_r>
 800f538:	2300      	movs	r3, #0
 800f53a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f53c:	e00d      	b.n	800f55a <__sflush_r+0xae>
 800f53e:	2301      	movs	r3, #1
 800f540:	4628      	mov	r0, r5
 800f542:	47b0      	blx	r6
 800f544:	4602      	mov	r2, r0
 800f546:	1c50      	adds	r0, r2, #1
 800f548:	d1c9      	bne.n	800f4de <__sflush_r+0x32>
 800f54a:	682b      	ldr	r3, [r5, #0]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d0c6      	beq.n	800f4de <__sflush_r+0x32>
 800f550:	2b1d      	cmp	r3, #29
 800f552:	d001      	beq.n	800f558 <__sflush_r+0xac>
 800f554:	2b16      	cmp	r3, #22
 800f556:	d11e      	bne.n	800f596 <__sflush_r+0xea>
 800f558:	602f      	str	r7, [r5, #0]
 800f55a:	2000      	movs	r0, #0
 800f55c:	e022      	b.n	800f5a4 <__sflush_r+0xf8>
 800f55e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f562:	b21b      	sxth	r3, r3
 800f564:	e01b      	b.n	800f59e <__sflush_r+0xf2>
 800f566:	690f      	ldr	r7, [r1, #16]
 800f568:	2f00      	cmp	r7, #0
 800f56a:	d0f6      	beq.n	800f55a <__sflush_r+0xae>
 800f56c:	0793      	lsls	r3, r2, #30
 800f56e:	680e      	ldr	r6, [r1, #0]
 800f570:	bf08      	it	eq
 800f572:	694b      	ldreq	r3, [r1, #20]
 800f574:	600f      	str	r7, [r1, #0]
 800f576:	bf18      	it	ne
 800f578:	2300      	movne	r3, #0
 800f57a:	eba6 0807 	sub.w	r8, r6, r7
 800f57e:	608b      	str	r3, [r1, #8]
 800f580:	f1b8 0f00 	cmp.w	r8, #0
 800f584:	dde9      	ble.n	800f55a <__sflush_r+0xae>
 800f586:	6a21      	ldr	r1, [r4, #32]
 800f588:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f58a:	4643      	mov	r3, r8
 800f58c:	463a      	mov	r2, r7
 800f58e:	4628      	mov	r0, r5
 800f590:	47b0      	blx	r6
 800f592:	2800      	cmp	r0, #0
 800f594:	dc08      	bgt.n	800f5a8 <__sflush_r+0xfc>
 800f596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f59a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f59e:	81a3      	strh	r3, [r4, #12]
 800f5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5a8:	4407      	add	r7, r0
 800f5aa:	eba8 0800 	sub.w	r8, r8, r0
 800f5ae:	e7e7      	b.n	800f580 <__sflush_r+0xd4>
 800f5b0:	20400001 	.word	0x20400001

0800f5b4 <_fflush_r>:
 800f5b4:	b538      	push	{r3, r4, r5, lr}
 800f5b6:	690b      	ldr	r3, [r1, #16]
 800f5b8:	4605      	mov	r5, r0
 800f5ba:	460c      	mov	r4, r1
 800f5bc:	b913      	cbnz	r3, 800f5c4 <_fflush_r+0x10>
 800f5be:	2500      	movs	r5, #0
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	bd38      	pop	{r3, r4, r5, pc}
 800f5c4:	b118      	cbz	r0, 800f5ce <_fflush_r+0x1a>
 800f5c6:	6a03      	ldr	r3, [r0, #32]
 800f5c8:	b90b      	cbnz	r3, 800f5ce <_fflush_r+0x1a>
 800f5ca:	f7fe f8e1 	bl	800d790 <__sinit>
 800f5ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d0f3      	beq.n	800f5be <_fflush_r+0xa>
 800f5d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f5d8:	07d0      	lsls	r0, r2, #31
 800f5da:	d404      	bmi.n	800f5e6 <_fflush_r+0x32>
 800f5dc:	0599      	lsls	r1, r3, #22
 800f5de:	d402      	bmi.n	800f5e6 <_fflush_r+0x32>
 800f5e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5e2:	f7fe fa92 	bl	800db0a <__retarget_lock_acquire_recursive>
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	4621      	mov	r1, r4
 800f5ea:	f7ff ff5f 	bl	800f4ac <__sflush_r>
 800f5ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f5f0:	07da      	lsls	r2, r3, #31
 800f5f2:	4605      	mov	r5, r0
 800f5f4:	d4e4      	bmi.n	800f5c0 <_fflush_r+0xc>
 800f5f6:	89a3      	ldrh	r3, [r4, #12]
 800f5f8:	059b      	lsls	r3, r3, #22
 800f5fa:	d4e1      	bmi.n	800f5c0 <_fflush_r+0xc>
 800f5fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5fe:	f7fe fa85 	bl	800db0c <__retarget_lock_release_recursive>
 800f602:	e7dd      	b.n	800f5c0 <_fflush_r+0xc>

0800f604 <__swhatbuf_r>:
 800f604:	b570      	push	{r4, r5, r6, lr}
 800f606:	460c      	mov	r4, r1
 800f608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f60c:	2900      	cmp	r1, #0
 800f60e:	b096      	sub	sp, #88	@ 0x58
 800f610:	4615      	mov	r5, r2
 800f612:	461e      	mov	r6, r3
 800f614:	da0d      	bge.n	800f632 <__swhatbuf_r+0x2e>
 800f616:	89a3      	ldrh	r3, [r4, #12]
 800f618:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f61c:	f04f 0100 	mov.w	r1, #0
 800f620:	bf14      	ite	ne
 800f622:	2340      	movne	r3, #64	@ 0x40
 800f624:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f628:	2000      	movs	r0, #0
 800f62a:	6031      	str	r1, [r6, #0]
 800f62c:	602b      	str	r3, [r5, #0]
 800f62e:	b016      	add	sp, #88	@ 0x58
 800f630:	bd70      	pop	{r4, r5, r6, pc}
 800f632:	466a      	mov	r2, sp
 800f634:	f000 f862 	bl	800f6fc <_fstat_r>
 800f638:	2800      	cmp	r0, #0
 800f63a:	dbec      	blt.n	800f616 <__swhatbuf_r+0x12>
 800f63c:	9901      	ldr	r1, [sp, #4]
 800f63e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f642:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f646:	4259      	negs	r1, r3
 800f648:	4159      	adcs	r1, r3
 800f64a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f64e:	e7eb      	b.n	800f628 <__swhatbuf_r+0x24>

0800f650 <__smakebuf_r>:
 800f650:	898b      	ldrh	r3, [r1, #12]
 800f652:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f654:	079d      	lsls	r5, r3, #30
 800f656:	4606      	mov	r6, r0
 800f658:	460c      	mov	r4, r1
 800f65a:	d507      	bpl.n	800f66c <__smakebuf_r+0x1c>
 800f65c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f660:	6023      	str	r3, [r4, #0]
 800f662:	6123      	str	r3, [r4, #16]
 800f664:	2301      	movs	r3, #1
 800f666:	6163      	str	r3, [r4, #20]
 800f668:	b003      	add	sp, #12
 800f66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f66c:	ab01      	add	r3, sp, #4
 800f66e:	466a      	mov	r2, sp
 800f670:	f7ff ffc8 	bl	800f604 <__swhatbuf_r>
 800f674:	9f00      	ldr	r7, [sp, #0]
 800f676:	4605      	mov	r5, r0
 800f678:	4639      	mov	r1, r7
 800f67a:	4630      	mov	r0, r6
 800f67c:	f7fd faec 	bl	800cc58 <_malloc_r>
 800f680:	b948      	cbnz	r0, 800f696 <__smakebuf_r+0x46>
 800f682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f686:	059a      	lsls	r2, r3, #22
 800f688:	d4ee      	bmi.n	800f668 <__smakebuf_r+0x18>
 800f68a:	f023 0303 	bic.w	r3, r3, #3
 800f68e:	f043 0302 	orr.w	r3, r3, #2
 800f692:	81a3      	strh	r3, [r4, #12]
 800f694:	e7e2      	b.n	800f65c <__smakebuf_r+0xc>
 800f696:	89a3      	ldrh	r3, [r4, #12]
 800f698:	6020      	str	r0, [r4, #0]
 800f69a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f69e:	81a3      	strh	r3, [r4, #12]
 800f6a0:	9b01      	ldr	r3, [sp, #4]
 800f6a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f6a6:	b15b      	cbz	r3, 800f6c0 <__smakebuf_r+0x70>
 800f6a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6ac:	4630      	mov	r0, r6
 800f6ae:	f000 f837 	bl	800f720 <_isatty_r>
 800f6b2:	b128      	cbz	r0, 800f6c0 <__smakebuf_r+0x70>
 800f6b4:	89a3      	ldrh	r3, [r4, #12]
 800f6b6:	f023 0303 	bic.w	r3, r3, #3
 800f6ba:	f043 0301 	orr.w	r3, r3, #1
 800f6be:	81a3      	strh	r3, [r4, #12]
 800f6c0:	89a3      	ldrh	r3, [r4, #12]
 800f6c2:	431d      	orrs	r5, r3
 800f6c4:	81a5      	strh	r5, [r4, #12]
 800f6c6:	e7cf      	b.n	800f668 <__smakebuf_r+0x18>

0800f6c8 <memmove>:
 800f6c8:	4288      	cmp	r0, r1
 800f6ca:	b510      	push	{r4, lr}
 800f6cc:	eb01 0402 	add.w	r4, r1, r2
 800f6d0:	d902      	bls.n	800f6d8 <memmove+0x10>
 800f6d2:	4284      	cmp	r4, r0
 800f6d4:	4623      	mov	r3, r4
 800f6d6:	d807      	bhi.n	800f6e8 <memmove+0x20>
 800f6d8:	1e43      	subs	r3, r0, #1
 800f6da:	42a1      	cmp	r1, r4
 800f6dc:	d008      	beq.n	800f6f0 <memmove+0x28>
 800f6de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6e6:	e7f8      	b.n	800f6da <memmove+0x12>
 800f6e8:	4402      	add	r2, r0
 800f6ea:	4601      	mov	r1, r0
 800f6ec:	428a      	cmp	r2, r1
 800f6ee:	d100      	bne.n	800f6f2 <memmove+0x2a>
 800f6f0:	bd10      	pop	{r4, pc}
 800f6f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f6fa:	e7f7      	b.n	800f6ec <memmove+0x24>

0800f6fc <_fstat_r>:
 800f6fc:	b538      	push	{r3, r4, r5, lr}
 800f6fe:	4d07      	ldr	r5, [pc, #28]	@ (800f71c <_fstat_r+0x20>)
 800f700:	2300      	movs	r3, #0
 800f702:	4604      	mov	r4, r0
 800f704:	4608      	mov	r0, r1
 800f706:	4611      	mov	r1, r2
 800f708:	602b      	str	r3, [r5, #0]
 800f70a:	f000 fa8b 	bl	800fc24 <_fstat>
 800f70e:	1c43      	adds	r3, r0, #1
 800f710:	d102      	bne.n	800f718 <_fstat_r+0x1c>
 800f712:	682b      	ldr	r3, [r5, #0]
 800f714:	b103      	cbz	r3, 800f718 <_fstat_r+0x1c>
 800f716:	6023      	str	r3, [r4, #0]
 800f718:	bd38      	pop	{r3, r4, r5, pc}
 800f71a:	bf00      	nop
 800f71c:	20008434 	.word	0x20008434

0800f720 <_isatty_r>:
 800f720:	b538      	push	{r3, r4, r5, lr}
 800f722:	4d06      	ldr	r5, [pc, #24]	@ (800f73c <_isatty_r+0x1c>)
 800f724:	2300      	movs	r3, #0
 800f726:	4604      	mov	r4, r0
 800f728:	4608      	mov	r0, r1
 800f72a:	602b      	str	r3, [r5, #0]
 800f72c:	f000 fa8a 	bl	800fc44 <_isatty>
 800f730:	1c43      	adds	r3, r0, #1
 800f732:	d102      	bne.n	800f73a <_isatty_r+0x1a>
 800f734:	682b      	ldr	r3, [r5, #0]
 800f736:	b103      	cbz	r3, 800f73a <_isatty_r+0x1a>
 800f738:	6023      	str	r3, [r4, #0]
 800f73a:	bd38      	pop	{r3, r4, r5, pc}
 800f73c:	20008434 	.word	0x20008434

0800f740 <__assert_func>:
 800f740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f742:	4614      	mov	r4, r2
 800f744:	461a      	mov	r2, r3
 800f746:	4b09      	ldr	r3, [pc, #36]	@ (800f76c <__assert_func+0x2c>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	4605      	mov	r5, r0
 800f74c:	68d8      	ldr	r0, [r3, #12]
 800f74e:	b14c      	cbz	r4, 800f764 <__assert_func+0x24>
 800f750:	4b07      	ldr	r3, [pc, #28]	@ (800f770 <__assert_func+0x30>)
 800f752:	9100      	str	r1, [sp, #0]
 800f754:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f758:	4906      	ldr	r1, [pc, #24]	@ (800f774 <__assert_func+0x34>)
 800f75a:	462b      	mov	r3, r5
 800f75c:	f000 f842 	bl	800f7e4 <fiprintf>
 800f760:	f000 f852 	bl	800f808 <abort>
 800f764:	4b04      	ldr	r3, [pc, #16]	@ (800f778 <__assert_func+0x38>)
 800f766:	461c      	mov	r4, r3
 800f768:	e7f3      	b.n	800f752 <__assert_func+0x12>
 800f76a:	bf00      	nop
 800f76c:	20000a74 	.word	0x20000a74
 800f770:	080a3b1d 	.word	0x080a3b1d
 800f774:	080a3b2a 	.word	0x080a3b2a
 800f778:	080a3b58 	.word	0x080a3b58

0800f77c <_calloc_r>:
 800f77c:	b570      	push	{r4, r5, r6, lr}
 800f77e:	fba1 5402 	umull	r5, r4, r1, r2
 800f782:	b934      	cbnz	r4, 800f792 <_calloc_r+0x16>
 800f784:	4629      	mov	r1, r5
 800f786:	f7fd fa67 	bl	800cc58 <_malloc_r>
 800f78a:	4606      	mov	r6, r0
 800f78c:	b928      	cbnz	r0, 800f79a <_calloc_r+0x1e>
 800f78e:	4630      	mov	r0, r6
 800f790:	bd70      	pop	{r4, r5, r6, pc}
 800f792:	220c      	movs	r2, #12
 800f794:	6002      	str	r2, [r0, #0]
 800f796:	2600      	movs	r6, #0
 800f798:	e7f9      	b.n	800f78e <_calloc_r+0x12>
 800f79a:	462a      	mov	r2, r5
 800f79c:	4621      	mov	r1, r4
 800f79e:	f7fe f927 	bl	800d9f0 <memset>
 800f7a2:	e7f4      	b.n	800f78e <_calloc_r+0x12>

0800f7a4 <__ascii_mbtowc>:
 800f7a4:	b082      	sub	sp, #8
 800f7a6:	b901      	cbnz	r1, 800f7aa <__ascii_mbtowc+0x6>
 800f7a8:	a901      	add	r1, sp, #4
 800f7aa:	b142      	cbz	r2, 800f7be <__ascii_mbtowc+0x1a>
 800f7ac:	b14b      	cbz	r3, 800f7c2 <__ascii_mbtowc+0x1e>
 800f7ae:	7813      	ldrb	r3, [r2, #0]
 800f7b0:	600b      	str	r3, [r1, #0]
 800f7b2:	7812      	ldrb	r2, [r2, #0]
 800f7b4:	1e10      	subs	r0, r2, #0
 800f7b6:	bf18      	it	ne
 800f7b8:	2001      	movne	r0, #1
 800f7ba:	b002      	add	sp, #8
 800f7bc:	4770      	bx	lr
 800f7be:	4610      	mov	r0, r2
 800f7c0:	e7fb      	b.n	800f7ba <__ascii_mbtowc+0x16>
 800f7c2:	f06f 0001 	mvn.w	r0, #1
 800f7c6:	e7f8      	b.n	800f7ba <__ascii_mbtowc+0x16>

0800f7c8 <__ascii_wctomb>:
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	4608      	mov	r0, r1
 800f7cc:	b141      	cbz	r1, 800f7e0 <__ascii_wctomb+0x18>
 800f7ce:	2aff      	cmp	r2, #255	@ 0xff
 800f7d0:	d904      	bls.n	800f7dc <__ascii_wctomb+0x14>
 800f7d2:	228a      	movs	r2, #138	@ 0x8a
 800f7d4:	601a      	str	r2, [r3, #0]
 800f7d6:	f04f 30ff 	mov.w	r0, #4294967295
 800f7da:	4770      	bx	lr
 800f7dc:	700a      	strb	r2, [r1, #0]
 800f7de:	2001      	movs	r0, #1
 800f7e0:	4770      	bx	lr
	...

0800f7e4 <fiprintf>:
 800f7e4:	b40e      	push	{r1, r2, r3}
 800f7e6:	b503      	push	{r0, r1, lr}
 800f7e8:	4601      	mov	r1, r0
 800f7ea:	ab03      	add	r3, sp, #12
 800f7ec:	4805      	ldr	r0, [pc, #20]	@ (800f804 <fiprintf+0x20>)
 800f7ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7f2:	6800      	ldr	r0, [r0, #0]
 800f7f4:	9301      	str	r3, [sp, #4]
 800f7f6:	f7ff fd41 	bl	800f27c <_vfiprintf_r>
 800f7fa:	b002      	add	sp, #8
 800f7fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f800:	b003      	add	sp, #12
 800f802:	4770      	bx	lr
 800f804:	20000a74 	.word	0x20000a74

0800f808 <abort>:
 800f808:	b508      	push	{r3, lr}
 800f80a:	2006      	movs	r0, #6
 800f80c:	f000 f82c 	bl	800f868 <raise>
 800f810:	2001      	movs	r0, #1
 800f812:	f000 fa3f 	bl	800fc94 <_exit>

0800f816 <_raise_r>:
 800f816:	291f      	cmp	r1, #31
 800f818:	b538      	push	{r3, r4, r5, lr}
 800f81a:	4605      	mov	r5, r0
 800f81c:	460c      	mov	r4, r1
 800f81e:	d904      	bls.n	800f82a <_raise_r+0x14>
 800f820:	2316      	movs	r3, #22
 800f822:	6003      	str	r3, [r0, #0]
 800f824:	f04f 30ff 	mov.w	r0, #4294967295
 800f828:	bd38      	pop	{r3, r4, r5, pc}
 800f82a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f82c:	b112      	cbz	r2, 800f834 <_raise_r+0x1e>
 800f82e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f832:	b94b      	cbnz	r3, 800f848 <_raise_r+0x32>
 800f834:	4628      	mov	r0, r5
 800f836:	f000 f831 	bl	800f89c <_getpid_r>
 800f83a:	4622      	mov	r2, r4
 800f83c:	4601      	mov	r1, r0
 800f83e:	4628      	mov	r0, r5
 800f840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f844:	f000 b818 	b.w	800f878 <_kill_r>
 800f848:	2b01      	cmp	r3, #1
 800f84a:	d00a      	beq.n	800f862 <_raise_r+0x4c>
 800f84c:	1c59      	adds	r1, r3, #1
 800f84e:	d103      	bne.n	800f858 <_raise_r+0x42>
 800f850:	2316      	movs	r3, #22
 800f852:	6003      	str	r3, [r0, #0]
 800f854:	2001      	movs	r0, #1
 800f856:	e7e7      	b.n	800f828 <_raise_r+0x12>
 800f858:	2100      	movs	r1, #0
 800f85a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f85e:	4620      	mov	r0, r4
 800f860:	4798      	blx	r3
 800f862:	2000      	movs	r0, #0
 800f864:	e7e0      	b.n	800f828 <_raise_r+0x12>
	...

0800f868 <raise>:
 800f868:	4b02      	ldr	r3, [pc, #8]	@ (800f874 <raise+0xc>)
 800f86a:	4601      	mov	r1, r0
 800f86c:	6818      	ldr	r0, [r3, #0]
 800f86e:	f7ff bfd2 	b.w	800f816 <_raise_r>
 800f872:	bf00      	nop
 800f874:	20000a74 	.word	0x20000a74

0800f878 <_kill_r>:
 800f878:	b538      	push	{r3, r4, r5, lr}
 800f87a:	4d07      	ldr	r5, [pc, #28]	@ (800f898 <_kill_r+0x20>)
 800f87c:	2300      	movs	r3, #0
 800f87e:	4604      	mov	r4, r0
 800f880:	4608      	mov	r0, r1
 800f882:	4611      	mov	r1, r2
 800f884:	602b      	str	r3, [r5, #0]
 800f886:	f000 f9e5 	bl	800fc54 <_kill>
 800f88a:	1c43      	adds	r3, r0, #1
 800f88c:	d102      	bne.n	800f894 <_kill_r+0x1c>
 800f88e:	682b      	ldr	r3, [r5, #0]
 800f890:	b103      	cbz	r3, 800f894 <_kill_r+0x1c>
 800f892:	6023      	str	r3, [r4, #0]
 800f894:	bd38      	pop	{r3, r4, r5, pc}
 800f896:	bf00      	nop
 800f898:	20008434 	.word	0x20008434

0800f89c <_getpid_r>:
 800f89c:	f000 b9ca 	b.w	800fc34 <_getpid>

0800f8a0 <expf>:
 800f8a0:	b508      	push	{r3, lr}
 800f8a2:	ed2d 8b02 	vpush	{d8}
 800f8a6:	eef0 8a40 	vmov.f32	s17, s0
 800f8aa:	f000 f8e5 	bl	800fa78 <__ieee754_expf>
 800f8ae:	eeb0 8a40 	vmov.f32	s16, s0
 800f8b2:	eeb0 0a68 	vmov.f32	s0, s17
 800f8b6:	f000 f829 	bl	800f90c <finitef>
 800f8ba:	b160      	cbz	r0, 800f8d6 <expf+0x36>
 800f8bc:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800f8fc <expf+0x5c>
 800f8c0:	eef4 8ae7 	vcmpe.f32	s17, s15
 800f8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c8:	dd0a      	ble.n	800f8e0 <expf+0x40>
 800f8ca:	f7fe f8f3 	bl	800dab4 <__errno>
 800f8ce:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800f900 <expf+0x60>
 800f8d2:	2322      	movs	r3, #34	@ 0x22
 800f8d4:	6003      	str	r3, [r0, #0]
 800f8d6:	eeb0 0a48 	vmov.f32	s0, s16
 800f8da:	ecbd 8b02 	vpop	{d8}
 800f8de:	bd08      	pop	{r3, pc}
 800f8e0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800f904 <expf+0x64>
 800f8e4:	eef4 8ae7 	vcmpe.f32	s17, s15
 800f8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ec:	d5f3      	bpl.n	800f8d6 <expf+0x36>
 800f8ee:	f7fe f8e1 	bl	800dab4 <__errno>
 800f8f2:	2322      	movs	r3, #34	@ 0x22
 800f8f4:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800f908 <expf+0x68>
 800f8f8:	6003      	str	r3, [r0, #0]
 800f8fa:	e7ec      	b.n	800f8d6 <expf+0x36>
 800f8fc:	42b17217 	.word	0x42b17217
 800f900:	7f800000 	.word	0x7f800000
 800f904:	c2cff1b5 	.word	0xc2cff1b5
 800f908:	00000000 	.word	0x00000000

0800f90c <finitef>:
 800f90c:	ee10 3a10 	vmov	r3, s0
 800f910:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800f914:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800f918:	bfac      	ite	ge
 800f91a:	2000      	movge	r0, #0
 800f91c:	2001      	movlt	r0, #1
 800f91e:	4770      	bx	lr

0800f920 <with_errnof>:
 800f920:	b510      	push	{r4, lr}
 800f922:	ed2d 8b02 	vpush	{d8}
 800f926:	eeb0 8a40 	vmov.f32	s16, s0
 800f92a:	4604      	mov	r4, r0
 800f92c:	f7fe f8c2 	bl	800dab4 <__errno>
 800f930:	eeb0 0a48 	vmov.f32	s0, s16
 800f934:	ecbd 8b02 	vpop	{d8}
 800f938:	6004      	str	r4, [r0, #0]
 800f93a:	bd10      	pop	{r4, pc}

0800f93c <xflowf>:
 800f93c:	b130      	cbz	r0, 800f94c <xflowf+0x10>
 800f93e:	eef1 7a40 	vneg.f32	s15, s0
 800f942:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f946:	2022      	movs	r0, #34	@ 0x22
 800f948:	f7ff bfea 	b.w	800f920 <with_errnof>
 800f94c:	eef0 7a40 	vmov.f32	s15, s0
 800f950:	e7f7      	b.n	800f942 <xflowf+0x6>
	...

0800f954 <__math_uflowf>:
 800f954:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f95c <__math_uflowf+0x8>
 800f958:	f7ff bff0 	b.w	800f93c <xflowf>
 800f95c:	10000000 	.word	0x10000000

0800f960 <__math_oflowf>:
 800f960:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f968 <__math_oflowf+0x8>
 800f964:	f7ff bfea 	b.w	800f93c <xflowf>
 800f968:	70000000 	.word	0x70000000

0800f96c <ceilf>:
 800f96c:	ee10 3a10 	vmov	r3, s0
 800f970:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f974:	3a7f      	subs	r2, #127	@ 0x7f
 800f976:	2a16      	cmp	r2, #22
 800f978:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f97c:	dc2b      	bgt.n	800f9d6 <ceilf+0x6a>
 800f97e:	2a00      	cmp	r2, #0
 800f980:	da12      	bge.n	800f9a8 <ceilf+0x3c>
 800f982:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f9e8 <ceilf+0x7c>
 800f986:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f98a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f992:	dd06      	ble.n	800f9a2 <ceilf+0x36>
 800f994:	2b00      	cmp	r3, #0
 800f996:	db24      	blt.n	800f9e2 <ceilf+0x76>
 800f998:	2900      	cmp	r1, #0
 800f99a:	bf14      	ite	ne
 800f99c:	f04f 537e 	movne.w	r3, #1065353216	@ 0x3f800000
 800f9a0:	2300      	moveq	r3, #0
 800f9a2:	ee00 3a10 	vmov	s0, r3
 800f9a6:	4770      	bx	lr
 800f9a8:	4910      	ldr	r1, [pc, #64]	@ (800f9ec <ceilf+0x80>)
 800f9aa:	4111      	asrs	r1, r2
 800f9ac:	420b      	tst	r3, r1
 800f9ae:	d0fa      	beq.n	800f9a6 <ceilf+0x3a>
 800f9b0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800f9e8 <ceilf+0x7c>
 800f9b4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f9b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f9bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9c0:	ddef      	ble.n	800f9a2 <ceilf+0x36>
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	bfc2      	ittt	gt
 800f9c6:	f44f 0000 	movgt.w	r0, #8388608	@ 0x800000
 800f9ca:	fa40 f202 	asrgt.w	r2, r0, r2
 800f9ce:	189b      	addgt	r3, r3, r2
 800f9d0:	ea23 0301 	bic.w	r3, r3, r1
 800f9d4:	e7e5      	b.n	800f9a2 <ceilf+0x36>
 800f9d6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800f9da:	d3e4      	bcc.n	800f9a6 <ceilf+0x3a>
 800f9dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f9e0:	4770      	bx	lr
 800f9e2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f9e6:	e7dc      	b.n	800f9a2 <ceilf+0x36>
 800f9e8:	7149f2ca 	.word	0x7149f2ca
 800f9ec:	007fffff 	.word	0x007fffff

0800f9f0 <floorf>:
 800f9f0:	ee10 3a10 	vmov	r3, s0
 800f9f4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f9f8:	3a7f      	subs	r2, #127	@ 0x7f
 800f9fa:	2a16      	cmp	r2, #22
 800f9fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fa00:	dc2b      	bgt.n	800fa5a <floorf+0x6a>
 800fa02:	2a00      	cmp	r2, #0
 800fa04:	da12      	bge.n	800fa2c <floorf+0x3c>
 800fa06:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fa6c <floorf+0x7c>
 800fa0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fa0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fa12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa16:	dd06      	ble.n	800fa26 <floorf+0x36>
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	da24      	bge.n	800fa66 <floorf+0x76>
 800fa1c:	2900      	cmp	r1, #0
 800fa1e:	4b14      	ldr	r3, [pc, #80]	@ (800fa70 <floorf+0x80>)
 800fa20:	bf08      	it	eq
 800fa22:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800fa26:	ee00 3a10 	vmov	s0, r3
 800fa2a:	4770      	bx	lr
 800fa2c:	4911      	ldr	r1, [pc, #68]	@ (800fa74 <floorf+0x84>)
 800fa2e:	4111      	asrs	r1, r2
 800fa30:	420b      	tst	r3, r1
 800fa32:	d0fa      	beq.n	800fa2a <floorf+0x3a>
 800fa34:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800fa6c <floorf+0x7c>
 800fa38:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fa3c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fa40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa44:	ddef      	ble.n	800fa26 <floorf+0x36>
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	bfbe      	ittt	lt
 800fa4a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800fa4e:	fa40 f202 	asrlt.w	r2, r0, r2
 800fa52:	189b      	addlt	r3, r3, r2
 800fa54:	ea23 0301 	bic.w	r3, r3, r1
 800fa58:	e7e5      	b.n	800fa26 <floorf+0x36>
 800fa5a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800fa5e:	d3e4      	bcc.n	800fa2a <floorf+0x3a>
 800fa60:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fa64:	4770      	bx	lr
 800fa66:	2300      	movs	r3, #0
 800fa68:	e7dd      	b.n	800fa26 <floorf+0x36>
 800fa6a:	bf00      	nop
 800fa6c:	7149f2ca 	.word	0x7149f2ca
 800fa70:	bf800000 	.word	0xbf800000
 800fa74:	007fffff 	.word	0x007fffff

0800fa78 <__ieee754_expf>:
 800fa78:	ee10 2a10 	vmov	r2, s0
 800fa7c:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800fa80:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fa84:	d902      	bls.n	800fa8c <__ieee754_expf+0x14>
 800fa86:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fa8a:	4770      	bx	lr
 800fa8c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800fa90:	d106      	bne.n	800faa0 <__ieee754_expf+0x28>
 800fa92:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800fbcc <__ieee754_expf+0x154>
 800fa96:	2900      	cmp	r1, #0
 800fa98:	bf18      	it	ne
 800fa9a:	eeb0 0a67 	vmovne.f32	s0, s15
 800fa9e:	4770      	bx	lr
 800faa0:	484b      	ldr	r0, [pc, #300]	@ (800fbd0 <__ieee754_expf+0x158>)
 800faa2:	4282      	cmp	r2, r0
 800faa4:	dd02      	ble.n	800faac <__ieee754_expf+0x34>
 800faa6:	2000      	movs	r0, #0
 800faa8:	f7ff bf5a 	b.w	800f960 <__math_oflowf>
 800faac:	2a00      	cmp	r2, #0
 800faae:	da05      	bge.n	800fabc <__ieee754_expf+0x44>
 800fab0:	4a48      	ldr	r2, [pc, #288]	@ (800fbd4 <__ieee754_expf+0x15c>)
 800fab2:	4293      	cmp	r3, r2
 800fab4:	d902      	bls.n	800fabc <__ieee754_expf+0x44>
 800fab6:	2000      	movs	r0, #0
 800fab8:	f7ff bf4c 	b.w	800f954 <__math_uflowf>
 800fabc:	4a46      	ldr	r2, [pc, #280]	@ (800fbd8 <__ieee754_expf+0x160>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800fac4:	d952      	bls.n	800fb6c <__ieee754_expf+0xf4>
 800fac6:	4a45      	ldr	r2, [pc, #276]	@ (800fbdc <__ieee754_expf+0x164>)
 800fac8:	4293      	cmp	r3, r2
 800faca:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800face:	d834      	bhi.n	800fb3a <__ieee754_expf+0xc2>
 800fad0:	4b43      	ldr	r3, [pc, #268]	@ (800fbe0 <__ieee754_expf+0x168>)
 800fad2:	4413      	add	r3, r2
 800fad4:	ed93 7a00 	vldr	s14, [r3]
 800fad8:	4b42      	ldr	r3, [pc, #264]	@ (800fbe4 <__ieee754_expf+0x16c>)
 800fada:	4413      	add	r3, r2
 800fadc:	ee30 7a47 	vsub.f32	s14, s0, s14
 800fae0:	f081 0201 	eor.w	r2, r1, #1
 800fae4:	edd3 7a00 	vldr	s15, [r3]
 800fae8:	1a52      	subs	r2, r2, r1
 800faea:	ee37 0a67 	vsub.f32	s0, s14, s15
 800faee:	ee20 6a00 	vmul.f32	s12, s0, s0
 800faf2:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800fbe8 <__ieee754_expf+0x170>
 800faf6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800fbec <__ieee754_expf+0x174>
 800fafa:	eee6 6a05 	vfma.f32	s13, s12, s10
 800fafe:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800fbf0 <__ieee754_expf+0x178>
 800fb02:	eea6 5a86 	vfma.f32	s10, s13, s12
 800fb06:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800fbf4 <__ieee754_expf+0x17c>
 800fb0a:	eee5 6a06 	vfma.f32	s13, s10, s12
 800fb0e:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800fbf8 <__ieee754_expf+0x180>
 800fb12:	eea6 5a86 	vfma.f32	s10, s13, s12
 800fb16:	eef0 6a40 	vmov.f32	s13, s0
 800fb1a:	eee5 6a46 	vfms.f32	s13, s10, s12
 800fb1e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800fb22:	ee20 5a26 	vmul.f32	s10, s0, s13
 800fb26:	bb92      	cbnz	r2, 800fb8e <__ieee754_expf+0x116>
 800fb28:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800fb2c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800fb30:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fb34:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800fb38:	4770      	bx	lr
 800fb3a:	4b30      	ldr	r3, [pc, #192]	@ (800fbfc <__ieee754_expf+0x184>)
 800fb3c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800fc00 <__ieee754_expf+0x188>
 800fb40:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800fc04 <__ieee754_expf+0x18c>
 800fb44:	4413      	add	r3, r2
 800fb46:	edd3 7a00 	vldr	s15, [r3]
 800fb4a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fb4e:	eeb0 7a40 	vmov.f32	s14, s0
 800fb52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fb56:	ee17 2a90 	vmov	r2, s15
 800fb5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb5e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800fb62:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800fc08 <__ieee754_expf+0x190>
 800fb66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fb6a:	e7be      	b.n	800faea <__ieee754_expf+0x72>
 800fb6c:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800fb70:	d20b      	bcs.n	800fb8a <__ieee754_expf+0x112>
 800fb72:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800fc0c <__ieee754_expf+0x194>
 800fb76:	ee70 6a26 	vadd.f32	s13, s0, s13
 800fb7a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800fb7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb82:	dd02      	ble.n	800fb8a <__ieee754_expf+0x112>
 800fb84:	ee30 0a25 	vadd.f32	s0, s0, s11
 800fb88:	4770      	bx	lr
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	e7af      	b.n	800faee <__ieee754_expf+0x76>
 800fb8e:	ee36 6a66 	vsub.f32	s12, s12, s13
 800fb92:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800fb96:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800fb9a:	bfb8      	it	lt
 800fb9c:	3264      	addlt	r2, #100	@ 0x64
 800fb9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fba2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fba6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800fbaa:	ee17 3a90 	vmov	r3, s15
 800fbae:	bfab      	itete	ge
 800fbb0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800fbb4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800fbb8:	ee00 3a10 	vmovge	s0, r3
 800fbbc:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800fc10 <__ieee754_expf+0x198>
 800fbc0:	bfbc      	itt	lt
 800fbc2:	ee00 3a10 	vmovlt	s0, r3
 800fbc6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800fbca:	4770      	bx	lr
 800fbcc:	00000000 	.word	0x00000000
 800fbd0:	42b17217 	.word	0x42b17217
 800fbd4:	42cff1b5 	.word	0x42cff1b5
 800fbd8:	3eb17218 	.word	0x3eb17218
 800fbdc:	3f851591 	.word	0x3f851591
 800fbe0:	080a3d64 	.word	0x080a3d64
 800fbe4:	080a3d5c 	.word	0x080a3d5c
 800fbe8:	3331bb4c 	.word	0x3331bb4c
 800fbec:	b5ddea0e 	.word	0xb5ddea0e
 800fbf0:	388ab355 	.word	0x388ab355
 800fbf4:	bb360b61 	.word	0xbb360b61
 800fbf8:	3e2aaaab 	.word	0x3e2aaaab
 800fbfc:	080a3d6c 	.word	0x080a3d6c
 800fc00:	3fb8aa3b 	.word	0x3fb8aa3b
 800fc04:	3f317180 	.word	0x3f317180
 800fc08:	3717f7d1 	.word	0x3717f7d1
 800fc0c:	7149f2ca 	.word	0x7149f2ca
 800fc10:	0d800000 	.word	0x0d800000

0800fc14 <_close>:
 800fc14:	4b02      	ldr	r3, [pc, #8]	@ (800fc20 <_close+0xc>)
 800fc16:	2258      	movs	r2, #88	@ 0x58
 800fc18:	601a      	str	r2, [r3, #0]
 800fc1a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc1e:	4770      	bx	lr
 800fc20:	20008434 	.word	0x20008434

0800fc24 <_fstat>:
 800fc24:	4b02      	ldr	r3, [pc, #8]	@ (800fc30 <_fstat+0xc>)
 800fc26:	2258      	movs	r2, #88	@ 0x58
 800fc28:	601a      	str	r2, [r3, #0]
 800fc2a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc2e:	4770      	bx	lr
 800fc30:	20008434 	.word	0x20008434

0800fc34 <_getpid>:
 800fc34:	4b02      	ldr	r3, [pc, #8]	@ (800fc40 <_getpid+0xc>)
 800fc36:	2258      	movs	r2, #88	@ 0x58
 800fc38:	601a      	str	r2, [r3, #0]
 800fc3a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc3e:	4770      	bx	lr
 800fc40:	20008434 	.word	0x20008434

0800fc44 <_isatty>:
 800fc44:	4b02      	ldr	r3, [pc, #8]	@ (800fc50 <_isatty+0xc>)
 800fc46:	2258      	movs	r2, #88	@ 0x58
 800fc48:	601a      	str	r2, [r3, #0]
 800fc4a:	2000      	movs	r0, #0
 800fc4c:	4770      	bx	lr
 800fc4e:	bf00      	nop
 800fc50:	20008434 	.word	0x20008434

0800fc54 <_kill>:
 800fc54:	4b02      	ldr	r3, [pc, #8]	@ (800fc60 <_kill+0xc>)
 800fc56:	2258      	movs	r2, #88	@ 0x58
 800fc58:	601a      	str	r2, [r3, #0]
 800fc5a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc5e:	4770      	bx	lr
 800fc60:	20008434 	.word	0x20008434

0800fc64 <_lseek>:
 800fc64:	4b02      	ldr	r3, [pc, #8]	@ (800fc70 <_lseek+0xc>)
 800fc66:	2258      	movs	r2, #88	@ 0x58
 800fc68:	601a      	str	r2, [r3, #0]
 800fc6a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc6e:	4770      	bx	lr
 800fc70:	20008434 	.word	0x20008434

0800fc74 <_read>:
 800fc74:	4b02      	ldr	r3, [pc, #8]	@ (800fc80 <_read+0xc>)
 800fc76:	2258      	movs	r2, #88	@ 0x58
 800fc78:	601a      	str	r2, [r3, #0]
 800fc7a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc7e:	4770      	bx	lr
 800fc80:	20008434 	.word	0x20008434

0800fc84 <_write>:
 800fc84:	4b02      	ldr	r3, [pc, #8]	@ (800fc90 <_write+0xc>)
 800fc86:	2258      	movs	r2, #88	@ 0x58
 800fc88:	601a      	str	r2, [r3, #0]
 800fc8a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc8e:	4770      	bx	lr
 800fc90:	20008434 	.word	0x20008434

0800fc94 <_exit>:
 800fc94:	e7fe      	b.n	800fc94 <_exit>
	...

0800fc98 <_init>:
 800fc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc9a:	bf00      	nop
 800fc9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc9e:	bc08      	pop	{r3}
 800fca0:	469e      	mov	lr, r3
 800fca2:	4770      	bx	lr

0800fca4 <_fini>:
 800fca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fca6:	bf00      	nop
 800fca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcaa:	bc08      	pop	{r3}
 800fcac:	469e      	mov	lr, r3
 800fcae:	4770      	bx	lr
